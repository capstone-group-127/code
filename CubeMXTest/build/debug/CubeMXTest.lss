
build/debug/CubeMXTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ba4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001c64  08001c64  00002c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c9c  08001c9c  00002c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ca0  08001ca0  00002ca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001ca4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000170  2000000c  08001cb0  0000300c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000017c  08001cb0  0000317c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000b9d6  00000000  00000000  0000306d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000179f  00000000  00000000  0000ea43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000818  00000000  00000000  000101e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000637  00000000  00000000  00010a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000a325  00000000  00000000  00011037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00002732  00000000  00000000  0001b35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000013cc  00000000  00000000  0001da90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000507f  00000000  00000000  0001ee5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000016f  00000000  00000000  00023edb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__udivsi3>:
 80000c0:	2200      	movs	r2, #0
 80000c2:	0843      	lsrs	r3, r0, #1
 80000c4:	428b      	cmp	r3, r1
 80000c6:	d374      	bcc.n	80001b2 <__udivsi3+0xf2>
 80000c8:	0903      	lsrs	r3, r0, #4
 80000ca:	428b      	cmp	r3, r1
 80000cc:	d35f      	bcc.n	800018e <__udivsi3+0xce>
 80000ce:	0a03      	lsrs	r3, r0, #8
 80000d0:	428b      	cmp	r3, r1
 80000d2:	d344      	bcc.n	800015e <__udivsi3+0x9e>
 80000d4:	0b03      	lsrs	r3, r0, #12
 80000d6:	428b      	cmp	r3, r1
 80000d8:	d328      	bcc.n	800012c <__udivsi3+0x6c>
 80000da:	0c03      	lsrs	r3, r0, #16
 80000dc:	428b      	cmp	r3, r1
 80000de:	d30d      	bcc.n	80000fc <__udivsi3+0x3c>
 80000e0:	22ff      	movs	r2, #255	@ 0xff
 80000e2:	0209      	lsls	r1, r1, #8
 80000e4:	ba12      	rev	r2, r2
 80000e6:	0c03      	lsrs	r3, r0, #16
 80000e8:	428b      	cmp	r3, r1
 80000ea:	d302      	bcc.n	80000f2 <__udivsi3+0x32>
 80000ec:	1212      	asrs	r2, r2, #8
 80000ee:	0209      	lsls	r1, r1, #8
 80000f0:	d065      	beq.n	80001be <__udivsi3+0xfe>
 80000f2:	0b03      	lsrs	r3, r0, #12
 80000f4:	428b      	cmp	r3, r1
 80000f6:	d319      	bcc.n	800012c <__udivsi3+0x6c>
 80000f8:	e000      	b.n	80000fc <__udivsi3+0x3c>
 80000fa:	0a09      	lsrs	r1, r1, #8
 80000fc:	0bc3      	lsrs	r3, r0, #15
 80000fe:	428b      	cmp	r3, r1
 8000100:	d301      	bcc.n	8000106 <__udivsi3+0x46>
 8000102:	03cb      	lsls	r3, r1, #15
 8000104:	1ac0      	subs	r0, r0, r3
 8000106:	4152      	adcs	r2, r2
 8000108:	0b83      	lsrs	r3, r0, #14
 800010a:	428b      	cmp	r3, r1
 800010c:	d301      	bcc.n	8000112 <__udivsi3+0x52>
 800010e:	038b      	lsls	r3, r1, #14
 8000110:	1ac0      	subs	r0, r0, r3
 8000112:	4152      	adcs	r2, r2
 8000114:	0b43      	lsrs	r3, r0, #13
 8000116:	428b      	cmp	r3, r1
 8000118:	d301      	bcc.n	800011e <__udivsi3+0x5e>
 800011a:	034b      	lsls	r3, r1, #13
 800011c:	1ac0      	subs	r0, r0, r3
 800011e:	4152      	adcs	r2, r2
 8000120:	0b03      	lsrs	r3, r0, #12
 8000122:	428b      	cmp	r3, r1
 8000124:	d301      	bcc.n	800012a <__udivsi3+0x6a>
 8000126:	030b      	lsls	r3, r1, #12
 8000128:	1ac0      	subs	r0, r0, r3
 800012a:	4152      	adcs	r2, r2
 800012c:	0ac3      	lsrs	r3, r0, #11
 800012e:	428b      	cmp	r3, r1
 8000130:	d301      	bcc.n	8000136 <__udivsi3+0x76>
 8000132:	02cb      	lsls	r3, r1, #11
 8000134:	1ac0      	subs	r0, r0, r3
 8000136:	4152      	adcs	r2, r2
 8000138:	0a83      	lsrs	r3, r0, #10
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x82>
 800013e:	028b      	lsls	r3, r1, #10
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0a43      	lsrs	r3, r0, #9
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x8e>
 800014a:	024b      	lsls	r3, r1, #9
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0a03      	lsrs	r3, r0, #8
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x9a>
 8000156:	020b      	lsls	r3, r1, #8
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	d2cd      	bcs.n	80000fa <__udivsi3+0x3a>
 800015e:	09c3      	lsrs	r3, r0, #7
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__udivsi3+0xa8>
 8000164:	01cb      	lsls	r3, r1, #7
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0983      	lsrs	r3, r0, #6
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__udivsi3+0xb4>
 8000170:	018b      	lsls	r3, r1, #6
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0943      	lsrs	r3, r0, #5
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__udivsi3+0xc0>
 800017c:	014b      	lsls	r3, r1, #5
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0903      	lsrs	r3, r0, #4
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__udivsi3+0xcc>
 8000188:	010b      	lsls	r3, r1, #4
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	08c3      	lsrs	r3, r0, #3
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__udivsi3+0xd8>
 8000194:	00cb      	lsls	r3, r1, #3
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0883      	lsrs	r3, r0, #2
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xe4>
 80001a0:	008b      	lsls	r3, r1, #2
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xf0>
 80001ac:	004b      	lsls	r3, r1, #1
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	1a41      	subs	r1, r0, r1
 80001b4:	d200      	bcs.n	80001b8 <__udivsi3+0xf8>
 80001b6:	4601      	mov	r1, r0
 80001b8:	4152      	adcs	r2, r2
 80001ba:	4610      	mov	r0, r2
 80001bc:	4770      	bx	lr
 80001be:	e7ff      	b.n	80001c0 <__udivsi3+0x100>
 80001c0:	b501      	push	{r0, lr}
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 f806 	bl	80001d4 <__aeabi_idiv0>
 80001c8:	bd02      	pop	{r1, pc}
 80001ca:	46c0      	nop			@ (mov r8, r8)

080001cc <__aeabi_uidivmod>:
 80001cc:	2900      	cmp	r1, #0
 80001ce:	d0f7      	beq.n	80001c0 <__udivsi3+0x100>
 80001d0:	e776      	b.n	80000c0 <__udivsi3>
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_idiv0>:
 80001d4:	4770      	bx	lr
 80001d6:	46c0      	nop			@ (mov r8, r8)

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c06      	ldr	r4, [pc, #24]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d107      	bne.n	80001f2 <__do_global_dtors_aux+0x1a>
 80001e2:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <__do_global_dtors_aux+0x16>
 80001e8:	4804      	ldr	r0, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x24>)
 80001ea:	e000      	b.n	80001ee <__do_global_dtors_aux+0x16>
 80001ec:	bf00      	nop
 80001ee:	2301      	movs	r3, #1
 80001f0:	7023      	strb	r3, [r4, #0]
 80001f2:	bd10      	pop	{r4, pc}
 80001f4:	2000000c 	.word	0x2000000c
 80001f8:	00000000 	.word	0x00000000
 80001fc:	08001c4c 	.word	0x08001c4c

08000200 <frame_dummy>:
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <frame_dummy+0x14>)
 8000202:	b510      	push	{r4, lr}
 8000204:	2b00      	cmp	r3, #0
 8000206:	d003      	beq.n	8000210 <frame_dummy+0x10>
 8000208:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x18>)
 800020a:	4804      	ldr	r0, [pc, #16]	@ (800021c <frame_dummy+0x1c>)
 800020c:	e000      	b.n	8000210 <frame_dummy+0x10>
 800020e:	bf00      	nop
 8000210:	bd10      	pop	{r4, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08001c4c 	.word	0x08001c4c

08000220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46c6      	mov	lr, r8
 8000224:	b500      	push	{lr}
 8000226:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000228:	ac03      	add	r4, sp, #12
 800022a:	2214      	movs	r2, #20
 800022c:	2100      	movs	r1, #0
 800022e:	0020      	movs	r0, r4
 8000230:	f001 fcdf 	bl	8001bf2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000234:	4b29      	ldr	r3, [pc, #164]	@ (80002dc <MX_GPIO_Init+0xbc>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	2180      	movs	r1, #128	@ 0x80
 800023a:	0309      	lsls	r1, r1, #12
 800023c:	430a      	orrs	r2, r1
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	695a      	ldr	r2, [r3, #20]
 8000242:	400a      	ands	r2, r1
 8000244:	9200      	str	r2, [sp, #0]
 8000246:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	2180      	movs	r1, #128	@ 0x80
 800024c:	0289      	lsls	r1, r1, #10
 800024e:	430a      	orrs	r2, r1
 8000250:	615a      	str	r2, [r3, #20]
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	400a      	ands	r2, r1
 8000256:	9201      	str	r2, [sp, #4]
 8000258:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	2180      	movs	r1, #128	@ 0x80
 800025e:	02c9      	lsls	r1, r1, #11
 8000260:	430a      	orrs	r2, r1
 8000262:	615a      	str	r2, [r3, #20]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	400b      	ands	r3, r1
 8000268:	9302      	str	r3, [sp, #8]
 800026a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800026c:	2580      	movs	r5, #128	@ 0x80
 800026e:	01ad      	lsls	r5, r5, #6
 8000270:	4b1b      	ldr	r3, [pc, #108]	@ (80002e0 <MX_GPIO_Init+0xc0>)
 8000272:	4698      	mov	r8, r3
 8000274:	2200      	movs	r2, #0
 8000276:	0029      	movs	r1, r5
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fa8f 	bl	800079c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800027e:	4e19      	ldr	r6, [pc, #100]	@ (80002e4 <MX_GPIO_Init+0xc4>)
 8000280:	2200      	movs	r2, #0
 8000282:	2101      	movs	r1, #1
 8000284:	0030      	movs	r0, r6
 8000286:	f000 fa89 	bl	800079c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800028a:	2201      	movs	r2, #1
 800028c:	2106      	movs	r1, #6
 800028e:	0030      	movs	r0, r6
 8000290:	f000 fa84 	bl	800079c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000294:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	2701      	movs	r7, #1
 8000298:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2500      	movs	r5, #0
 800029c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002a0:	0021      	movs	r1, r4
 80002a2:	4640      	mov	r0, r8
 80002a4:	f000 f9ae 	bl	8000604 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80002a8:	2307      	movs	r3, #7
 80002aa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ac:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ae:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b0:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b2:	0021      	movs	r1, r4
 80002b4:	0030      	movs	r0, r6
 80002b6:	f000 f9a5 	bl	8000604 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	005b      	lsls	r3, r3, #1
 80002be:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002c0:	3bfe      	subs	r3, #254	@ 0xfe
 80002c2:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c6:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80002c8:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ca:	2090      	movs	r0, #144	@ 0x90
 80002cc:	0021      	movs	r1, r4
 80002ce:	05c0      	lsls	r0, r0, #23
 80002d0:	f000 f998 	bl	8000604 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002d4:	b008      	add	sp, #32
 80002d6:	bc80      	pop	{r7}
 80002d8:	46b8      	mov	r8, r7
 80002da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002dc:	40021000 	.word	0x40021000
 80002e0:	48000800 	.word	0x48000800
 80002e4:	48000400 	.word	0x48000400

080002e8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ea:	e7fe      	b.n	80002ea <Error_Handler+0x2>

080002ec <MX_SPI1_Init>:
{
 80002ec:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80002ee:	4811      	ldr	r0, [pc, #68]	@ (8000334 <MX_SPI1_Init+0x48>)
 80002f0:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_SPI1_Init+0x4c>)
 80002f2:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002f4:	2382      	movs	r3, #130	@ 0x82
 80002f6:	005b      	lsls	r3, r3, #1
 80002f8:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002fa:	2300      	movs	r3, #0
 80002fc:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002fe:	22e0      	movs	r2, #224	@ 0xe0
 8000300:	00d2      	lsls	r2, r2, #3
 8000302:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000304:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000306:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000308:	2280      	movs	r2, #128	@ 0x80
 800030a:	0092      	lsls	r2, r2, #2
 800030c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800030e:	3af1      	subs	r2, #241	@ 0xf1
 8000310:	3aff      	subs	r2, #255	@ 0xff
 8000312:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000314:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000316:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000318:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800031a:	3a09      	subs	r2, #9
 800031c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800031e:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000320:	3308      	adds	r3, #8
 8000322:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000324:	f001 f864 	bl	80013f0 <HAL_SPI_Init>
 8000328:	2800      	cmp	r0, #0
 800032a:	d100      	bne.n	800032e <MX_SPI1_Init+0x42>
}
 800032c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800032e:	f7ff ffdb 	bl	80002e8 <Error_Handler>
 8000332:	46c0      	nop			@ (mov r8, r8)
 8000334:	20000114 	.word	0x20000114
 8000338:	40013000 	.word	0x40013000

0800033c <MX_SPI2_Init>:
{
 800033c:	b510      	push	{r4, lr}
  hspi2.Instance = SPI2;
 800033e:	4811      	ldr	r0, [pc, #68]	@ (8000384 <MX_SPI2_Init+0x48>)
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <MX_SPI2_Init+0x4c>)
 8000342:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000344:	2382      	movs	r3, #130	@ 0x82
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800034a:	2300      	movs	r3, #0
 800034c:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800034e:	22c0      	movs	r2, #192	@ 0xc0
 8000350:	0092      	lsls	r2, r2, #2
 8000352:	60c2      	str	r2, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000354:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000356:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000358:	3a01      	subs	r2, #1
 800035a:	3aff      	subs	r2, #255	@ 0xff
 800035c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800035e:	3af1      	subs	r2, #241	@ 0xf1
 8000360:	3aff      	subs	r2, #255	@ 0xff
 8000362:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000364:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000366:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000368:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 800036a:	3a09      	subs	r2, #9
 800036c:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800036e:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000370:	3308      	adds	r3, #8
 8000372:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000374:	f001 f83c 	bl	80013f0 <HAL_SPI_Init>
 8000378:	2800      	cmp	r0, #0
 800037a:	d100      	bne.n	800037e <MX_SPI2_Init+0x42>
}
 800037c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800037e:	f7ff ffb3 	bl	80002e8 <Error_Handler>
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	200000b0 	.word	0x200000b0
 8000388:	40003800 	.word	0x40003800

0800038c <MX_USART1_UART_Init>:
{
 800038c:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 800038e:	480b      	ldr	r0, [pc, #44]	@ (80003bc <MX_USART1_UART_Init+0x30>)
 8000390:	4b0b      	ldr	r3, [pc, #44]	@ (80003c0 <MX_USART1_UART_Init+0x34>)
 8000392:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 38400;
 8000394:	2396      	movs	r3, #150	@ 0x96
 8000396:	021b      	lsls	r3, r3, #8
 8000398:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800039a:	2300      	movs	r3, #0
 800039c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800039e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003a0:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003a2:	220c      	movs	r2, #12
 80003a4:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a6:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003aa:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ac:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ae:	f001 fbb7 	bl	8001b20 <HAL_UART_Init>
 80003b2:	2800      	cmp	r0, #0
 80003b4:	d100      	bne.n	80003b8 <MX_USART1_UART_Init+0x2c>
}
 80003b6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80003b8:	f7ff ff96 	bl	80002e8 <Error_Handler>
 80003bc:	20000028 	.word	0x20000028
 80003c0:	40013800 	.word	0x40013800

080003c4 <SystemClock_Config>:
{
 80003c4:	b510      	push	{r4, lr}
 80003c6:	b098      	sub	sp, #96	@ 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003c8:	ac0b      	add	r4, sp, #44	@ 0x2c
 80003ca:	2234      	movs	r2, #52	@ 0x34
 80003cc:	2100      	movs	r1, #0
 80003ce:	0020      	movs	r0, r4
 80003d0:	f001 fc0f 	bl	8001bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003d4:	2210      	movs	r2, #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	a807      	add	r0, sp, #28
 80003da:	f001 fc0a 	bl	8001bf2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003de:	221c      	movs	r2, #28
 80003e0:	2100      	movs	r1, #0
 80003e2:	4668      	mov	r0, sp
 80003e4:	f001 fc05 	bl	8001bf2 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80003e8:	2320      	movs	r3, #32
 80003ea:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003ec:	3b1f      	subs	r3, #31
 80003ee:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003f0:	0020      	movs	r0, r4
 80003f2:	f000 fa8d 	bl	8000910 <HAL_RCC_OscConfig>
 80003f6:	2800      	cmp	r0, #0
 80003f8:	d117      	bne.n	800042a <SystemClock_Config+0x66>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fa:	a807      	add	r0, sp, #28
 80003fc:	2307      	movs	r3, #7
 80003fe:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000400:	3b04      	subs	r3, #4
 8000402:	6043      	str	r3, [r0, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	6083      	str	r3, [r0, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000408:	60c3      	str	r3, [r0, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800040a:	2101      	movs	r1, #1
 800040c:	f000 fd5e 	bl	8000ecc <HAL_RCC_ClockConfig>
 8000410:	2800      	cmp	r0, #0
 8000412:	d10c      	bne.n	800042e <SystemClock_Config+0x6a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000414:	4668      	mov	r0, sp
 8000416:	2301      	movs	r3, #1
 8000418:	9300      	str	r3, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800041a:	2300      	movs	r3, #0
 800041c:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800041e:	f000 fe0d 	bl	800103c <HAL_RCCEx_PeriphCLKConfig>
 8000422:	2800      	cmp	r0, #0
 8000424:	d105      	bne.n	8000432 <SystemClock_Config+0x6e>
}
 8000426:	b018      	add	sp, #96	@ 0x60
 8000428:	bd10      	pop	{r4, pc}
    Error_Handler();
 800042a:	f7ff ff5d 	bl	80002e8 <Error_Handler>
    Error_Handler();
 800042e:	f7ff ff5b 	bl	80002e8 <Error_Handler>
    Error_Handler();
 8000432:	f7ff ff59 	bl	80002e8 <Error_Handler>
	...

08000438 <main>:
{
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	b083      	sub	sp, #12
  HAL_Init();
 800043c:	f000 f85a 	bl	80004f4 <HAL_Init>
  SystemClock_Config();
 8000440:	f7ff ffc0 	bl	80003c4 <SystemClock_Config>
  MX_GPIO_Init();
 8000444:	f7ff feec 	bl	8000220 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000448:	f7ff ff50 	bl	80002ec <MX_SPI1_Init>
  MX_SPI2_Init();
 800044c:	f7ff ff76 	bl	800033c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000450:	f7ff ff9c 	bl	800038c <MX_USART1_UART_Init>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000454:	2180      	movs	r1, #128	@ 0x80
 8000456:	2201      	movs	r2, #1
 8000458:	0189      	lsls	r1, r1, #6
 800045a:	480f      	ldr	r0, [pc, #60]	@ (8000498 <main+0x60>)
 800045c:	f000 f99e 	bl	800079c <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000460:	20fa      	movs	r0, #250	@ 0xfa
 8000462:	0040      	lsls	r0, r0, #1
 8000464:	f000 f868 	bl	8000538 <HAL_Delay>
     uint8_t first_cmd = 0x40;
 8000468:	466b      	mov	r3, sp
 800046a:	1ddd      	adds	r5, r3, #7
 800046c:	2340      	movs	r3, #64	@ 0x40
 800046e:	702b      	strb	r3, [r5, #0]
     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000470:	4c0a      	ldr	r4, [pc, #40]	@ (800049c <main+0x64>)
 8000472:	2200      	movs	r2, #0
 8000474:	2101      	movs	r1, #1
 8000476:	0020      	movs	r0, r4
 8000478:	f000 f990 	bl	800079c <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi2, &first_cmd, 1, HAL_MAX_DELAY);
 800047c:	2301      	movs	r3, #1
 800047e:	4808      	ldr	r0, [pc, #32]	@ (80004a0 <main+0x68>)
 8000480:	425b      	negs	r3, r3
 8000482:	2201      	movs	r2, #1
 8000484:	0029      	movs	r1, r5
 8000486:	f001 f835 	bl	80014f4 <HAL_SPI_Transmit>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2101      	movs	r1, #1
 800048e:	0020      	movs	r0, r4
 8000490:	f000 f984 	bl	800079c <HAL_GPIO_WritePin>
  while (1)
 8000494:	e7fe      	b.n	8000494 <main+0x5c>
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	48000800 	.word	0x48000800
 800049c:	48000400 	.word	0x48000400
 80004a0:	200000b0 	.word	0x200000b0

080004a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a4:	b510      	push	{r4, lr}
 80004a6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004a8:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <HAL_InitTick+0x44>)
 80004aa:	7819      	ldrb	r1, [r3, #0]
 80004ac:	20fa      	movs	r0, #250	@ 0xfa
 80004ae:	0080      	lsls	r0, r0, #2
 80004b0:	f7ff fe06 	bl	80000c0 <__udivsi3>
 80004b4:	0001      	movs	r1, r0
 80004b6:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <HAL_InitTick+0x48>)
 80004b8:	6818      	ldr	r0, [r3, #0]
 80004ba:	f7ff fe01 	bl	80000c0 <__udivsi3>
 80004be:	f000 f89d 	bl	80005fc <HAL_SYSTICK_Config>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d10d      	bne.n	80004e2 <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004c6:	2c03      	cmp	r4, #3
 80004c8:	d901      	bls.n	80004ce <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80004ca:	2001      	movs	r0, #1
 80004cc:	e00a      	b.n	80004e4 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ce:	3001      	adds	r0, #1
 80004d0:	2200      	movs	r2, #0
 80004d2:	0021      	movs	r1, r4
 80004d4:	4240      	negs	r0, r0
 80004d6:	f000 f88d 	bl	80005f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004da:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <HAL_InitTick+0x4c>)
 80004dc:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 80004de:	2000      	movs	r0, #0
 80004e0:	e000      	b.n	80004e4 <HAL_InitTick+0x40>
    return HAL_ERROR;
 80004e2:	2001      	movs	r0, #1
}
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	20000000 	.word	0x20000000
 80004ec:	20000008 	.word	0x20000008
 80004f0:	20000004 	.word	0x20000004

080004f4 <HAL_Init>:
{
 80004f4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f6:	4a06      	ldr	r2, [pc, #24]	@ (8000510 <HAL_Init+0x1c>)
 80004f8:	6813      	ldr	r3, [r2, #0]
 80004fa:	2110      	movs	r1, #16
 80004fc:	430b      	orrs	r3, r1
 80004fe:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000500:	2003      	movs	r0, #3
 8000502:	f7ff ffcf 	bl	80004a4 <HAL_InitTick>
  HAL_MspInit();
 8000506:	f000 f94f 	bl	80007a8 <HAL_MspInit>
}
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	40022000 	.word	0x40022000

08000514 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	@ (8000524 <HAL_IncTick+0x10>)
 8000516:	6811      	ldr	r1, [r2, #0]
 8000518:	4b03      	ldr	r3, [pc, #12]	@ (8000528 <HAL_IncTick+0x14>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	185b      	adds	r3, r3, r1
 800051e:	6013      	str	r3, [r2, #0]
}
 8000520:	4770      	bx	lr
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	20000178 	.word	0x20000178
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	@ (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	20000178 	.word	0x20000178

08000538 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800053c:	f7ff fff6 	bl	800052c <HAL_GetTick>
 8000540:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000542:	1c63      	adds	r3, r4, #1
 8000544:	d002      	beq.n	800054c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000546:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <HAL_Delay+0x20>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800054c:	f7ff ffee 	bl	800052c <HAL_GetTick>
 8000550:	1b40      	subs	r0, r0, r5
 8000552:	42a0      	cmp	r0, r4
 8000554:	d3fa      	bcc.n	800054c <HAL_Delay+0x14>
  {
  }
}
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	20000000 	.word	0x20000000

0800055c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800055c:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800055e:	2800      	cmp	r0, #0
 8000560:	db11      	blt.n	8000586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000562:	0883      	lsrs	r3, r0, #2
 8000564:	4d13      	ldr	r5, [pc, #76]	@ (80005b4 <__NVIC_SetPriority+0x58>)
 8000566:	33c0      	adds	r3, #192	@ 0xc0
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	595c      	ldr	r4, [r3, r5]
 800056c:	2203      	movs	r2, #3
 800056e:	4010      	ands	r0, r2
 8000570:	00c0      	lsls	r0, r0, #3
 8000572:	32fc      	adds	r2, #252	@ 0xfc
 8000574:	0016      	movs	r6, r2
 8000576:	4086      	lsls	r6, r0
 8000578:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800057a:	0189      	lsls	r1, r1, #6
 800057c:	400a      	ands	r2, r1
 800057e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000580:	4322      	orrs	r2, r4
 8000582:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000584:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000586:	230f      	movs	r3, #15
 8000588:	4003      	ands	r3, r0
 800058a:	3b08      	subs	r3, #8
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	3306      	adds	r3, #6
 8000590:	009b      	lsls	r3, r3, #2
 8000592:	4a09      	ldr	r2, [pc, #36]	@ (80005b8 <__NVIC_SetPriority+0x5c>)
 8000594:	4694      	mov	ip, r2
 8000596:	4463      	add	r3, ip
 8000598:	685c      	ldr	r4, [r3, #4]
 800059a:	2203      	movs	r2, #3
 800059c:	4010      	ands	r0, r2
 800059e:	00c0      	lsls	r0, r0, #3
 80005a0:	32fc      	adds	r2, #252	@ 0xfc
 80005a2:	0015      	movs	r5, r2
 80005a4:	4085      	lsls	r5, r0
 80005a6:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005a8:	0189      	lsls	r1, r1, #6
 80005aa:	400a      	ands	r2, r1
 80005ac:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ae:	4322      	orrs	r2, r4
 80005b0:	605a      	str	r2, [r3, #4]
}
 80005b2:	e7e7      	b.n	8000584 <__NVIC_SetPriority+0x28>
 80005b4:	e000e100 	.word	0xe000e100
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005bc:	3801      	subs	r0, #1
 80005be:	2380      	movs	r3, #128	@ 0x80
 80005c0:	045b      	lsls	r3, r3, #17
 80005c2:	4298      	cmp	r0, r3
 80005c4:	d20f      	bcs.n	80005e6 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005c6:	4a09      	ldr	r2, [pc, #36]	@ (80005ec <SysTick_Config+0x30>)
 80005c8:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005ca:	4809      	ldr	r0, [pc, #36]	@ (80005f0 <SysTick_Config+0x34>)
 80005cc:	6a03      	ldr	r3, [r0, #32]
 80005ce:	021b      	lsls	r3, r3, #8
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	21c0      	movs	r1, #192	@ 0xc0
 80005d4:	0609      	lsls	r1, r1, #24
 80005d6:	430b      	orrs	r3, r1
 80005d8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005da:	2300      	movs	r3, #0
 80005dc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005de:	3307      	adds	r3, #7
 80005e0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005e2:	2000      	movs	r0, #0
}
 80005e4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005e6:	2001      	movs	r0, #1
 80005e8:	e7fc      	b.n	80005e4 <SysTick_Config+0x28>
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	e000e010 	.word	0xe000e010
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f4:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80005f6:	f7ff ffb1 	bl	800055c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80005fa:	bd10      	pop	{r4, pc}

080005fc <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005fc:	b510      	push	{r4, lr}
   return SysTick_Config(TicksNumb);
 80005fe:	f7ff ffdd 	bl	80005bc <SysTick_Config>
}
 8000602:	bd10      	pop	{r4, pc}

08000604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000606:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 8000608:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800060a:	e056      	b.n	80006ba <HAL_GPIO_Init+0xb6>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800060c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800060e:	005f      	lsls	r7, r3, #1
 8000610:	2403      	movs	r4, #3
 8000612:	40bc      	lsls	r4, r7
 8000614:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000616:	68cc      	ldr	r4, [r1, #12]
 8000618:	40bc      	lsls	r4, r7
 800061a:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 800061c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800061e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000620:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000622:	684e      	ldr	r6, [r1, #4]
 8000624:	0936      	lsrs	r6, r6, #4
 8000626:	2201      	movs	r2, #1
 8000628:	4032      	ands	r2, r6
 800062a:	409a      	lsls	r2, r3
 800062c:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800062e:	6042      	str	r2, [r0, #4]
 8000630:	e053      	b.n	80006da <HAL_GPIO_Init+0xd6>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000632:	08de      	lsrs	r6, r3, #3
 8000634:	3608      	adds	r6, #8
 8000636:	00b6      	lsls	r6, r6, #2
 8000638:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800063a:	3205      	adds	r2, #5
 800063c:	401a      	ands	r2, r3
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	240f      	movs	r4, #15
 8000642:	4094      	lsls	r4, r2
 8000644:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000646:	690c      	ldr	r4, [r1, #16]
 8000648:	4094      	lsls	r4, r2
 800064a:	0022      	movs	r2, r4
 800064c:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 800064e:	5032      	str	r2, [r6, r0]
 8000650:	e056      	b.n	8000700 <HAL_GPIO_Init+0xfc>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000652:	2604      	movs	r6, #4
 8000654:	e000      	b.n	8000658 <HAL_GPIO_Init+0x54>
 8000656:	2600      	movs	r6, #0
 8000658:	40a6      	lsls	r6, r4
 800065a:	0034      	movs	r4, r6
 800065c:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800065e:	3202      	adds	r2, #2
 8000660:	0092      	lsls	r2, r2, #2
 8000662:	4e47      	ldr	r6, [pc, #284]	@ (8000780 <HAL_GPIO_Init+0x17c>)
 8000664:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000666:	4a47      	ldr	r2, [pc, #284]	@ (8000784 <HAL_GPIO_Init+0x180>)
 8000668:	6897      	ldr	r7, [r2, #8]
        temp &= ~(iocurrent);
 800066a:	43ea      	mvns	r2, r5
 800066c:	003e      	movs	r6, r7
 800066e:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000670:	684c      	ldr	r4, [r1, #4]
 8000672:	02e4      	lsls	r4, r4, #11
 8000674:	d501      	bpl.n	800067a <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000676:	003e      	movs	r6, r7
 8000678:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 800067a:	4c42      	ldr	r4, [pc, #264]	@ (8000784 <HAL_GPIO_Init+0x180>)
 800067c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800067e:	68e7      	ldr	r7, [r4, #12]
        temp &= ~(iocurrent);
 8000680:	003e      	movs	r6, r7
 8000682:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000684:	684c      	ldr	r4, [r1, #4]
 8000686:	02a4      	lsls	r4, r4, #10
 8000688:	d501      	bpl.n	800068e <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 800068a:	003e      	movs	r6, r7
 800068c:	432e      	orrs	r6, r5
        }
        EXTI->FTSR = temp;
 800068e:	4c3d      	ldr	r4, [pc, #244]	@ (8000784 <HAL_GPIO_Init+0x180>)
 8000690:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000692:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8000694:	003e      	movs	r6, r7
 8000696:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000698:	684c      	ldr	r4, [r1, #4]
 800069a:	03a4      	lsls	r4, r4, #14
 800069c:	d501      	bpl.n	80006a2 <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800069e:	003e      	movs	r6, r7
 80006a0:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 80006a2:	4c38      	ldr	r4, [pc, #224]	@ (8000784 <HAL_GPIO_Init+0x180>)
 80006a4:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 80006a6:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 80006a8:	4032      	ands	r2, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80006aa:	684c      	ldr	r4, [r1, #4]
 80006ac:	03e4      	lsls	r4, r4, #15
 80006ae:	d501      	bpl.n	80006b4 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 80006b0:	002a      	movs	r2, r5
 80006b2:	4332      	orrs	r2, r6
        }
        EXTI->IMR = temp;
 80006b4:	4c33      	ldr	r4, [pc, #204]	@ (8000784 <HAL_GPIO_Init+0x180>)
 80006b6:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 80006b8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006ba:	680c      	ldr	r4, [r1, #0]
 80006bc:	0022      	movs	r2, r4
 80006be:	40da      	lsrs	r2, r3
 80006c0:	d05b      	beq.n	800077a <HAL_GPIO_Init+0x176>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80006c2:	2201      	movs	r2, #1
 80006c4:	409a      	lsls	r2, r3
 80006c6:	0025      	movs	r5, r4
 80006c8:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 80006ca:	4214      	tst	r4, r2
 80006cc:	d0f4      	beq.n	80006b8 <HAL_GPIO_Init+0xb4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80006ce:	684e      	ldr	r6, [r1, #4]
 80006d0:	2403      	movs	r4, #3
 80006d2:	4034      	ands	r4, r6
 80006d4:	3c01      	subs	r4, #1
 80006d6:	2c01      	cmp	r4, #1
 80006d8:	d998      	bls.n	800060c <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006da:	684c      	ldr	r4, [r1, #4]
 80006dc:	2203      	movs	r2, #3
 80006de:	4022      	ands	r2, r4
 80006e0:	2a03      	cmp	r2, #3
 80006e2:	d008      	beq.n	80006f6 <HAL_GPIO_Init+0xf2>
        temp = GPIOx->PUPDR;
 80006e4:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80006e6:	005e      	lsls	r6, r3, #1
 80006e8:	2203      	movs	r2, #3
 80006ea:	40b2      	lsls	r2, r6
 80006ec:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006ee:	688a      	ldr	r2, [r1, #8]
 80006f0:	40b2      	lsls	r2, r6
 80006f2:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80006f4:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006f6:	684c      	ldr	r4, [r1, #4]
 80006f8:	2203      	movs	r2, #3
 80006fa:	4022      	ands	r2, r4
 80006fc:	2a02      	cmp	r2, #2
 80006fe:	d098      	beq.n	8000632 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8000700:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000702:	005e      	lsls	r6, r3, #1
 8000704:	2203      	movs	r2, #3
 8000706:	0017      	movs	r7, r2
 8000708:	40b7      	lsls	r7, r6
 800070a:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800070c:	684f      	ldr	r7, [r1, #4]
 800070e:	403a      	ands	r2, r7
 8000710:	40b2      	lsls	r2, r6
 8000712:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000714:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000716:	684c      	ldr	r4, [r1, #4]
 8000718:	22c0      	movs	r2, #192	@ 0xc0
 800071a:	0292      	lsls	r2, r2, #10
 800071c:	4214      	tst	r4, r2
 800071e:	d0cb      	beq.n	80006b8 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000720:	4c19      	ldr	r4, [pc, #100]	@ (8000788 <HAL_GPIO_Init+0x184>)
 8000722:	69a6      	ldr	r6, [r4, #24]
 8000724:	2201      	movs	r2, #1
 8000726:	4316      	orrs	r6, r2
 8000728:	61a6      	str	r6, [r4, #24]
 800072a:	69a4      	ldr	r4, [r4, #24]
 800072c:	4022      	ands	r2, r4
 800072e:	9201      	str	r2, [sp, #4]
 8000730:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000732:	089a      	lsrs	r2, r3, #2
 8000734:	1c94      	adds	r4, r2, #2
 8000736:	00a4      	lsls	r4, r4, #2
 8000738:	4e11      	ldr	r6, [pc, #68]	@ (8000780 <HAL_GPIO_Init+0x17c>)
 800073a:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800073c:	2403      	movs	r4, #3
 800073e:	401c      	ands	r4, r3
 8000740:	00a4      	lsls	r4, r4, #2
 8000742:	260f      	movs	r6, #15
 8000744:	40a6      	lsls	r6, r4
 8000746:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000748:	2690      	movs	r6, #144	@ 0x90
 800074a:	05f6      	lsls	r6, r6, #23
 800074c:	42b0      	cmp	r0, r6
 800074e:	d082      	beq.n	8000656 <HAL_GPIO_Init+0x52>
 8000750:	4e0e      	ldr	r6, [pc, #56]	@ (800078c <HAL_GPIO_Init+0x188>)
 8000752:	42b0      	cmp	r0, r6
 8000754:	d00b      	beq.n	800076e <HAL_GPIO_Init+0x16a>
 8000756:	4e0e      	ldr	r6, [pc, #56]	@ (8000790 <HAL_GPIO_Init+0x18c>)
 8000758:	42b0      	cmp	r0, r6
 800075a:	d00a      	beq.n	8000772 <HAL_GPIO_Init+0x16e>
 800075c:	4e0d      	ldr	r6, [pc, #52]	@ (8000794 <HAL_GPIO_Init+0x190>)
 800075e:	42b0      	cmp	r0, r6
 8000760:	d009      	beq.n	8000776 <HAL_GPIO_Init+0x172>
 8000762:	4e0d      	ldr	r6, [pc, #52]	@ (8000798 <HAL_GPIO_Init+0x194>)
 8000764:	42b0      	cmp	r0, r6
 8000766:	d100      	bne.n	800076a <HAL_GPIO_Init+0x166>
 8000768:	e773      	b.n	8000652 <HAL_GPIO_Init+0x4e>
 800076a:	2605      	movs	r6, #5
 800076c:	e774      	b.n	8000658 <HAL_GPIO_Init+0x54>
 800076e:	2601      	movs	r6, #1
 8000770:	e772      	b.n	8000658 <HAL_GPIO_Init+0x54>
 8000772:	2602      	movs	r6, #2
 8000774:	e770      	b.n	8000658 <HAL_GPIO_Init+0x54>
 8000776:	2603      	movs	r6, #3
 8000778:	e76e      	b.n	8000658 <HAL_GPIO_Init+0x54>
  } 
}
 800077a:	b003      	add	sp, #12
 800077c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	40010000 	.word	0x40010000
 8000784:	40010400 	.word	0x40010400
 8000788:	40021000 	.word	0x40021000
 800078c:	48000400 	.word	0x48000400
 8000790:	48000800 	.word	0x48000800
 8000794:	48000c00 	.word	0x48000c00
 8000798:	48001000 	.word	0x48001000

0800079c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800079c:	2a00      	cmp	r2, #0
 800079e:	d001      	beq.n	80007a4 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007a0:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007a2:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007a4:	6281      	str	r1, [r0, #40]	@ 0x28
}
 80007a6:	e7fc      	b.n	80007a2 <HAL_GPIO_WritePin+0x6>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0a      	ldr	r3, [pc, #40]	@ (80007d4 <HAL_MspInit+0x2c>)
 80007ac:	6999      	ldr	r1, [r3, #24]
 80007ae:	2201      	movs	r2, #1
 80007b0:	4311      	orrs	r1, r2
 80007b2:	6199      	str	r1, [r3, #24]
 80007b4:	6999      	ldr	r1, [r3, #24]
 80007b6:	400a      	ands	r2, r1
 80007b8:	9200      	str	r2, [sp, #0]
 80007ba:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007bc:	69da      	ldr	r2, [r3, #28]
 80007be:	2180      	movs	r1, #128	@ 0x80
 80007c0:	0549      	lsls	r1, r1, #21
 80007c2:	430a      	orrs	r2, r1
 80007c4:	61da      	str	r2, [r3, #28]
 80007c6:	69db      	ldr	r3, [r3, #28]
 80007c8:	400b      	ands	r3, r1
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ce:	b002      	add	sp, #8
 80007d0:	4770      	bx	lr
 80007d2:	46c0      	nop			@ (mov r8, r8)
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007da:	b08b      	sub	sp, #44	@ 0x2c
 80007dc:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	2214      	movs	r2, #20
 80007e0:	2100      	movs	r1, #0
 80007e2:	a805      	add	r0, sp, #20
 80007e4:	f001 fa05 	bl	8001bf2 <memset>
  if(hspi->Instance==SPI1)
 80007e8:	6823      	ldr	r3, [r4, #0]
 80007ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000898 <HAL_SPI_MspInit+0xc0>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d004      	beq.n	80007fa <HAL_SPI_MspInit+0x22>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(hspi->Instance==SPI2)
 80007f0:	4a2a      	ldr	r2, [pc, #168]	@ (800089c <HAL_SPI_MspInit+0xc4>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d020      	beq.n	8000838 <HAL_SPI_MspInit+0x60>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80007f6:	b00b      	add	sp, #44	@ 0x2c
 80007f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007fa:	4b29      	ldr	r3, [pc, #164]	@ (80008a0 <HAL_SPI_MspInit+0xc8>)
 80007fc:	699a      	ldr	r2, [r3, #24]
 80007fe:	2180      	movs	r1, #128	@ 0x80
 8000800:	0149      	lsls	r1, r1, #5
 8000802:	430a      	orrs	r2, r1
 8000804:	619a      	str	r2, [r3, #24]
 8000806:	699a      	ldr	r2, [r3, #24]
 8000808:	400a      	ands	r2, r1
 800080a:	9201      	str	r2, [sp, #4]
 800080c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	695a      	ldr	r2, [r3, #20]
 8000810:	2180      	movs	r1, #128	@ 0x80
 8000812:	0289      	lsls	r1, r1, #10
 8000814:	430a      	orrs	r2, r1
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	400b      	ands	r3, r1
 800081c:	9302      	str	r3, [sp, #8]
 800081e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000820:	a905      	add	r1, sp, #20
 8000822:	23e0      	movs	r3, #224	@ 0xe0
 8000824:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	3bde      	subs	r3, #222	@ 0xde
 8000828:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800082a:	3301      	adds	r3, #1
 800082c:	60cb      	str	r3, [r1, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	2090      	movs	r0, #144	@ 0x90
 8000830:	05c0      	lsls	r0, r0, #23
 8000832:	f7ff fee7 	bl	8000604 <HAL_GPIO_Init>
 8000836:	e7de      	b.n	80007f6 <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_SPI_MspInit+0xc8>)
 800083a:	69da      	ldr	r2, [r3, #28]
 800083c:	2180      	movs	r1, #128	@ 0x80
 800083e:	01c9      	lsls	r1, r1, #7
 8000840:	430a      	orrs	r2, r1
 8000842:	61da      	str	r2, [r3, #28]
 8000844:	69da      	ldr	r2, [r3, #28]
 8000846:	400a      	ands	r2, r1
 8000848:	9203      	str	r2, [sp, #12]
 800084a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084c:	695a      	ldr	r2, [r3, #20]
 800084e:	2180      	movs	r1, #128	@ 0x80
 8000850:	02c9      	lsls	r1, r1, #11
 8000852:	430a      	orrs	r2, r1
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	400b      	ands	r3, r1
 800085a:	9304      	str	r3, [sp, #16]
 800085c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800085e:	ac05      	add	r4, sp, #20
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2702      	movs	r7, #2
 8000868:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2603      	movs	r6, #3
 800086c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800086e:	2305      	movs	r3, #5
 8000870:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000872:	4d0c      	ldr	r5, [pc, #48]	@ (80008a4 <HAL_SPI_MspInit+0xcc>)
 8000874:	0021      	movs	r1, r4
 8000876:	0028      	movs	r0, r5
 8000878:	f7ff fec4 	bl	8000604 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800087c:	23c0      	movs	r3, #192	@ 0xc0
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000888:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800088a:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	0021      	movs	r1, r4
 800088e:	0028      	movs	r0, r5
 8000890:	f7ff feb8 	bl	8000604 <HAL_GPIO_Init>
}
 8000894:	e7af      	b.n	80007f6 <HAL_SPI_MspInit+0x1e>
 8000896:	46c0      	nop			@ (mov r8, r8)
 8000898:	40013000 	.word	0x40013000
 800089c:	40003800 	.word	0x40003800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400

080008a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008a8:	b510      	push	{r4, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	2214      	movs	r2, #20
 80008b0:	2100      	movs	r1, #0
 80008b2:	a803      	add	r0, sp, #12
 80008b4:	f001 f99d 	bl	8001bf2 <memset>
  if(huart->Instance==USART1)
 80008b8:	6822      	ldr	r2, [r4, #0]
 80008ba:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <HAL_UART_MspInit+0x60>)
 80008bc:	429a      	cmp	r2, r3
 80008be:	d001      	beq.n	80008c4 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80008c0:	b008      	add	sp, #32
 80008c2:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80008c4:	4b11      	ldr	r3, [pc, #68]	@ (800090c <HAL_UART_MspInit+0x64>)
 80008c6:	699a      	ldr	r2, [r3, #24]
 80008c8:	2180      	movs	r1, #128	@ 0x80
 80008ca:	01c9      	lsls	r1, r1, #7
 80008cc:	430a      	orrs	r2, r1
 80008ce:	619a      	str	r2, [r3, #24]
 80008d0:	699a      	ldr	r2, [r3, #24]
 80008d2:	400a      	ands	r2, r1
 80008d4:	9201      	str	r2, [sp, #4]
 80008d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	2180      	movs	r1, #128	@ 0x80
 80008dc:	0289      	lsls	r1, r1, #10
 80008de:	430a      	orrs	r2, r1
 80008e0:	615a      	str	r2, [r3, #20]
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	400b      	ands	r3, r1
 80008e6:	9302      	str	r3, [sp, #8]
 80008e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008ea:	a903      	add	r1, sp, #12
 80008ec:	23c0      	movs	r3, #192	@ 0xc0
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f6:	3301      	adds	r3, #1
 80008f8:	60cb      	str	r3, [r1, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80008fa:	3b02      	subs	r3, #2
 80008fc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	2090      	movs	r0, #144	@ 0x90
 8000900:	05c0      	lsls	r0, r0, #23
 8000902:	f7ff fe7f 	bl	8000604 <HAL_GPIO_Init>
}
 8000906:	e7db      	b.n	80008c0 <HAL_UART_MspInit+0x18>
 8000908:	40013800 	.word	0x40013800
 800090c:	40021000 	.word	0x40021000

08000910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000916:	d100      	bne.n	800091a <HAL_RCC_OscConfig+0xa>
 8000918:	e27f      	b.n	8000e1a <HAL_RCC_OscConfig+0x50a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800091a:	6803      	ldr	r3, [r0, #0]
 800091c:	07db      	lsls	r3, r3, #31
 800091e:	d52b      	bpl.n	8000978 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000920:	4bb3      	ldr	r3, [pc, #716]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	230c      	movs	r3, #12
 8000926:	4013      	ands	r3, r2
 8000928:	2b04      	cmp	r3, #4
 800092a:	d01d      	beq.n	8000968 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800092c:	4bb0      	ldr	r3, [pc, #704]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	230c      	movs	r3, #12
 8000932:	4013      	ands	r3, r2
 8000934:	2b08      	cmp	r3, #8
 8000936:	d00e      	beq.n	8000956 <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000938:	6863      	ldr	r3, [r4, #4]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d041      	beq.n	80009c2 <HAL_RCC_OscConfig+0xb2>
 800093e:	2b00      	cmp	r3, #0
 8000940:	d156      	bne.n	80009f0 <HAL_RCC_OscConfig+0xe0>
 8000942:	4bab      	ldr	r3, [pc, #684]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	49ab      	ldr	r1, [pc, #684]	@ (8000bf4 <HAL_RCC_OscConfig+0x2e4>)
 8000948:	400a      	ands	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	49aa      	ldr	r1, [pc, #680]	@ (8000bf8 <HAL_RCC_OscConfig+0x2e8>)
 8000950:	400a      	ands	r2, r1
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	e03b      	b.n	80009ce <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000956:	4ba6      	ldr	r3, [pc, #664]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	22c0      	movs	r2, #192	@ 0xc0
 800095c:	0252      	lsls	r2, r2, #9
 800095e:	4013      	ands	r3, r2
 8000960:	2280      	movs	r2, #128	@ 0x80
 8000962:	0252      	lsls	r2, r2, #9
 8000964:	4293      	cmp	r3, r2
 8000966:	d1e7      	bne.n	8000938 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000968:	4ba1      	ldr	r3, [pc, #644]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	039b      	lsls	r3, r3, #14
 800096e:	d503      	bpl.n	8000978 <HAL_RCC_OscConfig+0x68>
 8000970:	6863      	ldr	r3, [r4, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d100      	bne.n	8000978 <HAL_RCC_OscConfig+0x68>
 8000976:	e253      	b.n	8000e20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000978:	6823      	ldr	r3, [r4, #0]
 800097a:	079b      	lsls	r3, r3, #30
 800097c:	d577      	bpl.n	8000a6e <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800097e:	4b9c      	ldr	r3, [pc, #624]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	220c      	movs	r2, #12
 8000984:	421a      	tst	r2, r3
 8000986:	d062      	beq.n	8000a4e <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000988:	4b99      	ldr	r3, [pc, #612]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	230c      	movs	r3, #12
 800098e:	4013      	ands	r3, r2
 8000990:	2b08      	cmp	r3, #8
 8000992:	d053      	beq.n	8000a3c <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000994:	68e3      	ldr	r3, [r4, #12]
 8000996:	2b00      	cmp	r3, #0
 8000998:	d100      	bne.n	800099c <HAL_RCC_OscConfig+0x8c>
 800099a:	e08a      	b.n	8000ab2 <HAL_RCC_OscConfig+0x1a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800099c:	4a94      	ldr	r2, [pc, #592]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 800099e:	6813      	ldr	r3, [r2, #0]
 80009a0:	2101      	movs	r1, #1
 80009a2:	430b      	orrs	r3, r1
 80009a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009a6:	f7ff fdc1 	bl	800052c <HAL_GetTick>
 80009aa:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009ac:	4b90      	ldr	r3, [pc, #576]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	079b      	lsls	r3, r3, #30
 80009b2:	d475      	bmi.n	8000aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009b4:	f7ff fdba 	bl	800052c <HAL_GetTick>
 80009b8:	1b40      	subs	r0, r0, r5
 80009ba:	2802      	cmp	r0, #2
 80009bc:	d9f6      	bls.n	80009ac <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 80009be:	2003      	movs	r0, #3
 80009c0:	e22c      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009c2:	4a8b      	ldr	r2, [pc, #556]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 80009c4:	6811      	ldr	r1, [r2, #0]
 80009c6:	2380      	movs	r3, #128	@ 0x80
 80009c8:	025b      	lsls	r3, r3, #9
 80009ca:	430b      	orrs	r3, r1
 80009cc:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009ce:	6863      	ldr	r3, [r4, #4]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d025      	beq.n	8000a20 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80009d4:	f7ff fdaa 	bl	800052c <HAL_GetTick>
 80009d8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009da:	4b85      	ldr	r3, [pc, #532]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	039b      	lsls	r3, r3, #14
 80009e0:	d4ca      	bmi.n	8000978 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009e2:	f7ff fda3 	bl	800052c <HAL_GetTick>
 80009e6:	1b40      	subs	r0, r0, r5
 80009e8:	2864      	cmp	r0, #100	@ 0x64
 80009ea:	d9f6      	bls.n	80009da <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80009ec:	2003      	movs	r0, #3
 80009ee:	e215      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d009      	beq.n	8000a08 <HAL_RCC_OscConfig+0xf8>
 80009f4:	4b7e      	ldr	r3, [pc, #504]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	497e      	ldr	r1, [pc, #504]	@ (8000bf4 <HAL_RCC_OscConfig+0x2e4>)
 80009fa:	400a      	ands	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	497d      	ldr	r1, [pc, #500]	@ (8000bf8 <HAL_RCC_OscConfig+0x2e8>)
 8000a02:	400a      	ands	r2, r1
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	e7e2      	b.n	80009ce <HAL_RCC_OscConfig+0xbe>
 8000a08:	4b79      	ldr	r3, [pc, #484]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000a0a:	6819      	ldr	r1, [r3, #0]
 8000a0c:	2280      	movs	r2, #128	@ 0x80
 8000a0e:	02d2      	lsls	r2, r2, #11
 8000a10:	430a      	orrs	r2, r1
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	6819      	ldr	r1, [r3, #0]
 8000a16:	2280      	movs	r2, #128	@ 0x80
 8000a18:	0252      	lsls	r2, r2, #9
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	601a      	str	r2, [r3, #0]
 8000a1e:	e7d6      	b.n	80009ce <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8000a20:	f7ff fd84 	bl	800052c <HAL_GetTick>
 8000a24:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a26:	4b72      	ldr	r3, [pc, #456]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	039b      	lsls	r3, r3, #14
 8000a2c:	d5a4      	bpl.n	8000978 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a2e:	f7ff fd7d 	bl	800052c <HAL_GetTick>
 8000a32:	1b40      	subs	r0, r0, r5
 8000a34:	2864      	cmp	r0, #100	@ 0x64
 8000a36:	d9f6      	bls.n	8000a26 <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000a38:	2003      	movs	r0, #3
 8000a3a:	e1ef      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a3c:	4b6c      	ldr	r3, [pc, #432]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	22c0      	movs	r2, #192	@ 0xc0
 8000a42:	0252      	lsls	r2, r2, #9
 8000a44:	4013      	ands	r3, r2
 8000a46:	2280      	movs	r2, #128	@ 0x80
 8000a48:	0212      	lsls	r2, r2, #8
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d1a2      	bne.n	8000994 <HAL_RCC_OscConfig+0x84>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a4e:	4b68      	ldr	r3, [pc, #416]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	079b      	lsls	r3, r3, #30
 8000a54:	d503      	bpl.n	8000a5e <HAL_RCC_OscConfig+0x14e>
 8000a56:	68e3      	ldr	r3, [r4, #12]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d000      	beq.n	8000a5e <HAL_RCC_OscConfig+0x14e>
 8000a5c:	e1e2      	b.n	8000e24 <HAL_RCC_OscConfig+0x514>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a5e:	4964      	ldr	r1, [pc, #400]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000a60:	680b      	ldr	r3, [r1, #0]
 8000a62:	22f8      	movs	r2, #248	@ 0xf8
 8000a64:	4393      	bics	r3, r2
 8000a66:	6922      	ldr	r2, [r4, #16]
 8000a68:	00d2      	lsls	r2, r2, #3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	071b      	lsls	r3, r3, #28
 8000a72:	d544      	bpl.n	8000afe <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a74:	69e3      	ldr	r3, [r4, #28]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d02e      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a7a:	4a5d      	ldr	r2, [pc, #372]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000a7c:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000a7e:	2101      	movs	r1, #1
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a84:	f7ff fd52 	bl	800052c <HAL_GetTick>
 8000a88:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a8a:	4b59      	ldr	r3, [pc, #356]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a8e:	079b      	lsls	r3, r3, #30
 8000a90:	d435      	bmi.n	8000afe <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a92:	f7ff fd4b 	bl	800052c <HAL_GetTick>
 8000a96:	1b40      	subs	r0, r0, r5
 8000a98:	2802      	cmp	r0, #2
 8000a9a:	d9f6      	bls.n	8000a8a <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	e1bd      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aa0:	4953      	ldr	r1, [pc, #332]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000aa2:	680b      	ldr	r3, [r1, #0]
 8000aa4:	22f8      	movs	r2, #248	@ 0xf8
 8000aa6:	4393      	bics	r3, r2
 8000aa8:	6922      	ldr	r2, [r4, #16]
 8000aaa:	00d2      	lsls	r2, r2, #3
 8000aac:	4313      	orrs	r3, r2
 8000aae:	600b      	str	r3, [r1, #0]
 8000ab0:	e7dd      	b.n	8000a6e <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000ab2:	4a4f      	ldr	r2, [pc, #316]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000ab4:	6813      	ldr	r3, [r2, #0]
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	438b      	bics	r3, r1
 8000aba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000abc:	f7ff fd36 	bl	800052c <HAL_GetTick>
 8000ac0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ac2:	4b4b      	ldr	r3, [pc, #300]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	079b      	lsls	r3, r3, #30
 8000ac8:	d5d1      	bpl.n	8000a6e <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000aca:	f7ff fd2f 	bl	800052c <HAL_GetTick>
 8000ace:	1b40      	subs	r0, r0, r5
 8000ad0:	2802      	cmp	r0, #2
 8000ad2:	d9f6      	bls.n	8000ac2 <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 8000ad4:	2003      	movs	r0, #3
 8000ad6:	e1a1      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ad8:	4a45      	ldr	r2, [pc, #276]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000ada:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000adc:	2101      	movs	r1, #1
 8000ade:	438b      	bics	r3, r1
 8000ae0:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ae2:	f7ff fd23 	bl	800052c <HAL_GetTick>
 8000ae6:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ae8:	4b41      	ldr	r3, [pc, #260]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aec:	079b      	lsls	r3, r3, #30
 8000aee:	d506      	bpl.n	8000afe <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000af0:	f7ff fd1c 	bl	800052c <HAL_GetTick>
 8000af4:	1b40      	subs	r0, r0, r5
 8000af6:	2802      	cmp	r0, #2
 8000af8:	d9f6      	bls.n	8000ae8 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8000afa:	2003      	movs	r0, #3
 8000afc:	e18e      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	075b      	lsls	r3, r3, #29
 8000b02:	d400      	bmi.n	8000b06 <HAL_RCC_OscConfig+0x1f6>
 8000b04:	e080      	b.n	8000c08 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b06:	4b3a      	ldr	r3, [pc, #232]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	d41d      	bmi.n	8000b4a <HAL_RCC_OscConfig+0x23a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b38      	ldr	r3, [pc, #224]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000b10:	69da      	ldr	r2, [r3, #28]
 8000b12:	2180      	movs	r1, #128	@ 0x80
 8000b14:	0549      	lsls	r1, r1, #21
 8000b16:	430a      	orrs	r2, r1
 8000b18:	61da      	str	r2, [r3, #28]
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	400b      	ands	r3, r1
 8000b1e:	9301      	str	r3, [sp, #4]
 8000b20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000b22:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b24:	4b35      	ldr	r3, [pc, #212]	@ (8000bfc <HAL_RCC_OscConfig+0x2ec>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	05db      	lsls	r3, r3, #23
 8000b2a:	d510      	bpl.n	8000b4e <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b2c:	68a3      	ldr	r3, [r4, #8]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d021      	beq.n	8000b76 <HAL_RCC_OscConfig+0x266>
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d136      	bne.n	8000ba4 <HAL_RCC_OscConfig+0x294>
 8000b36:	4b2e      	ldr	r3, [pc, #184]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000b38:	6a1a      	ldr	r2, [r3, #32]
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	438a      	bics	r2, r1
 8000b3e:	621a      	str	r2, [r3, #32]
 8000b40:	6a1a      	ldr	r2, [r3, #32]
 8000b42:	3103      	adds	r1, #3
 8000b44:	438a      	bics	r2, r1
 8000b46:	621a      	str	r2, [r3, #32]
 8000b48:	e01a      	b.n	8000b80 <HAL_RCC_OscConfig+0x270>
    FlagStatus       pwrclkchanged = RESET;
 8000b4a:	2500      	movs	r5, #0
 8000b4c:	e7ea      	b.n	8000b24 <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8000bfc <HAL_RCC_OscConfig+0x2ec>)
 8000b50:	6811      	ldr	r1, [r2, #0]
 8000b52:	2380      	movs	r3, #128	@ 0x80
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	430b      	orrs	r3, r1
 8000b58:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000b5a:	f7ff fce7 	bl	800052c <HAL_GetTick>
 8000b5e:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b60:	4b26      	ldr	r3, [pc, #152]	@ (8000bfc <HAL_RCC_OscConfig+0x2ec>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	d4e1      	bmi.n	8000b2c <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b68:	f7ff fce0 	bl	800052c <HAL_GetTick>
 8000b6c:	1b80      	subs	r0, r0, r6
 8000b6e:	2864      	cmp	r0, #100	@ 0x64
 8000b70:	d9f6      	bls.n	8000b60 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8000b72:	2003      	movs	r0, #3
 8000b74:	e152      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b76:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000b78:	6a13      	ldr	r3, [r2, #32]
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000b80:	68a3      	ldr	r3, [r4, #8]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d024      	beq.n	8000bd0 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b86:	f7ff fcd1 	bl	800052c <HAL_GetTick>
 8000b8a:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b8c:	4b18      	ldr	r3, [pc, #96]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000b8e:	6a1b      	ldr	r3, [r3, #32]
 8000b90:	079b      	lsls	r3, r3, #30
 8000b92:	d437      	bmi.n	8000c04 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b94:	f7ff fcca 	bl	800052c <HAL_GetTick>
 8000b98:	1b80      	subs	r0, r0, r6
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_RCC_OscConfig+0x2f0>)
 8000b9c:	4298      	cmp	r0, r3
 8000b9e:	d9f5      	bls.n	8000b8c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8000ba0:	2003      	movs	r0, #3
 8000ba2:	e13b      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ba4:	2b05      	cmp	r3, #5
 8000ba6:	d009      	beq.n	8000bbc <HAL_RCC_OscConfig+0x2ac>
 8000ba8:	4b11      	ldr	r3, [pc, #68]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000baa:	6a1a      	ldr	r2, [r3, #32]
 8000bac:	2101      	movs	r1, #1
 8000bae:	438a      	bics	r2, r1
 8000bb0:	621a      	str	r2, [r3, #32]
 8000bb2:	6a1a      	ldr	r2, [r3, #32]
 8000bb4:	3103      	adds	r1, #3
 8000bb6:	438a      	bics	r2, r1
 8000bb8:	621a      	str	r2, [r3, #32]
 8000bba:	e7e1      	b.n	8000b80 <HAL_RCC_OscConfig+0x270>
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000bbe:	6a1a      	ldr	r2, [r3, #32]
 8000bc0:	2104      	movs	r1, #4
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	621a      	str	r2, [r3, #32]
 8000bc6:	6a1a      	ldr	r2, [r3, #32]
 8000bc8:	3903      	subs	r1, #3
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	621a      	str	r2, [r3, #32]
 8000bce:	e7d7      	b.n	8000b80 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bd0:	f7ff fcac 	bl	800052c <HAL_GetTick>
 8000bd4:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bd6:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_RCC_OscConfig+0x2e0>)
 8000bd8:	6a1b      	ldr	r3, [r3, #32]
 8000bda:	079b      	lsls	r3, r3, #30
 8000bdc:	d512      	bpl.n	8000c04 <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bde:	f7ff fca5 	bl	800052c <HAL_GetTick>
 8000be2:	1b80      	subs	r0, r0, r6
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <HAL_RCC_OscConfig+0x2f0>)
 8000be6:	4298      	cmp	r0, r3
 8000be8:	d9f5      	bls.n	8000bd6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8000bea:	2003      	movs	r0, #3
 8000bec:	e116      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	fffeffff 	.word	0xfffeffff
 8000bf8:	fffbffff 	.word	0xfffbffff
 8000bfc:	40007000 	.word	0x40007000
 8000c00:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c04:	2d01      	cmp	r5, #1
 8000c06:	d039      	beq.n	8000c7c <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000c08:	6823      	ldr	r3, [r4, #0]
 8000c0a:	06db      	lsls	r3, r3, #27
 8000c0c:	d510      	bpl.n	8000c30 <HAL_RCC_OscConfig+0x320>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000c0e:	6963      	ldr	r3, [r4, #20]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d039      	beq.n	8000c88 <HAL_RCC_OscConfig+0x378>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000c14:	3305      	adds	r3, #5
 8000c16:	d157      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x3b8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000c18:	4a89      	ldr	r2, [pc, #548]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000c1a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000c1c:	2104      	movs	r1, #4
 8000c1e:	438b      	bics	r3, r1
 8000c20:	6353      	str	r3, [r2, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000c22:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000c24:	31f4      	adds	r1, #244	@ 0xf4
 8000c26:	438b      	bics	r3, r1
 8000c28:	69a1      	ldr	r1, [r4, #24]
 8000c2a:	00c9      	lsls	r1, r1, #3
 8000c2c:	430b      	orrs	r3, r1
 8000c2e:	6353      	str	r3, [r2, #52]	@ 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	069b      	lsls	r3, r3, #26
 8000c34:	d56e      	bpl.n	8000d14 <HAL_RCC_OscConfig+0x404>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000c36:	4b82      	ldr	r3, [pc, #520]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	230c      	movs	r3, #12
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	2b0c      	cmp	r3, #12
 8000c40:	d060      	beq.n	8000d04 <HAL_RCC_OscConfig+0x3f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000c42:	4b7f      	ldr	r3, [pc, #508]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	230c      	movs	r3, #12
 8000c48:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000c4a:	2b08      	cmp	r3, #8
 8000c4c:	d053      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000c4e:	6a23      	ldr	r3, [r4, #32]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d07e      	beq.n	8000d52 <HAL_RCC_OscConfig+0x442>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000c54:	4a7a      	ldr	r2, [pc, #488]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000c56:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000c58:	2380      	movs	r3, #128	@ 0x80
 8000c5a:	025b      	lsls	r3, r3, #9
 8000c5c:	430b      	orrs	r3, r1
 8000c5e:	6353      	str	r3, [r2, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fc64 	bl	800052c <HAL_GetTick>
 8000c64:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000c66:	4b76      	ldr	r3, [pc, #472]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c6a:	039b      	lsls	r3, r3, #14
 8000c6c:	d452      	bmi.n	8000d14 <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c6e:	f7ff fc5d 	bl	800052c <HAL_GetTick>
 8000c72:	1b40      	subs	r0, r0, r5
 8000c74:	2802      	cmp	r0, #2
 8000c76:	d9f6      	bls.n	8000c66 <HAL_RCC_OscConfig+0x356>
          {
            return HAL_TIMEOUT;
 8000c78:	2003      	movs	r0, #3
 8000c7a:	e0cf      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c7c:	4a70      	ldr	r2, [pc, #448]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000c7e:	69d3      	ldr	r3, [r2, #28]
 8000c80:	4970      	ldr	r1, [pc, #448]	@ (8000e44 <HAL_RCC_OscConfig+0x534>)
 8000c82:	400b      	ands	r3, r1
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	e7bf      	b.n	8000c08 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000c88:	4b6d      	ldr	r3, [pc, #436]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000c92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c94:	3903      	subs	r1, #3
 8000c96:	430a      	orrs	r2, r1
 8000c98:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000c9a:	f7ff fc47 	bl	800052c <HAL_GetTick>
 8000c9e:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000ca0:	4b67      	ldr	r3, [pc, #412]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ca4:	079b      	lsls	r3, r3, #30
 8000ca6:	d406      	bmi.n	8000cb6 <HAL_RCC_OscConfig+0x3a6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ca8:	f7ff fc40 	bl	800052c <HAL_GetTick>
 8000cac:	1b40      	subs	r0, r0, r5
 8000cae:	2802      	cmp	r0, #2
 8000cb0:	d9f6      	bls.n	8000ca0 <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 8000cb2:	2003      	movs	r0, #3
 8000cb4:	e0b2      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000cb6:	4962      	ldr	r1, [pc, #392]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000cb8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8000cba:	22f8      	movs	r2, #248	@ 0xf8
 8000cbc:	4393      	bics	r3, r2
 8000cbe:	69a2      	ldr	r2, [r4, #24]
 8000cc0:	00d2      	lsls	r2, r2, #3
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	634b      	str	r3, [r1, #52]	@ 0x34
 8000cc6:	e7b3      	b.n	8000c30 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000cc8:	4b5d      	ldr	r3, [pc, #372]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000cca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ccc:	2104      	movs	r1, #4
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cd4:	3903      	subs	r1, #3
 8000cd6:	438a      	bics	r2, r1
 8000cd8:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000cda:	f7ff fc27 	bl	800052c <HAL_GetTick>
 8000cde:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ce0:	4b57      	ldr	r3, [pc, #348]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ce4:	079b      	lsls	r3, r3, #30
 8000ce6:	d5a3      	bpl.n	8000c30 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ce8:	f7ff fc20 	bl	800052c <HAL_GetTick>
 8000cec:	1b40      	subs	r0, r0, r5
 8000cee:	2802      	cmp	r0, #2
 8000cf0:	d9f6      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	e092      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000cf6:	4b52      	ldr	r3, [pc, #328]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	22c0      	movs	r2, #192	@ 0xc0
 8000cfc:	0252      	lsls	r2, r2, #9
 8000cfe:	4013      	ands	r3, r2
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d1a4      	bne.n	8000c4e <HAL_RCC_OscConfig+0x33e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000d04:	4b4e      	ldr	r3, [pc, #312]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d08:	039b      	lsls	r3, r3, #14
 8000d0a:	d503      	bpl.n	8000d14 <HAL_RCC_OscConfig+0x404>
 8000d0c:	6a23      	ldr	r3, [r4, #32]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d000      	beq.n	8000d14 <HAL_RCC_OscConfig+0x404>
 8000d12:	e089      	b.n	8000e28 <HAL_RCC_OscConfig+0x518>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d14:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d100      	bne.n	8000d1c <HAL_RCC_OscConfig+0x40c>
 8000d1a:	e087      	b.n	8000e2c <HAL_RCC_OscConfig+0x51c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d1c:	4a48      	ldr	r2, [pc, #288]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000d1e:	6851      	ldr	r1, [r2, #4]
 8000d20:	220c      	movs	r2, #12
 8000d22:	400a      	ands	r2, r1
 8000d24:	2a08      	cmp	r2, #8
 8000d26:	d060      	beq.n	8000dea <HAL_RCC_OscConfig+0x4da>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d025      	beq.n	8000d78 <HAL_RCC_OscConfig+0x468>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d2c:	4a44      	ldr	r2, [pc, #272]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000d2e:	6813      	ldr	r3, [r2, #0]
 8000d30:	4945      	ldr	r1, [pc, #276]	@ (8000e48 <HAL_RCC_OscConfig+0x538>)
 8000d32:	400b      	ands	r3, r1
 8000d34:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d36:	f7ff fbf9 	bl	800052c <HAL_GetTick>
 8000d3a:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d3c:	4b40      	ldr	r3, [pc, #256]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	019b      	lsls	r3, r3, #6
 8000d42:	d550      	bpl.n	8000de6 <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d44:	f7ff fbf2 	bl	800052c <HAL_GetTick>
 8000d48:	1b00      	subs	r0, r0, r4
 8000d4a:	2802      	cmp	r0, #2
 8000d4c:	d9f6      	bls.n	8000d3c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000d4e:	2003      	movs	r0, #3
 8000d50:	e064      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI48_DISABLE();
 8000d52:	4a3b      	ldr	r2, [pc, #236]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000d54:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000d56:	493d      	ldr	r1, [pc, #244]	@ (8000e4c <HAL_RCC_OscConfig+0x53c>)
 8000d58:	400b      	ands	r3, r1
 8000d5a:	6353      	str	r3, [r2, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8000d5c:	f7ff fbe6 	bl	800052c <HAL_GetTick>
 8000d60:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000d62:	4b37      	ldr	r3, [pc, #220]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d66:	039b      	lsls	r3, r3, #14
 8000d68:	d5d4      	bpl.n	8000d14 <HAL_RCC_OscConfig+0x404>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000d6a:	f7ff fbdf 	bl	800052c <HAL_GetTick>
 8000d6e:	1b40      	subs	r0, r0, r5
 8000d70:	2802      	cmp	r0, #2
 8000d72:	d9f6      	bls.n	8000d62 <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8000d74:	2003      	movs	r0, #3
 8000d76:	e051      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_DISABLE();
 8000d78:	4a31      	ldr	r2, [pc, #196]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000d7a:	6813      	ldr	r3, [r2, #0]
 8000d7c:	4932      	ldr	r1, [pc, #200]	@ (8000e48 <HAL_RCC_OscConfig+0x538>)
 8000d7e:	400b      	ands	r3, r1
 8000d80:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d82:	f7ff fbd3 	bl	800052c <HAL_GetTick>
 8000d86:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d88:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	d506      	bpl.n	8000d9e <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d90:	f7ff fbcc 	bl	800052c <HAL_GetTick>
 8000d94:	1b40      	subs	r0, r0, r5
 8000d96:	2802      	cmp	r0, #2
 8000d98:	d9f6      	bls.n	8000d88 <HAL_RCC_OscConfig+0x478>
            return HAL_TIMEOUT;
 8000d9a:	2003      	movs	r0, #3
 8000d9c:	e03e      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000d9e:	4b28      	ldr	r3, [pc, #160]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000da2:	210f      	movs	r1, #15
 8000da4:	438a      	bics	r2, r1
 8000da6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000da8:	430a      	orrs	r2, r1
 8000daa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	4928      	ldr	r1, [pc, #160]	@ (8000e50 <HAL_RCC_OscConfig+0x540>)
 8000db0:	400a      	ands	r2, r1
 8000db2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000db4:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000db6:	4301      	orrs	r1, r0
 8000db8:	430a      	orrs	r2, r1
 8000dba:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8000dbc:	6819      	ldr	r1, [r3, #0]
 8000dbe:	2280      	movs	r2, #128	@ 0x80
 8000dc0:	0452      	lsls	r2, r2, #17
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fbb1 	bl	800052c <HAL_GetTick>
 8000dca:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	019b      	lsls	r3, r3, #6
 8000dd2:	d406      	bmi.n	8000de2 <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dd4:	f7ff fbaa 	bl	800052c <HAL_GetTick>
 8000dd8:	1b00      	subs	r0, r0, r4
 8000dda:	2802      	cmp	r0, #2
 8000ddc:	d9f6      	bls.n	8000dcc <HAL_RCC_OscConfig+0x4bc>
            return HAL_TIMEOUT;
 8000dde:	2003      	movs	r0, #3
 8000de0:	e01c      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }

  return HAL_OK;
 8000de2:	2000      	movs	r0, #0
 8000de4:	e01a      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
 8000de6:	2000      	movs	r0, #0
 8000de8:	e018      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d020      	beq.n	8000e30 <HAL_RCC_OscConfig+0x520>
        pll_config  = RCC->CFGR;
 8000dee:	4b14      	ldr	r3, [pc, #80]	@ (8000e40 <HAL_RCC_OscConfig+0x530>)
 8000df0:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8000df2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df4:	23c0      	movs	r3, #192	@ 0xc0
 8000df6:	025b      	lsls	r3, r3, #9
 8000df8:	4013      	ands	r3, r2
 8000dfa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000dfc:	428b      	cmp	r3, r1
 8000dfe:	d119      	bne.n	8000e34 <HAL_RCC_OscConfig+0x524>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e00:	230f      	movs	r3, #15
 8000e02:	4003      	ands	r3, r0
 8000e04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d116      	bne.n	8000e38 <HAL_RCC_OscConfig+0x528>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000e0a:	23f0      	movs	r3, #240	@ 0xf0
 8000e0c:	039b      	lsls	r3, r3, #14
 8000e0e:	401a      	ands	r2, r3
 8000e10:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d112      	bne.n	8000e3c <HAL_RCC_OscConfig+0x52c>
  return HAL_OK;
 8000e16:	2000      	movs	r0, #0
 8000e18:	e000      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
    return HAL_ERROR;
 8000e1a:	2001      	movs	r0, #1
}
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000e20:	2001      	movs	r0, #1
 8000e22:	e7fb      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
 8000e26:	e7f9      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 8000e28:	2001      	movs	r0, #1
 8000e2a:	e7f7      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
  return HAL_OK;
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e7f5      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 8000e30:	2001      	movs	r0, #1
 8000e32:	e7f3      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
          return HAL_ERROR;
 8000e34:	2001      	movs	r0, #1
 8000e36:	e7f1      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
 8000e38:	2001      	movs	r0, #1
 8000e3a:	e7ef      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	e7ed      	b.n	8000e1c <HAL_RCC_OscConfig+0x50c>
 8000e40:	40021000 	.word	0x40021000
 8000e44:	efffffff 	.word	0xefffffff
 8000e48:	feffffff 	.word	0xfeffffff
 8000e4c:	fffeffff 	.word	0xfffeffff
 8000e50:	ffc27fff 	.word	0xffc27fff

08000e54 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e54:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <HAL_RCC_GetSysClockFreq+0x64>)
 8000e58:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e5a:	230c      	movs	r3, #12
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b08      	cmp	r3, #8
 8000e60:	d003      	beq.n	8000e6a <HAL_RCC_GetSysClockFreq+0x16>
 8000e62:	2b0c      	cmp	r3, #12
 8000e64:	d125      	bne.n	8000eb2 <HAL_RCC_GetSysClockFreq+0x5e>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000e66:	4815      	ldr	r0, [pc, #84]	@ (8000ebc <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e68:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e6a:	0c91      	lsrs	r1, r2, #18
 8000e6c:	230f      	movs	r3, #15
 8000e6e:	4019      	ands	r1, r3
 8000e70:	4813      	ldr	r0, [pc, #76]	@ (8000ec0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000e72:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e74:	4910      	ldr	r1, [pc, #64]	@ (8000eb8 <HAL_RCC_GetSysClockFreq+0x64>)
 8000e76:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8000e78:	400b      	ands	r3, r1
 8000e7a:	4912      	ldr	r1, [pc, #72]	@ (8000ec4 <HAL_RCC_GetSysClockFreq+0x70>)
 8000e7c:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e7e:	23c0      	movs	r3, #192	@ 0xc0
 8000e80:	025b      	lsls	r3, r3, #9
 8000e82:	401a      	ands	r2, r3
 8000e84:	2380      	movs	r3, #128	@ 0x80
 8000e86:	025b      	lsls	r3, r3, #9
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d008      	beq.n	8000e9e <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000e8c:	23c0      	movs	r3, #192	@ 0xc0
 8000e8e:	025b      	lsls	r3, r3, #9
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d009      	beq.n	8000ea8 <HAL_RCC_GetSysClockFreq+0x54>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000e96:	f7ff f913 	bl	80000c0 <__udivsi3>
 8000e9a:	4360      	muls	r0, r4
 8000e9c:	e7e4      	b.n	8000e68 <HAL_RCC_GetSysClockFreq+0x14>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000e9e:	480a      	ldr	r0, [pc, #40]	@ (8000ec8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000ea0:	f7ff f90e 	bl	80000c0 <__udivsi3>
 8000ea4:	4360      	muls	r0, r4
 8000ea6:	e7df      	b.n	8000e68 <HAL_RCC_GetSysClockFreq+0x14>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000ea8:	4804      	ldr	r0, [pc, #16]	@ (8000ebc <HAL_RCC_GetSysClockFreq+0x68>)
 8000eaa:	f7ff f909 	bl	80000c0 <__udivsi3>
 8000eae:	4360      	muls	r0, r4
 8000eb0:	e7da      	b.n	8000e68 <HAL_RCC_GetSysClockFreq+0x14>
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb2:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000eb4:	e7d8      	b.n	8000e68 <HAL_RCC_GetSysClockFreq+0x14>
 8000eb6:	46c0      	nop			@ (mov r8, r8)
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	02dc6c00 	.word	0x02dc6c00
 8000ec0:	08001c74 	.word	0x08001c74
 8000ec4:	08001c64 	.word	0x08001c64
 8000ec8:	007a1200 	.word	0x007a1200

08000ecc <HAL_RCC_ClockConfig>:
{
 8000ecc:	b570      	push	{r4, r5, r6, lr}
 8000ece:	0004      	movs	r4, r0
 8000ed0:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	d100      	bne.n	8000ed8 <HAL_RCC_ClockConfig+0xc>
 8000ed6:	e086      	b.n	8000fe6 <HAL_RCC_ClockConfig+0x11a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ed8:	4b47      	ldr	r3, [pc, #284]	@ (8000ff8 <HAL_RCC_ClockConfig+0x12c>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2301      	movs	r3, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d20a      	bcs.n	8000efa <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ee4:	4944      	ldr	r1, [pc, #272]	@ (8000ff8 <HAL_RCC_ClockConfig+0x12c>)
 8000ee6:	680b      	ldr	r3, [r1, #0]
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4393      	bics	r3, r2
 8000eec:	432b      	orrs	r3, r5
 8000eee:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ef0:	680b      	ldr	r3, [r1, #0]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	42aa      	cmp	r2, r5
 8000ef6:	d000      	beq.n	8000efa <HAL_RCC_ClockConfig+0x2e>
 8000ef8:	e077      	b.n	8000fea <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	079a      	lsls	r2, r3, #30
 8000efe:	d50e      	bpl.n	8000f1e <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f00:	075b      	lsls	r3, r3, #29
 8000f02:	d505      	bpl.n	8000f10 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000f04:	4a3d      	ldr	r2, [pc, #244]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000f06:	6851      	ldr	r1, [r2, #4]
 8000f08:	23e0      	movs	r3, #224	@ 0xe0
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	430b      	orrs	r3, r1
 8000f0e:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f10:	4a3a      	ldr	r2, [pc, #232]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000f12:	6853      	ldr	r3, [r2, #4]
 8000f14:	21f0      	movs	r1, #240	@ 0xf0
 8000f16:	438b      	bics	r3, r1
 8000f18:	68a1      	ldr	r1, [r4, #8]
 8000f1a:	430b      	orrs	r3, r1
 8000f1c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f1e:	6823      	ldr	r3, [r4, #0]
 8000f20:	07db      	lsls	r3, r3, #31
 8000f22:	d535      	bpl.n	8000f90 <HAL_RCC_ClockConfig+0xc4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f24:	6863      	ldr	r3, [r4, #4]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d009      	beq.n	8000f3e <HAL_RCC_ClockConfig+0x72>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d024      	beq.n	8000f78 <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d028      	beq.n	8000f84 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f32:	4a32      	ldr	r2, [pc, #200]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	0792      	lsls	r2, r2, #30
 8000f38:	d405      	bmi.n	8000f46 <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	e052      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000f40:	6812      	ldr	r2, [r2, #0]
 8000f42:	0392      	lsls	r2, r2, #14
 8000f44:	d553      	bpl.n	8000fee <HAL_RCC_ClockConfig+0x122>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f46:	492d      	ldr	r1, [pc, #180]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000f48:	684a      	ldr	r2, [r1, #4]
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	4382      	bics	r2, r0
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000f52:	f7ff faeb 	bl	800052c <HAL_GetTick>
 8000f56:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f58:	4b28      	ldr	r3, [pc, #160]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	220c      	movs	r2, #12
 8000f5e:	401a      	ands	r2, r3
 8000f60:	6863      	ldr	r3, [r4, #4]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d013      	beq.n	8000f90 <HAL_RCC_ClockConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f68:	f7ff fae0 	bl	800052c <HAL_GetTick>
 8000f6c:	1b80      	subs	r0, r0, r6
 8000f6e:	4b24      	ldr	r3, [pc, #144]	@ (8001000 <HAL_RCC_ClockConfig+0x134>)
 8000f70:	4298      	cmp	r0, r3
 8000f72:	d9f1      	bls.n	8000f58 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8000f74:	2003      	movs	r0, #3
 8000f76:	e035      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f78:	4a20      	ldr	r2, [pc, #128]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000f7a:	6812      	ldr	r2, [r2, #0]
 8000f7c:	0192      	lsls	r2, r2, #6
 8000f7e:	d4e2      	bmi.n	8000f46 <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8000f80:	2001      	movs	r0, #1
 8000f82:	e02f      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000f84:	4a1d      	ldr	r2, [pc, #116]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000f86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000f88:	0392      	lsls	r2, r2, #14
 8000f8a:	d4dc      	bmi.n	8000f46 <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	e029      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <HAL_RCC_ClockConfig+0x12c>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	2301      	movs	r3, #1
 8000f96:	4013      	ands	r3, r2
 8000f98:	42ab      	cmp	r3, r5
 8000f9a:	d909      	bls.n	8000fb0 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9c:	4916      	ldr	r1, [pc, #88]	@ (8000ff8 <HAL_RCC_ClockConfig+0x12c>)
 8000f9e:	680b      	ldr	r3, [r1, #0]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4393      	bics	r3, r2
 8000fa4:	432b      	orrs	r3, r5
 8000fa6:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa8:	680b      	ldr	r3, [r1, #0]
 8000faa:	401a      	ands	r2, r3
 8000fac:	42aa      	cmp	r2, r5
 8000fae:	d120      	bne.n	8000ff2 <HAL_RCC_ClockConfig+0x126>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	075b      	lsls	r3, r3, #29
 8000fb4:	d506      	bpl.n	8000fc4 <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000fb6:	4a11      	ldr	r2, [pc, #68]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000fb8:	6853      	ldr	r3, [r2, #4]
 8000fba:	4912      	ldr	r1, [pc, #72]	@ (8001004 <HAL_RCC_ClockConfig+0x138>)
 8000fbc:	400b      	ands	r3, r1
 8000fbe:	68e1      	ldr	r1, [r4, #12]
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000fc4:	f7ff ff46 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <HAL_RCC_ClockConfig+0x130>)
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	0912      	lsrs	r2, r2, #4
 8000fce:	230f      	movs	r3, #15
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	4a0d      	ldr	r2, [pc, #52]	@ (8001008 <HAL_RCC_ClockConfig+0x13c>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	40d8      	lsrs	r0, r3
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800100c <HAL_RCC_ClockConfig+0x140>)
 8000fda:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000fdc:	2003      	movs	r0, #3
 8000fde:	f7ff fa61 	bl	80004a4 <HAL_InitTick>
  return HAL_OK;
 8000fe2:	2000      	movs	r0, #0
}
 8000fe4:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e7fc      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 8000fea:	2001      	movs	r0, #1
 8000fec:	e7fa      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8000fee:	2001      	movs	r0, #1
 8000ff0:	e7f8      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	e7f6      	b.n	8000fe4 <HAL_RCC_ClockConfig+0x118>
 8000ff6:	46c0      	nop			@ (mov r8, r8)
 8000ff8:	40022000 	.word	0x40022000
 8000ffc:	40021000 	.word	0x40021000
 8001000:	00001388 	.word	0x00001388
 8001004:	fffff8ff 	.word	0xfffff8ff
 8001008:	08001c8c 	.word	0x08001c8c
 800100c:	20000008 	.word	0x20000008

08001010 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001010:	4b01      	ldr	r3, [pc, #4]	@ (8001018 <HAL_RCC_GetHCLKFreq+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
}
 8001014:	4770      	bx	lr
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	20000008 	.word	0x20000008

0800101c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800101c:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800101e:	f7ff fff7 	bl	8001010 <HAL_RCC_GetHCLKFreq>
 8001022:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	0a12      	lsrs	r2, r2, #8
 8001028:	2307      	movs	r3, #7
 800102a:	4013      	ands	r3, r2
 800102c:	4a02      	ldr	r2, [pc, #8]	@ (8001038 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800102e:	5cd3      	ldrb	r3, [r2, r3]
 8001030:	40d8      	lsrs	r0, r3
}    
 8001032:	bd10      	pop	{r4, pc}
 8001034:	40021000 	.word	0x40021000
 8001038:	08001c84 	.word	0x08001c84

0800103c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800103c:	b570      	push	{r4, r5, r6, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001042:	6803      	ldr	r3, [r0, #0]
 8001044:	03db      	lsls	r3, r3, #15
 8001046:	d539      	bpl.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001048:	4b4d      	ldr	r3, [pc, #308]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	d46a      	bmi.n	8001126 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	4b4b      	ldr	r3, [pc, #300]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001052:	69da      	ldr	r2, [r3, #28]
 8001054:	2180      	movs	r1, #128	@ 0x80
 8001056:	0549      	lsls	r1, r1, #21
 8001058:	430a      	orrs	r2, r1
 800105a:	61da      	str	r2, [r3, #28]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	400b      	ands	r3, r1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001064:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001066:	4b47      	ldr	r3, [pc, #284]	@ (8001184 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	05db      	lsls	r3, r3, #23
 800106c:	d55d      	bpl.n	800112a <HAL_RCCEx_PeriphCLKConfig+0xee>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800106e:	4b44      	ldr	r3, [pc, #272]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001070:	6a1a      	ldr	r2, [r3, #32]
 8001072:	23c0      	movs	r3, #192	@ 0xc0
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	0011      	movs	r1, r2
 8001078:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800107a:	421a      	tst	r2, r3
 800107c:	d015      	beq.n	80010aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800107e:	6863      	ldr	r3, [r4, #4]
 8001080:	22c0      	movs	r2, #192	@ 0xc0
 8001082:	0092      	lsls	r2, r2, #2
 8001084:	4013      	ands	r3, r2
 8001086:	428b      	cmp	r3, r1
 8001088:	d00f      	beq.n	80010aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800108a:	4b3d      	ldr	r3, [pc, #244]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800108c:	6a1a      	ldr	r2, [r3, #32]
 800108e:	493e      	ldr	r1, [pc, #248]	@ (8001188 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001090:	4011      	ands	r1, r2
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001092:	6a1e      	ldr	r6, [r3, #32]
 8001094:	2080      	movs	r0, #128	@ 0x80
 8001096:	0240      	lsls	r0, r0, #9
 8001098:	4330      	orrs	r0, r6
 800109a:	6218      	str	r0, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800109c:	6a18      	ldr	r0, [r3, #32]
 800109e:	4e3b      	ldr	r6, [pc, #236]	@ (800118c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80010a0:	4030      	ands	r0, r6
 80010a2:	6218      	str	r0, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80010a4:	6219      	str	r1, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80010a6:	07d2      	lsls	r2, r2, #31
 80010a8:	d454      	bmi.n	8001154 <HAL_RCCEx_PeriphCLKConfig+0x118>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80010aa:	4a35      	ldr	r2, [pc, #212]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80010ac:	6a13      	ldr	r3, [r2, #32]
 80010ae:	4936      	ldr	r1, [pc, #216]	@ (8001188 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80010b0:	400b      	ands	r3, r1
 80010b2:	6861      	ldr	r1, [r4, #4]
 80010b4:	430b      	orrs	r3, r1
 80010b6:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010b8:	2d01      	cmp	r5, #1
 80010ba:	d05a      	beq.n	8001172 <HAL_RCCEx_PeriphCLKConfig+0x136>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80010bc:	6823      	ldr	r3, [r4, #0]
 80010be:	07db      	lsls	r3, r3, #31
 80010c0:	d506      	bpl.n	80010d0 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80010c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80010c4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010c6:	2103      	movs	r1, #3
 80010c8:	438b      	bics	r3, r1
 80010ca:	68a1      	ldr	r1, [r4, #8]
 80010cc:	430b      	orrs	r3, r1
 80010ce:	6313      	str	r3, [r2, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	079b      	lsls	r3, r3, #30
 80010d4:	d506      	bpl.n	80010e4 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80010d6:	4a2a      	ldr	r2, [pc, #168]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80010d8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010da:	492d      	ldr	r1, [pc, #180]	@ (8001190 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80010dc:	400b      	ands	r3, r1
 80010de:	68e1      	ldr	r1, [r4, #12]
 80010e0:	430b      	orrs	r3, r1
 80010e2:	6313      	str	r3, [r2, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80010e4:	6823      	ldr	r3, [r4, #0]
 80010e6:	069b      	lsls	r3, r3, #26
 80010e8:	d506      	bpl.n	80010f8 <HAL_RCCEx_PeriphCLKConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80010ea:	4a25      	ldr	r2, [pc, #148]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80010ec:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80010ee:	2110      	movs	r1, #16
 80010f0:	438b      	bics	r3, r1
 80010f2:	6921      	ldr	r1, [r4, #16]
 80010f4:	430b      	orrs	r3, r1
 80010f6:	6313      	str	r3, [r2, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80010f8:	6823      	ldr	r3, [r4, #0]
 80010fa:	039b      	lsls	r3, r3, #14
 80010fc:	d506      	bpl.n	800110c <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80010fe:	4a20      	ldr	r2, [pc, #128]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001100:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	438b      	bics	r3, r1
 8001106:	69a1      	ldr	r1, [r4, #24]
 8001108:	430b      	orrs	r3, r1
 800110a:	6313      	str	r3, [r2, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800110c:	6823      	ldr	r3, [r4, #0]
 800110e:	055b      	lsls	r3, r3, #21
 8001110:	d534      	bpl.n	800117c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001112:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001114:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8001116:	2140      	movs	r1, #64	@ 0x40
 8001118:	438b      	bics	r3, r1
 800111a:	6961      	ldr	r1, [r4, #20]
 800111c:	430b      	orrs	r3, r1
 800111e:	6313      	str	r3, [r2, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001120:	2000      	movs	r0, #0
}
 8001122:	b002      	add	sp, #8
 8001124:	bd70      	pop	{r4, r5, r6, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001126:	2500      	movs	r5, #0
 8001128:	e79d      	b.n	8001066 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800112c:	6811      	ldr	r1, [r2, #0]
 800112e:	2380      	movs	r3, #128	@ 0x80
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	430b      	orrs	r3, r1
 8001134:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001136:	f7ff f9f9 	bl	800052c <HAL_GetTick>
 800113a:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	d500      	bpl.n	8001146 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8001144:	e793      	b.n	800106e <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001146:	f7ff f9f1 	bl	800052c <HAL_GetTick>
 800114a:	1b80      	subs	r0, r0, r6
 800114c:	2864      	cmp	r0, #100	@ 0x64
 800114e:	d9f5      	bls.n	800113c <HAL_RCCEx_PeriphCLKConfig+0x100>
          return HAL_TIMEOUT;
 8001150:	2003      	movs	r0, #3
 8001152:	e7e6      	b.n	8001122 <HAL_RCCEx_PeriphCLKConfig+0xe6>
        tickstart = HAL_GetTick();
 8001154:	f7ff f9ea 	bl	800052c <HAL_GetTick>
 8001158:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800115a:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	079b      	lsls	r3, r3, #30
 8001160:	d4a3      	bmi.n	80010aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001162:	f7ff f9e3 	bl	800052c <HAL_GetTick>
 8001166:	1b80      	subs	r0, r0, r6
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800116a:	4298      	cmp	r0, r3
 800116c:	d9f5      	bls.n	800115a <HAL_RCCEx_PeriphCLKConfig+0x11e>
            return HAL_TIMEOUT;
 800116e:	2003      	movs	r0, #3
 8001170:	e7d7      	b.n	8001122 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001172:	69d3      	ldr	r3, [r2, #28]
 8001174:	4908      	ldr	r1, [pc, #32]	@ (8001198 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001176:	400b      	ands	r3, r1
 8001178:	61d3      	str	r3, [r2, #28]
 800117a:	e79f      	b.n	80010bc <HAL_RCCEx_PeriphCLKConfig+0x80>
  return HAL_OK;
 800117c:	2000      	movs	r0, #0
 800117e:	e7d0      	b.n	8001122 <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8001180:	40021000 	.word	0x40021000
 8001184:	40007000 	.word	0x40007000
 8001188:	fffffcff 	.word	0xfffffcff
 800118c:	fffeffff 	.word	0xfffeffff
 8001190:	fffcffff 	.word	0xfffcffff
 8001194:	00001388 	.word	0x00001388
 8001198:	efffffff 	.word	0xefffffff

0800119c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800119c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119e:	46d6      	mov	lr, sl
 80011a0:	464f      	mov	r7, r9
 80011a2:	4646      	mov	r6, r8
 80011a4:	b5c0      	push	{r6, r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	0006      	movs	r6, r0
 80011aa:	000d      	movs	r5, r1
 80011ac:	4690      	mov	r8, r2
 80011ae:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80011b0:	f7ff f9bc 	bl	800052c <HAL_GetTick>
 80011b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80011b6:	1a18      	subs	r0, r3, r0
 80011b8:	4681      	mov	r9, r0
 80011ba:	44b9      	add	r9, r7
  tmp_tickstart = HAL_GetTick();
 80011bc:	f7ff f9b6 	bl	800052c <HAL_GetTick>
 80011c0:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80011c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	015b      	lsls	r3, r3, #5
 80011c8:	0d1b      	lsrs	r3, r3, #20
 80011ca:	464a      	mov	r2, r9
 80011cc:	4353      	muls	r3, r2
 80011ce:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80011d0:	6833      	ldr	r3, [r6, #0]
 80011d2:	689c      	ldr	r4, [r3, #8]
 80011d4:	402c      	ands	r4, r5
 80011d6:	1b64      	subs	r4, r4, r5
 80011d8:	4263      	negs	r3, r4
 80011da:	415c      	adcs	r4, r3
 80011dc:	4544      	cmp	r4, r8
 80011de:	d042      	beq.n	8001266 <SPI_WaitFlagStateUntilTimeout+0xca>
  {
    if (Timeout != HAL_MAX_DELAY)
 80011e0:	1c7b      	adds	r3, r7, #1
 80011e2:	d0f5      	beq.n	80011d0 <SPI_WaitFlagStateUntilTimeout+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80011e4:	f7ff f9a2 	bl	800052c <HAL_GetTick>
 80011e8:	4653      	mov	r3, sl
 80011ea:	1ac0      	subs	r0, r0, r3
 80011ec:	4548      	cmp	r0, r9
 80011ee:	d208      	bcs.n	8001202 <SPI_WaitFlagStateUntilTimeout+0x66>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80011f0:	9a01      	ldr	r2, [sp, #4]
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d000      	beq.n	80011f8 <SPI_WaitFlagStateUntilTimeout+0x5c>
 80011f6:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 80011f8:	9b01      	ldr	r3, [sp, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	9301      	str	r3, [sp, #4]
 80011fe:	4691      	mov	r9, r2
 8001200:	e7e6      	b.n	80011d0 <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001202:	6832      	ldr	r2, [r6, #0]
 8001204:	6853      	ldr	r3, [r2, #4]
 8001206:	21e0      	movs	r1, #224	@ 0xe0
 8001208:	438b      	bics	r3, r1
 800120a:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800120c:	6872      	ldr	r2, [r6, #4]
 800120e:	2382      	movs	r3, #130	@ 0x82
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	429a      	cmp	r2, r3
 8001214:	d00c      	beq.n	8001230 <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001216:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8001218:	2380      	movs	r3, #128	@ 0x80
 800121a:	019b      	lsls	r3, r3, #6
 800121c:	429a      	cmp	r2, r3
 800121e:	d016      	beq.n	800124e <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8001220:	235d      	movs	r3, #93	@ 0x5d
 8001222:	2201      	movs	r2, #1
 8001224:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 8001226:	3b01      	subs	r3, #1
 8001228:	2200      	movs	r2, #0
 800122a:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 800122c:	2003      	movs	r0, #3
 800122e:	e01b      	b.n	8001268 <SPI_WaitFlagStateUntilTimeout+0xcc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001230:	68b3      	ldr	r3, [r6, #8]
 8001232:	2280      	movs	r2, #128	@ 0x80
 8001234:	0212      	lsls	r2, r2, #8
 8001236:	4293      	cmp	r3, r2
 8001238:	d003      	beq.n	8001242 <SPI_WaitFlagStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800123a:	2280      	movs	r2, #128	@ 0x80
 800123c:	00d2      	lsls	r2, r2, #3
 800123e:	4293      	cmp	r3, r2
 8001240:	d1e9      	bne.n	8001216 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8001242:	6832      	ldr	r2, [r6, #0]
 8001244:	6813      	ldr	r3, [r2, #0]
 8001246:	2140      	movs	r1, #64	@ 0x40
 8001248:	438b      	bics	r3, r1
 800124a:	6013      	str	r3, [r2, #0]
 800124c:	e7e3      	b.n	8001216 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 800124e:	6832      	ldr	r2, [r6, #0]
 8001250:	6813      	ldr	r3, [r2, #0]
 8001252:	4909      	ldr	r1, [pc, #36]	@ (8001278 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8001254:	400b      	ands	r3, r1
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	6832      	ldr	r2, [r6, #0]
 800125a:	6811      	ldr	r1, [r2, #0]
 800125c:	2380      	movs	r3, #128	@ 0x80
 800125e:	019b      	lsls	r3, r3, #6
 8001260:	430b      	orrs	r3, r1
 8001262:	6013      	str	r3, [r2, #0]
 8001264:	e7dc      	b.n	8001220 <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8001266:	2000      	movs	r0, #0
}
 8001268:	b002      	add	sp, #8
 800126a:	bce0      	pop	{r5, r6, r7}
 800126c:	46ba      	mov	sl, r7
 800126e:	46b1      	mov	r9, r6
 8001270:	46a8      	mov	r8, r5
 8001272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001274:	20000008 	.word	0x20000008
 8001278:	ffffdfff 	.word	0xffffdfff

0800127c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	46de      	mov	lr, fp
 8001280:	4657      	mov	r7, sl
 8001282:	464e      	mov	r6, r9
 8001284:	4645      	mov	r5, r8
 8001286:	b5e0      	push	{r5, r6, r7, lr}
 8001288:	b083      	sub	sp, #12
 800128a:	0007      	movs	r7, r0
 800128c:	000d      	movs	r5, r1
 800128e:	0016      	movs	r6, r2
 8001290:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8001292:	466b      	mov	r3, sp
 8001294:	2200      	movs	r2, #0
 8001296:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001298:	f7ff f948 	bl	800052c <HAL_GetTick>
 800129c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800129e:	1a18      	subs	r0, r3, r0
 80012a0:	4440      	add	r0, r8
 80012a2:	4681      	mov	r9, r0
  tmp_tickstart = HAL_GetTick();
 80012a4:	f7ff f942 	bl	800052c <HAL_GetTick>
 80012a8:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80012ae:	4b34      	ldr	r3, [pc, #208]	@ (8001380 <SPI_WaitFifoStateUntilTimeout+0x104>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	009a      	lsls	r2, r3, #2
 80012b4:	18d2      	adds	r2, r2, r3
 80012b6:	00d3      	lsls	r3, r2, #3
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	0d1b      	lsrs	r3, r3, #20
 80012bc:	464a      	mov	r2, r9
 80012be:	4353      	muls	r3, r2
 80012c0:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 80012c2:	e002      	b.n	80012ca <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 80012c4:	4643      	mov	r3, r8
 80012c6:	3301      	adds	r3, #1
 80012c8:	d111      	bne.n	80012ee <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	689c      	ldr	r4, [r3, #8]
 80012ce:	402c      	ands	r4, r5
 80012d0:	42b4      	cmp	r4, r6
 80012d2:	d04d      	beq.n	8001370 <SPI_WaitFifoStateUntilTimeout+0xf4>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80012d4:	23c0      	movs	r3, #192	@ 0xc0
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	429d      	cmp	r5, r3
 80012da:	d1f3      	bne.n	80012c4 <SPI_WaitFifoStateUntilTimeout+0x48>
 80012dc:	2e00      	cmp	r6, #0
 80012de:	d1f1      	bne.n	80012c4 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 80012e0:	465b      	mov	r3, fp
 80012e2:	7b1b      	ldrb	r3, [r3, #12]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	466a      	mov	r2, sp
 80012e8:	70d3      	strb	r3, [r2, #3]
      UNUSED(tmpreg8);
 80012ea:	78d3      	ldrb	r3, [r2, #3]
 80012ec:	e7ea      	b.n	80012c4 <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80012ee:	f7ff f91d 	bl	800052c <HAL_GetTick>
 80012f2:	4653      	mov	r3, sl
 80012f4:	1ac0      	subs	r0, r0, r3
 80012f6:	4548      	cmp	r0, r9
 80012f8:	d208      	bcs.n	800130c <SPI_WaitFifoStateUntilTimeout+0x90>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80012fa:	9a01      	ldr	r2, [sp, #4]
 80012fc:	2a00      	cmp	r2, #0
 80012fe:	d000      	beq.n	8001302 <SPI_WaitFifoStateUntilTimeout+0x86>
 8001300:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8001302:	9b01      	ldr	r3, [sp, #4]
 8001304:	3b01      	subs	r3, #1
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	4691      	mov	r9, r2
 800130a:	e7de      	b.n	80012ca <SPI_WaitFifoStateUntilTimeout+0x4e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	6853      	ldr	r3, [r2, #4]
 8001310:	21e0      	movs	r1, #224	@ 0xe0
 8001312:	438b      	bics	r3, r1
 8001314:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	2382      	movs	r3, #130	@ 0x82
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	429a      	cmp	r2, r3
 800131e:	d00c      	beq.n	800133a <SPI_WaitFifoStateUntilTimeout+0xbe>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001320:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001322:	2380      	movs	r3, #128	@ 0x80
 8001324:	019b      	lsls	r3, r3, #6
 8001326:	429a      	cmp	r2, r3
 8001328:	d016      	beq.n	8001358 <SPI_WaitFifoStateUntilTimeout+0xdc>
        hspi->State = HAL_SPI_STATE_READY;
 800132a:	235d      	movs	r3, #93	@ 0x5d
 800132c:	2201      	movs	r2, #1
 800132e:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8001330:	3b01      	subs	r3, #1
 8001332:	2200      	movs	r2, #0
 8001334:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001336:	2003      	movs	r0, #3
 8001338:	e01b      	b.n	8001372 <SPI_WaitFifoStateUntilTimeout+0xf6>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2280      	movs	r2, #128	@ 0x80
 800133e:	0212      	lsls	r2, r2, #8
 8001340:	4293      	cmp	r3, r2
 8001342:	d003      	beq.n	800134c <SPI_WaitFifoStateUntilTimeout+0xd0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001344:	2280      	movs	r2, #128	@ 0x80
 8001346:	00d2      	lsls	r2, r2, #3
 8001348:	4293      	cmp	r3, r2
 800134a:	d1e9      	bne.n	8001320 <SPI_WaitFifoStateUntilTimeout+0xa4>
          __HAL_SPI_DISABLE(hspi);
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	6813      	ldr	r3, [r2, #0]
 8001350:	2140      	movs	r1, #64	@ 0x40
 8001352:	438b      	bics	r3, r1
 8001354:	6013      	str	r3, [r2, #0]
 8001356:	e7e3      	b.n	8001320 <SPI_WaitFifoStateUntilTimeout+0xa4>
          SPI_RESET_CRC(hspi);
 8001358:	683a      	ldr	r2, [r7, #0]
 800135a:	6813      	ldr	r3, [r2, #0]
 800135c:	4909      	ldr	r1, [pc, #36]	@ (8001384 <SPI_WaitFifoStateUntilTimeout+0x108>)
 800135e:	400b      	ands	r3, r1
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	683a      	ldr	r2, [r7, #0]
 8001364:	6811      	ldr	r1, [r2, #0]
 8001366:	2380      	movs	r3, #128	@ 0x80
 8001368:	019b      	lsls	r3, r3, #6
 800136a:	430b      	orrs	r3, r1
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	e7dc      	b.n	800132a <SPI_WaitFifoStateUntilTimeout+0xae>
    }
  }

  return HAL_OK;
 8001370:	2000      	movs	r0, #0
}
 8001372:	b003      	add	sp, #12
 8001374:	bcf0      	pop	{r4, r5, r6, r7}
 8001376:	46bb      	mov	fp, r7
 8001378:	46b2      	mov	sl, r6
 800137a:	46a9      	mov	r9, r5
 800137c:	46a0      	mov	r8, r4
 800137e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001380:	20000008 	.word	0x20000008
 8001384:	ffffdfff 	.word	0xffffdfff

08001388 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	0004      	movs	r4, r0
 800138e:	000d      	movs	r5, r1
 8001390:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001392:	21c0      	movs	r1, #192	@ 0xc0
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	002b      	movs	r3, r5
 8001398:	2200      	movs	r2, #0
 800139a:	0149      	lsls	r1, r1, #5
 800139c:	f7ff ff6e 	bl	800127c <SPI_WaitFifoStateUntilTimeout>
 80013a0:	2800      	cmp	r0, #0
 80013a2:	d118      	bne.n	80013d6 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80013a4:	9600      	str	r6, [sp, #0]
 80013a6:	002b      	movs	r3, r5
 80013a8:	2200      	movs	r2, #0
 80013aa:	2180      	movs	r1, #128	@ 0x80
 80013ac:	0020      	movs	r0, r4
 80013ae:	f7ff fef5 	bl	800119c <SPI_WaitFlagStateUntilTimeout>
 80013b2:	2800      	cmp	r0, #0
 80013b4:	d116      	bne.n	80013e4 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80013b6:	21c0      	movs	r1, #192	@ 0xc0
 80013b8:	9600      	str	r6, [sp, #0]
 80013ba:	002b      	movs	r3, r5
 80013bc:	2200      	movs	r2, #0
 80013be:	00c9      	lsls	r1, r1, #3
 80013c0:	0020      	movs	r0, r4
 80013c2:	f7ff ff5b 	bl	800127c <SPI_WaitFifoStateUntilTimeout>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	d00a      	beq.n	80013e0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013ca:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80013cc:	2220      	movs	r2, #32
 80013ce:	4313      	orrs	r3, r2
 80013d0:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80013d2:	2003      	movs	r0, #3
 80013d4:	e004      	b.n	80013e0 <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013d6:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80013d8:	2220      	movs	r2, #32
 80013da:	4313      	orrs	r3, r2
 80013dc:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80013de:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 80013e0:	b002      	add	sp, #8
 80013e2:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80013e4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80013e6:	2220      	movs	r2, #32
 80013e8:	4313      	orrs	r3, r2
 80013ea:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80013ec:	2003      	movs	r0, #3
 80013ee:	e7f7      	b.n	80013e0 <SPI_EndRxTxTransaction+0x58>

080013f0 <HAL_SPI_Init>:
{
 80013f0:	b570      	push	{r4, r5, r6, lr}
 80013f2:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 80013f4:	d100      	bne.n	80013f8 <HAL_SPI_Init+0x8>
 80013f6:	e078      	b.n	80014ea <HAL_SPI_Init+0xfa>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80013f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d107      	bne.n	800140e <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80013fe:	6842      	ldr	r2, [r0, #4]
 8001400:	3305      	adds	r3, #5
 8001402:	33ff      	adds	r3, #255	@ 0xff
 8001404:	429a      	cmp	r2, r3
 8001406:	d005      	beq.n	8001414 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001408:	2300      	movs	r3, #0
 800140a:	61c3      	str	r3, [r0, #28]
 800140c:	e002      	b.n	8001414 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001412:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001414:	2300      	movs	r3, #0
 8001416:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001418:	335d      	adds	r3, #93	@ 0x5d
 800141a:	5ce3      	ldrb	r3, [r4, r3]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d05a      	beq.n	80014d6 <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001420:	235d      	movs	r3, #93	@ 0x5d
 8001422:	2202      	movs	r2, #2
 8001424:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8001426:	6822      	ldr	r2, [r4, #0]
 8001428:	6813      	ldr	r3, [r2, #0]
 800142a:	2140      	movs	r1, #64	@ 0x40
 800142c:	438b      	bics	r3, r1
 800142e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001430:	68e3      	ldr	r3, [r4, #12]
 8001432:	22e0      	movs	r2, #224	@ 0xe0
 8001434:	00d2      	lsls	r2, r2, #3
 8001436:	4293      	cmp	r3, r2
 8001438:	d954      	bls.n	80014e4 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800143a:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800143c:	21f0      	movs	r1, #240	@ 0xf0
 800143e:	0109      	lsls	r1, r1, #4
 8001440:	428b      	cmp	r3, r1
 8001442:	d005      	beq.n	8001450 <HAL_SPI_Init+0x60>
 8001444:	21e0      	movs	r1, #224	@ 0xe0
 8001446:	00c9      	lsls	r1, r1, #3
 8001448:	428b      	cmp	r3, r1
 800144a:	d001      	beq.n	8001450 <HAL_SPI_Init+0x60>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001450:	6863      	ldr	r3, [r4, #4]
 8001452:	2182      	movs	r1, #130	@ 0x82
 8001454:	0049      	lsls	r1, r1, #1
 8001456:	400b      	ands	r3, r1
 8001458:	68a1      	ldr	r1, [r4, #8]
 800145a:	2084      	movs	r0, #132	@ 0x84
 800145c:	0200      	lsls	r0, r0, #8
 800145e:	4001      	ands	r1, r0
 8001460:	430b      	orrs	r3, r1
 8001462:	6920      	ldr	r0, [r4, #16]
 8001464:	2102      	movs	r1, #2
 8001466:	4001      	ands	r1, r0
 8001468:	430b      	orrs	r3, r1
 800146a:	6960      	ldr	r0, [r4, #20]
 800146c:	2101      	movs	r1, #1
 800146e:	4008      	ands	r0, r1
 8001470:	4303      	orrs	r3, r0
 8001472:	69a0      	ldr	r0, [r4, #24]
 8001474:	2580      	movs	r5, #128	@ 0x80
 8001476:	00ad      	lsls	r5, r5, #2
 8001478:	4028      	ands	r0, r5
 800147a:	4303      	orrs	r3, r0
 800147c:	69e5      	ldr	r5, [r4, #28]
 800147e:	2038      	movs	r0, #56	@ 0x38
 8001480:	4028      	ands	r0, r5
 8001482:	4303      	orrs	r3, r0
 8001484:	6a25      	ldr	r5, [r4, #32]
 8001486:	2080      	movs	r0, #128	@ 0x80
 8001488:	4028      	ands	r0, r5
 800148a:	4303      	orrs	r3, r0
 800148c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800148e:	2580      	movs	r5, #128	@ 0x80
 8001490:	01ad      	lsls	r5, r5, #6
 8001492:	4028      	ands	r0, r5
 8001494:	6825      	ldr	r5, [r4, #0]
 8001496:	4303      	orrs	r3, r0
 8001498:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800149a:	8b60      	ldrh	r0, [r4, #26]
 800149c:	2304      	movs	r3, #4
 800149e:	4003      	ands	r3, r0
 80014a0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80014a2:	2010      	movs	r0, #16
 80014a4:	4028      	ands	r0, r5
 80014a6:	4303      	orrs	r3, r0
 80014a8:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80014aa:	2008      	movs	r0, #8
 80014ac:	4028      	ands	r0, r5
 80014ae:	4303      	orrs	r3, r0
 80014b0:	68e0      	ldr	r0, [r4, #12]
 80014b2:	25f0      	movs	r5, #240	@ 0xf0
 80014b4:	012d      	lsls	r5, r5, #4
 80014b6:	4028      	ands	r0, r5
 80014b8:	4303      	orrs	r3, r0
 80014ba:	6820      	ldr	r0, [r4, #0]
 80014bc:	4313      	orrs	r3, r2
 80014be:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80014c0:	6822      	ldr	r2, [r4, #0]
 80014c2:	69d3      	ldr	r3, [r2, #28]
 80014c4:	480a      	ldr	r0, [pc, #40]	@ (80014f0 <HAL_SPI_Init+0x100>)
 80014c6:	4003      	ands	r3, r0
 80014c8:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80014ce:	335d      	adds	r3, #93	@ 0x5d
 80014d0:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 80014d2:	2000      	movs	r0, #0
}
 80014d4:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80014d6:	335c      	adds	r3, #92	@ 0x5c
 80014d8:	2200      	movs	r2, #0
 80014da:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80014dc:	0020      	movs	r0, r4
 80014de:	f7ff f97b 	bl	80007d8 <HAL_SPI_MspInit>
 80014e2:	e79d      	b.n	8001420 <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80014e4:	2280      	movs	r2, #128	@ 0x80
 80014e6:	0152      	lsls	r2, r2, #5
 80014e8:	e7a8      	b.n	800143c <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80014ea:	2001      	movs	r0, #1
 80014ec:	e7f2      	b.n	80014d4 <HAL_SPI_Init+0xe4>
 80014ee:	46c0      	nop			@ (mov r8, r8)
 80014f0:	fffff7ff 	.word	0xfffff7ff

080014f4 <HAL_SPI_Transmit>:
{
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	46ce      	mov	lr, r9
 80014f8:	b500      	push	{lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	0004      	movs	r4, r0
 80014fe:	9101      	str	r1, [sp, #4]
 8001500:	4691      	mov	r9, r2
 8001502:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001504:	235c      	movs	r3, #92	@ 0x5c
 8001506:	5cc3      	ldrb	r3, [r0, r3]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d100      	bne.n	800150e <HAL_SPI_Transmit+0x1a>
 800150c:	e0c9      	b.n	80016a2 <HAL_SPI_Transmit+0x1ae>
 800150e:	235c      	movs	r3, #92	@ 0x5c
 8001510:	2201      	movs	r2, #1
 8001512:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001514:	f7ff f80a 	bl	800052c <HAL_GetTick>
 8001518:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800151a:	235d      	movs	r3, #93	@ 0x5d
 800151c:	5ce3      	ldrb	r3, [r4, r3]
 800151e:	b2df      	uxtb	r7, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d000      	beq.n	8001526 <HAL_SPI_Transmit+0x32>
 8001524:	e0b4      	b.n	8001690 <HAL_SPI_Transmit+0x19c>
  if ((pData == NULL) || (Size == 0U))
 8001526:	9901      	ldr	r1, [sp, #4]
 8001528:	2900      	cmp	r1, #0
 800152a:	d100      	bne.n	800152e <HAL_SPI_Transmit+0x3a>
 800152c:	e0b1      	b.n	8001692 <HAL_SPI_Transmit+0x19e>
 800152e:	464b      	mov	r3, r9
 8001530:	2b00      	cmp	r3, #0
 8001532:	d100      	bne.n	8001536 <HAL_SPI_Transmit+0x42>
 8001534:	e0ad      	b.n	8001692 <HAL_SPI_Transmit+0x19e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001536:	235d      	movs	r3, #93	@ 0x5d
 8001538:	2203      	movs	r2, #3
 800153a:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800153c:	2300      	movs	r3, #0
 800153e:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001540:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8001542:	464a      	mov	r2, r9
 8001544:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001546:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001548:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800154a:	2244      	movs	r2, #68	@ 0x44
 800154c:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 800154e:	3202      	adds	r2, #2
 8001550:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 8001552:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001554:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001556:	68a2      	ldr	r2, [r4, #8]
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	021b      	lsls	r3, r3, #8
 800155c:	429a      	cmp	r2, r3
 800155e:	d01e      	beq.n	800159e <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001560:	6822      	ldr	r2, [r4, #0]
 8001562:	6813      	ldr	r3, [r2, #0]
 8001564:	065b      	lsls	r3, r3, #25
 8001566:	d403      	bmi.n	8001570 <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 8001568:	6813      	ldr	r3, [r2, #0]
 800156a:	2140      	movs	r1, #64	@ 0x40
 800156c:	430b      	orrs	r3, r1
 800156e:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001570:	68e2      	ldr	r2, [r4, #12]
 8001572:	23e0      	movs	r3, #224	@ 0xe0
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	429a      	cmp	r2, r3
 8001578:	d93d      	bls.n	80015f6 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800157a:	6863      	ldr	r3, [r4, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <HAL_SPI_Transmit+0x92>
 8001580:	464b      	mov	r3, r9
 8001582:	2b01      	cmp	r3, #1
 8001584:	d120      	bne.n	80015c8 <HAL_SPI_Transmit+0xd4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001586:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	8812      	ldrh	r2, [r2, #0]
 800158c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800158e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001590:	3302      	adds	r3, #2
 8001592:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001594:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001596:	3b01      	subs	r3, #1
 8001598:	b29b      	uxth	r3, r3
 800159a:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 800159c:	e014      	b.n	80015c8 <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_DISABLE(hspi);
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	2140      	movs	r1, #64	@ 0x40
 80015a4:	438b      	bics	r3, r1
 80015a6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80015a8:	6822      	ldr	r2, [r4, #0]
 80015aa:	6811      	ldr	r1, [r2, #0]
 80015ac:	2380      	movs	r3, #128	@ 0x80
 80015ae:	01db      	lsls	r3, r3, #7
 80015b0:	430b      	orrs	r3, r1
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e7d4      	b.n	8001560 <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80015b6:	f7fe ffb9 	bl	800052c <HAL_GetTick>
 80015ba:	1b80      	subs	r0, r0, r6
 80015bc:	42a8      	cmp	r0, r5
 80015be:	d301      	bcc.n	80015c4 <HAL_SPI_Transmit+0xd0>
 80015c0:	1c6b      	adds	r3, r5, #1
 80015c2:	d113      	bne.n	80015ec <HAL_SPI_Transmit+0xf8>
 80015c4:	2d00      	cmp	r5, #0
 80015c6:	d011      	beq.n	80015ec <HAL_SPI_Transmit+0xf8>
    while (hspi->TxXferCount > 0U)
 80015c8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d045      	beq.n	800165a <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80015ce:	6822      	ldr	r2, [r4, #0]
 80015d0:	6893      	ldr	r3, [r2, #8]
 80015d2:	079b      	lsls	r3, r3, #30
 80015d4:	d5ef      	bpl.n	80015b6 <HAL_SPI_Transmit+0xc2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80015d6:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	60d3      	str	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80015dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80015de:	3302      	adds	r3, #2
 80015e0:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80015e2:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80015ea:	e7ed      	b.n	80015c8 <HAL_SPI_Transmit+0xd4>
          hspi->State = HAL_SPI_STATE_READY;
 80015ec:	235d      	movs	r3, #93	@ 0x5d
 80015ee:	2201      	movs	r2, #1
 80015f0:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 80015f2:	2703      	movs	r7, #3
          goto error;
 80015f4:	e04d      	b.n	8001692 <HAL_SPI_Transmit+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80015f6:	6863      	ldr	r3, [r4, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_SPI_Transmit+0x10e>
 80015fc:	464b      	mov	r3, r9
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d114      	bne.n	800162c <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001602:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001604:	6823      	ldr	r3, [r4, #0]
 8001606:	7812      	ldrb	r2, [r2, #0]
 8001608:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800160a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800160c:	3301      	adds	r3, #1
 800160e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001610:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001612:	3b01      	subs	r3, #1
 8001614:	b29b      	uxth	r3, r3
 8001616:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001618:	e008      	b.n	800162c <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800161a:	f7fe ff87 	bl	800052c <HAL_GetTick>
 800161e:	1b80      	subs	r0, r0, r6
 8001620:	42a8      	cmp	r0, r5
 8001622:	d301      	bcc.n	8001628 <HAL_SPI_Transmit+0x134>
 8001624:	1c6b      	adds	r3, r5, #1
 8001626:	d113      	bne.n	8001650 <HAL_SPI_Transmit+0x15c>
 8001628:	2d00      	cmp	r5, #0
 800162a:	d011      	beq.n	8001650 <HAL_SPI_Transmit+0x15c>
    while (hspi->TxXferCount > 0U)
 800162c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800162e:	2b00      	cmp	r3, #0
 8001630:	d013      	beq.n	800165a <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001632:	6822      	ldr	r2, [r4, #0]
 8001634:	6893      	ldr	r3, [r2, #8]
 8001636:	079b      	lsls	r3, r3, #30
 8001638:	d5ef      	bpl.n	800161a <HAL_SPI_Transmit+0x126>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800163a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001640:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001642:	3301      	adds	r3, #1
 8001644:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001646:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8001648:	3901      	subs	r1, #1
 800164a:	b289      	uxth	r1, r1
 800164c:	87e1      	strh	r1, [r4, #62]	@ 0x3e
 800164e:	e7ed      	b.n	800162c <HAL_SPI_Transmit+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 8001650:	235d      	movs	r3, #93	@ 0x5d
 8001652:	2201      	movs	r2, #1
 8001654:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 8001656:	2703      	movs	r7, #3
          goto error;
 8001658:	e01b      	b.n	8001692 <HAL_SPI_Transmit+0x19e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800165a:	0032      	movs	r2, r6
 800165c:	0029      	movs	r1, r5
 800165e:	0020      	movs	r0, r4
 8001660:	f7ff fe92 	bl	8001388 <SPI_EndRxTxTransaction>
 8001664:	2800      	cmp	r0, #0
 8001666:	d001      	beq.n	800166c <HAL_SPI_Transmit+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001668:	2320      	movs	r3, #32
 800166a:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800166c:	68a3      	ldr	r3, [r4, #8]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_SPI_Transmit+0x18c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001672:	9303      	str	r3, [sp, #12]
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	9203      	str	r2, [sp, #12]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	9303      	str	r3, [sp, #12]
 800167e:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001680:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001682:	2b00      	cmp	r3, #0
 8001684:	d105      	bne.n	8001692 <HAL_SPI_Transmit+0x19e>
    hspi->State = HAL_SPI_STATE_READY;
 8001686:	335d      	adds	r3, #93	@ 0x5d
 8001688:	2201      	movs	r2, #1
 800168a:	54e2      	strb	r2, [r4, r3]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800168c:	2700      	movs	r7, #0
 800168e:	e000      	b.n	8001692 <HAL_SPI_Transmit+0x19e>
    errorcode = HAL_BUSY;
 8001690:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8001692:	235c      	movs	r3, #92	@ 0x5c
 8001694:	2200      	movs	r2, #0
 8001696:	54e2      	strb	r2, [r4, r3]
}
 8001698:	0038      	movs	r0, r7
 800169a:	b004      	add	sp, #16
 800169c:	bc80      	pop	{r7}
 800169e:	46b9      	mov	r9, r7
 80016a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80016a2:	2702      	movs	r7, #2
 80016a4:	e7f8      	b.n	8001698 <HAL_SPI_Transmit+0x1a4>
	...

080016a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80016a8:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016aa:	f3ef 8c10 	mrs	ip, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ae:	2201      	movs	r2, #1
 80016b0:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016b4:	6801      	ldr	r1, [r0, #0]
 80016b6:	680b      	ldr	r3, [r1, #0]
 80016b8:	4c12      	ldr	r4, [pc, #72]	@ (8001704 <UART_EndRxTransfer+0x5c>)
 80016ba:	4023      	ands	r3, r4
 80016bc:	600b      	str	r3, [r1, #0]
 80016be:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016c2:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016c6:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016ca:	6801      	ldr	r1, [r0, #0]
 80016cc:	688b      	ldr	r3, [r1, #8]
 80016ce:	4393      	bics	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
 80016d2:	f38c 8810 	msr	PRIMASK, ip

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80016d6:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d006      	beq.n	80016ea <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	2220      	movs	r2, #32
 80016e0:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80016e2:	2300      	movs	r3, #0
 80016e4:	6603      	str	r3, [r0, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80016e6:	6683      	str	r3, [r0, #104]	@ 0x68
}
 80016e8:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016ea:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ee:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80016f2:	6802      	ldr	r2, [r0, #0]
 80016f4:	6813      	ldr	r3, [r2, #0]
 80016f6:	3432      	adds	r4, #50	@ 0x32
 80016f8:	34ff      	adds	r4, #255	@ 0xff
 80016fa:	43a3      	bics	r3, r4
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	f381 8810 	msr	PRIMASK, r1
}
 8001702:	e7eb      	b.n	80016dc <UART_EndRxTransfer+0x34>
 8001704:	fffffedf 	.word	0xfffffedf

08001708 <UART_SetConfig>:
{
 8001708:	b510      	push	{r4, lr}
 800170a:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800170c:	6883      	ldr	r3, [r0, #8]
 800170e:	6902      	ldr	r2, [r0, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	6942      	ldr	r2, [r0, #20]
 8001714:	4313      	orrs	r3, r2
 8001716:	69c2      	ldr	r2, [r0, #28]
 8001718:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800171a:	6801      	ldr	r1, [r0, #0]
 800171c:	680a      	ldr	r2, [r1, #0]
 800171e:	4862      	ldr	r0, [pc, #392]	@ (80018a8 <UART_SetConfig+0x1a0>)
 8001720:	4002      	ands	r2, r0
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001726:	6822      	ldr	r2, [r4, #0]
 8001728:	6853      	ldr	r3, [r2, #4]
 800172a:	4960      	ldr	r1, [pc, #384]	@ (80018ac <UART_SetConfig+0x1a4>)
 800172c:	400b      	ands	r3, r1
 800172e:	68e1      	ldr	r1, [r4, #12]
 8001730:	430b      	orrs	r3, r1
 8001732:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001734:	69a3      	ldr	r3, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 8001736:	6a22      	ldr	r2, [r4, #32]
 8001738:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800173a:	6821      	ldr	r1, [r4, #0]
 800173c:	688b      	ldr	r3, [r1, #8]
 800173e:	485c      	ldr	r0, [pc, #368]	@ (80018b0 <UART_SetConfig+0x1a8>)
 8001740:	4003      	ands	r3, r0
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	4a5a      	ldr	r2, [pc, #360]	@ (80018b4 <UART_SetConfig+0x1ac>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d018      	beq.n	8001780 <UART_SetConfig+0x78>
 800174e:	4a5a      	ldr	r2, [pc, #360]	@ (80018b8 <UART_SetConfig+0x1b0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d026      	beq.n	80017a2 <UART_SetConfig+0x9a>
 8001754:	4a59      	ldr	r2, [pc, #356]	@ (80018bc <UART_SetConfig+0x1b4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d04d      	beq.n	80017f6 <UART_SetConfig+0xee>
 800175a:	4a59      	ldr	r2, [pc, #356]	@ (80018c0 <UART_SetConfig+0x1b8>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d038      	beq.n	80017d2 <UART_SetConfig+0xca>
 8001760:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001762:	69e0      	ldr	r0, [r4, #28]
 8001764:	2280      	movs	r2, #128	@ 0x80
 8001766:	0212      	lsls	r2, r2, #8
 8001768:	4290      	cmp	r0, r2
 800176a:	d046      	beq.n	80017fa <UART_SetConfig+0xf2>
    switch (clocksource)
 800176c:	2b04      	cmp	r3, #4
 800176e:	d100      	bne.n	8001772 <UART_SetConfig+0x6a>
 8001770:	e08c      	b.n	800188c <UART_SetConfig+0x184>
 8001772:	d870      	bhi.n	8001856 <UART_SetConfig+0x14e>
 8001774:	2b00      	cmp	r3, #0
 8001776:	d075      	beq.n	8001864 <UART_SetConfig+0x15c>
 8001778:	2b02      	cmp	r3, #2
 800177a:	d16a      	bne.n	8001852 <UART_SetConfig+0x14a>
 800177c:	4851      	ldr	r0, [pc, #324]	@ (80018c4 <UART_SetConfig+0x1bc>)
 800177e:	e075      	b.n	800186c <UART_SetConfig+0x164>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001780:	4b51      	ldr	r3, [pc, #324]	@ (80018c8 <UART_SetConfig+0x1c0>)
 8001782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001784:	2303      	movs	r3, #3
 8001786:	4013      	ands	r3, r2
 8001788:	2b02      	cmp	r3, #2
 800178a:	d024      	beq.n	80017d6 <UART_SetConfig+0xce>
 800178c:	d805      	bhi.n	800179a <UART_SetConfig+0x92>
 800178e:	2b00      	cmp	r3, #0
 8001790:	d023      	beq.n	80017da <UART_SetConfig+0xd2>
 8001792:	2b01      	cmp	r3, #1
 8001794:	d123      	bne.n	80017de <UART_SetConfig+0xd6>
 8001796:	3303      	adds	r3, #3
 8001798:	e7e3      	b.n	8001762 <UART_SetConfig+0x5a>
 800179a:	2b03      	cmp	r3, #3
 800179c:	d121      	bne.n	80017e2 <UART_SetConfig+0xda>
 800179e:	3b01      	subs	r3, #1
 80017a0:	e7df      	b.n	8001762 <UART_SetConfig+0x5a>
 80017a2:	4b49      	ldr	r3, [pc, #292]	@ (80018c8 <UART_SetConfig+0x1c0>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	22c0      	movs	r2, #192	@ 0xc0
 80017a8:	0292      	lsls	r2, r2, #10
 80017aa:	4013      	ands	r3, r2
 80017ac:	2280      	movs	r2, #128	@ 0x80
 80017ae:	0292      	lsls	r2, r2, #10
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d018      	beq.n	80017e6 <UART_SetConfig+0xde>
 80017b4:	d807      	bhi.n	80017c6 <UART_SetConfig+0xbe>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d017      	beq.n	80017ea <UART_SetConfig+0xe2>
 80017ba:	2280      	movs	r2, #128	@ 0x80
 80017bc:	0252      	lsls	r2, r2, #9
 80017be:	4293      	cmp	r3, r2
 80017c0:	d115      	bne.n	80017ee <UART_SetConfig+0xe6>
 80017c2:	2304      	movs	r3, #4
 80017c4:	e7cd      	b.n	8001762 <UART_SetConfig+0x5a>
 80017c6:	22c0      	movs	r2, #192	@ 0xc0
 80017c8:	0292      	lsls	r2, r2, #10
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d111      	bne.n	80017f2 <UART_SetConfig+0xea>
 80017ce:	2302      	movs	r3, #2
 80017d0:	e7c7      	b.n	8001762 <UART_SetConfig+0x5a>
 80017d2:	2300      	movs	r3, #0
 80017d4:	e7c5      	b.n	8001762 <UART_SetConfig+0x5a>
 80017d6:	2308      	movs	r3, #8
 80017d8:	e7c3      	b.n	8001762 <UART_SetConfig+0x5a>
 80017da:	2300      	movs	r3, #0
 80017dc:	e7c1      	b.n	8001762 <UART_SetConfig+0x5a>
 80017de:	2310      	movs	r3, #16
 80017e0:	e7bf      	b.n	8001762 <UART_SetConfig+0x5a>
 80017e2:	2310      	movs	r3, #16
 80017e4:	e7bd      	b.n	8001762 <UART_SetConfig+0x5a>
 80017e6:	2308      	movs	r3, #8
 80017e8:	e7bb      	b.n	8001762 <UART_SetConfig+0x5a>
 80017ea:	2300      	movs	r3, #0
 80017ec:	e7b9      	b.n	8001762 <UART_SetConfig+0x5a>
 80017ee:	2310      	movs	r3, #16
 80017f0:	e7b7      	b.n	8001762 <UART_SetConfig+0x5a>
 80017f2:	2310      	movs	r3, #16
 80017f4:	e7b5      	b.n	8001762 <UART_SetConfig+0x5a>
 80017f6:	2300      	movs	r3, #0
 80017f8:	e7b3      	b.n	8001762 <UART_SetConfig+0x5a>
    switch (clocksource)
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d026      	beq.n	800184c <UART_SetConfig+0x144>
 80017fe:	d807      	bhi.n	8001810 <UART_SetConfig+0x108>
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <UART_SetConfig+0x110>
 8001804:	2b02      	cmp	r3, #2
 8001806:	d101      	bne.n	800180c <UART_SetConfig+0x104>
        pclk = (uint32_t) HSI_VALUE;
 8001808:	482e      	ldr	r0, [pc, #184]	@ (80018c4 <UART_SetConfig+0x1bc>)
 800180a:	e009      	b.n	8001820 <UART_SetConfig+0x118>
    switch (clocksource)
 800180c:	2001      	movs	r0, #1
 800180e:	e047      	b.n	80018a0 <UART_SetConfig+0x198>
 8001810:	2b08      	cmp	r3, #8
 8001812:	d005      	beq.n	8001820 <UART_SetConfig+0x118>
 8001814:	2001      	movs	r0, #1
 8001816:	e043      	b.n	80018a0 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001818:	f7ff fc00 	bl	800101c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800181c:	2800      	cmp	r0, #0
 800181e:	d038      	beq.n	8001892 <UART_SetConfig+0x18a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001820:	0040      	lsls	r0, r0, #1
 8001822:	6861      	ldr	r1, [r4, #4]
 8001824:	084b      	lsrs	r3, r1, #1
 8001826:	18c0      	adds	r0, r0, r3
 8001828:	f7fe fc4a 	bl	80000c0 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800182c:	0002      	movs	r2, r0
 800182e:	3a10      	subs	r2, #16
 8001830:	4b26      	ldr	r3, [pc, #152]	@ (80018cc <UART_SetConfig+0x1c4>)
 8001832:	429a      	cmp	r2, r3
 8001834:	d82f      	bhi.n	8001896 <UART_SetConfig+0x18e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001836:	b282      	uxth	r2, r0
 8001838:	230f      	movs	r3, #15
 800183a:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800183c:	0840      	lsrs	r0, r0, #1
 800183e:	3b08      	subs	r3, #8
 8001840:	4003      	ands	r3, r0
 8001842:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8001844:	6822      	ldr	r2, [r4, #0]
 8001846:	60d3      	str	r3, [r2, #12]
 8001848:	2000      	movs	r0, #0
 800184a:	e029      	b.n	80018a0 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 800184c:	f7ff fb02 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
        break;
 8001850:	e7e4      	b.n	800181c <UART_SetConfig+0x114>
    switch (clocksource)
 8001852:	2001      	movs	r0, #1
 8001854:	e024      	b.n	80018a0 <UART_SetConfig+0x198>
 8001856:	2b08      	cmp	r3, #8
 8001858:	d102      	bne.n	8001860 <UART_SetConfig+0x158>
        pclk = (uint32_t) LSE_VALUE;
 800185a:	2080      	movs	r0, #128	@ 0x80
 800185c:	0200      	lsls	r0, r0, #8
 800185e:	e005      	b.n	800186c <UART_SetConfig+0x164>
    switch (clocksource)
 8001860:	2001      	movs	r0, #1
 8001862:	e01d      	b.n	80018a0 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001864:	f7ff fbda 	bl	800101c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8001868:	2800      	cmp	r0, #0
 800186a:	d016      	beq.n	800189a <UART_SetConfig+0x192>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800186c:	6861      	ldr	r1, [r4, #4]
 800186e:	084b      	lsrs	r3, r1, #1
 8001870:	1818      	adds	r0, r3, r0
 8001872:	f7fe fc25 	bl	80000c0 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001876:	0002      	movs	r2, r0
 8001878:	3a10      	subs	r2, #16
 800187a:	4b14      	ldr	r3, [pc, #80]	@ (80018cc <UART_SetConfig+0x1c4>)
 800187c:	429a      	cmp	r2, r3
 800187e:	d80e      	bhi.n	800189e <UART_SetConfig+0x196>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	0400      	lsls	r0, r0, #16
 8001884:	0c00      	lsrs	r0, r0, #16
 8001886:	60d8      	str	r0, [r3, #12]
 8001888:	2000      	movs	r0, #0
 800188a:	e009      	b.n	80018a0 <UART_SetConfig+0x198>
        pclk = HAL_RCC_GetSysClockFreq();
 800188c:	f7ff fae2 	bl	8000e54 <HAL_RCC_GetSysClockFreq>
        break;
 8001890:	e7ea      	b.n	8001868 <UART_SetConfig+0x160>
 8001892:	2000      	movs	r0, #0
 8001894:	e004      	b.n	80018a0 <UART_SetConfig+0x198>
        ret = HAL_ERROR;
 8001896:	2001      	movs	r0, #1
 8001898:	e002      	b.n	80018a0 <UART_SetConfig+0x198>
 800189a:	2000      	movs	r0, #0
 800189c:	e000      	b.n	80018a0 <UART_SetConfig+0x198>
        ret = HAL_ERROR;
 800189e:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->TxISR = NULL;
 80018a4:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 80018a6:	bd10      	pop	{r4, pc}
 80018a8:	efff69f3 	.word	0xefff69f3
 80018ac:	ffffcfff 	.word	0xffffcfff
 80018b0:	fffff4ff 	.word	0xfffff4ff
 80018b4:	40013800 	.word	0x40013800
 80018b8:	40004400 	.word	0x40004400
 80018bc:	40004800 	.word	0x40004800
 80018c0:	40004c00 	.word	0x40004c00
 80018c4:	007a1200 	.word	0x007a1200
 80018c8:	40021000 	.word	0x40021000
 80018cc:	0000ffef 	.word	0x0000ffef

080018d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80018d0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80018d2:	071b      	lsls	r3, r3, #28
 80018d4:	d506      	bpl.n	80018e4 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80018d6:	6802      	ldr	r2, [r0, #0]
 80018d8:	6853      	ldr	r3, [r2, #4]
 80018da:	492c      	ldr	r1, [pc, #176]	@ (800198c <UART_AdvFeatureConfig+0xbc>)
 80018dc:	400b      	ands	r3, r1
 80018de:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80018e0:	430b      	orrs	r3, r1
 80018e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80018e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80018e6:	07db      	lsls	r3, r3, #31
 80018e8:	d506      	bpl.n	80018f8 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80018ea:	6802      	ldr	r2, [r0, #0]
 80018ec:	6853      	ldr	r3, [r2, #4]
 80018ee:	4928      	ldr	r1, [pc, #160]	@ (8001990 <UART_AdvFeatureConfig+0xc0>)
 80018f0:	400b      	ands	r3, r1
 80018f2:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80018f8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80018fa:	079b      	lsls	r3, r3, #30
 80018fc:	d506      	bpl.n	800190c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80018fe:	6802      	ldr	r2, [r0, #0]
 8001900:	6853      	ldr	r3, [r2, #4]
 8001902:	4924      	ldr	r1, [pc, #144]	@ (8001994 <UART_AdvFeatureConfig+0xc4>)
 8001904:	400b      	ands	r3, r1
 8001906:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8001908:	430b      	orrs	r3, r1
 800190a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800190c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800190e:	075b      	lsls	r3, r3, #29
 8001910:	d506      	bpl.n	8001920 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001912:	6802      	ldr	r2, [r0, #0]
 8001914:	6853      	ldr	r3, [r2, #4]
 8001916:	4920      	ldr	r1, [pc, #128]	@ (8001998 <UART_AdvFeatureConfig+0xc8>)
 8001918:	400b      	ands	r3, r1
 800191a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800191c:	430b      	orrs	r3, r1
 800191e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001920:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001922:	06db      	lsls	r3, r3, #27
 8001924:	d506      	bpl.n	8001934 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001926:	6802      	ldr	r2, [r0, #0]
 8001928:	6893      	ldr	r3, [r2, #8]
 800192a:	491c      	ldr	r1, [pc, #112]	@ (800199c <UART_AdvFeatureConfig+0xcc>)
 800192c:	400b      	ands	r3, r1
 800192e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8001930:	430b      	orrs	r3, r1
 8001932:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001934:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001936:	069b      	lsls	r3, r3, #26
 8001938:	d506      	bpl.n	8001948 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800193a:	6802      	ldr	r2, [r0, #0]
 800193c:	6893      	ldr	r3, [r2, #8]
 800193e:	4918      	ldr	r1, [pc, #96]	@ (80019a0 <UART_AdvFeatureConfig+0xd0>)
 8001940:	400b      	ands	r3, r1
 8001942:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8001944:	430b      	orrs	r3, r1
 8001946:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001948:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800194a:	065b      	lsls	r3, r3, #25
 800194c:	d50b      	bpl.n	8001966 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800194e:	6802      	ldr	r2, [r0, #0]
 8001950:	6853      	ldr	r3, [r2, #4]
 8001952:	4914      	ldr	r1, [pc, #80]	@ (80019a4 <UART_AdvFeatureConfig+0xd4>)
 8001954:	400b      	ands	r3, r1
 8001956:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001958:	430b      	orrs	r3, r1
 800195a:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800195c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800195e:	2380      	movs	r3, #128	@ 0x80
 8001960:	035b      	lsls	r3, r3, #13
 8001962:	429a      	cmp	r2, r3
 8001964:	d00a      	beq.n	800197c <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001966:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8001968:	061b      	lsls	r3, r3, #24
 800196a:	d506      	bpl.n	800197a <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800196c:	6802      	ldr	r2, [r0, #0]
 800196e:	6853      	ldr	r3, [r2, #4]
 8001970:	490d      	ldr	r1, [pc, #52]	@ (80019a8 <UART_AdvFeatureConfig+0xd8>)
 8001972:	400b      	ands	r3, r1
 8001974:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8001976:	430b      	orrs	r3, r1
 8001978:	6053      	str	r3, [r2, #4]
}
 800197a:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800197c:	6802      	ldr	r2, [r0, #0]
 800197e:	6853      	ldr	r3, [r2, #4]
 8001980:	490a      	ldr	r1, [pc, #40]	@ (80019ac <UART_AdvFeatureConfig+0xdc>)
 8001982:	400b      	ands	r3, r1
 8001984:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8001986:	430b      	orrs	r3, r1
 8001988:	6053      	str	r3, [r2, #4]
 800198a:	e7ec      	b.n	8001966 <UART_AdvFeatureConfig+0x96>
 800198c:	ffff7fff 	.word	0xffff7fff
 8001990:	fffdffff 	.word	0xfffdffff
 8001994:	fffeffff 	.word	0xfffeffff
 8001998:	fffbffff 	.word	0xfffbffff
 800199c:	ffffefff 	.word	0xffffefff
 80019a0:	ffffdfff 	.word	0xffffdfff
 80019a4:	ffefffff 	.word	0xffefffff
 80019a8:	fff7ffff 	.word	0xfff7ffff
 80019ac:	ff9fffff 	.word	0xff9fffff

080019b0 <UART_WaitOnFlagUntilTimeout>:
{
 80019b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019b2:	46ce      	mov	lr, r9
 80019b4:	4647      	mov	r7, r8
 80019b6:	b580      	push	{r7, lr}
 80019b8:	0006      	movs	r6, r0
 80019ba:	000d      	movs	r5, r1
 80019bc:	0017      	movs	r7, r2
 80019be:	4699      	mov	r9, r3
 80019c0:	9b08      	ldr	r3, [sp, #32]
 80019c2:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019c4:	6833      	ldr	r3, [r6, #0]
 80019c6:	69dc      	ldr	r4, [r3, #28]
 80019c8:	402c      	ands	r4, r5
 80019ca:	1b64      	subs	r4, r4, r5
 80019cc:	4263      	negs	r3, r4
 80019ce:	415c      	adcs	r4, r3
 80019d0:	42bc      	cmp	r4, r7
 80019d2:	d133      	bne.n	8001a3c <UART_WaitOnFlagUntilTimeout+0x8c>
    if (Timeout != HAL_MAX_DELAY)
 80019d4:	4643      	mov	r3, r8
 80019d6:	3301      	adds	r3, #1
 80019d8:	d0f4      	beq.n	80019c4 <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019da:	f7fe fda7 	bl	800052c <HAL_GetTick>
 80019de:	464b      	mov	r3, r9
 80019e0:	1ac0      	subs	r0, r0, r3
 80019e2:	4540      	cmp	r0, r8
 80019e4:	d82f      	bhi.n	8001a46 <UART_WaitOnFlagUntilTimeout+0x96>
 80019e6:	4643      	mov	r3, r8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d02e      	beq.n	8001a4a <UART_WaitOnFlagUntilTimeout+0x9a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80019ec:	6832      	ldr	r2, [r6, #0]
 80019ee:	6813      	ldr	r3, [r2, #0]
 80019f0:	075b      	lsls	r3, r3, #29
 80019f2:	d5e7      	bpl.n	80019c4 <UART_WaitOnFlagUntilTimeout+0x14>
 80019f4:	2d80      	cmp	r5, #128	@ 0x80
 80019f6:	d0e5      	beq.n	80019c4 <UART_WaitOnFlagUntilTimeout+0x14>
 80019f8:	2d40      	cmp	r5, #64	@ 0x40
 80019fa:	d0e3      	beq.n	80019c4 <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80019fc:	69d3      	ldr	r3, [r2, #28]
 80019fe:	071b      	lsls	r3, r3, #28
 8001a00:	d410      	bmi.n	8001a24 <UART_WaitOnFlagUntilTimeout+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001a02:	69d3      	ldr	r3, [r2, #28]
 8001a04:	051b      	lsls	r3, r3, #20
 8001a06:	d5dd      	bpl.n	80019c4 <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	011b      	lsls	r3, r3, #4
 8001a0c:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8001a0e:	0030      	movs	r0, r6
 8001a10:	f7ff fe4a 	bl	80016a8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001a14:	2384      	movs	r3, #132	@ 0x84
 8001a16:	2220      	movs	r2, #32
 8001a18:	50f2      	str	r2, [r6, r3]
          __HAL_UNLOCK(huart);
 8001a1a:	3b0c      	subs	r3, #12
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8001a20:	2003      	movs	r0, #3
 8001a22:	e00c      	b.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001a24:	2408      	movs	r4, #8
 8001a26:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8001a28:	0030      	movs	r0, r6
 8001a2a:	f7ff fe3d 	bl	80016a8 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a2e:	2384      	movs	r3, #132	@ 0x84
 8001a30:	50f4      	str	r4, [r6, r3]
          __HAL_UNLOCK(huart);
 8001a32:	3b0c      	subs	r3, #12
 8001a34:	2200      	movs	r2, #0
 8001a36:	54f2      	strb	r2, [r6, r3]
          return HAL_ERROR;
 8001a38:	2001      	movs	r0, #1
 8001a3a:	e000      	b.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x8e>
  return HAL_OK;
 8001a3c:	2000      	movs	r0, #0
}
 8001a3e:	bcc0      	pop	{r6, r7}
 8001a40:	46b9      	mov	r9, r7
 8001a42:	46b0      	mov	r8, r6
 8001a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8001a46:	2003      	movs	r0, #3
 8001a48:	e7f9      	b.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x8e>
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	e7f7      	b.n	8001a3e <UART_WaitOnFlagUntilTimeout+0x8e>
	...

08001a50 <UART_CheckIdleState>:
{
 8001a50:	b530      	push	{r4, r5, lr}
 8001a52:	b083      	sub	sp, #12
 8001a54:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a56:	2384      	movs	r3, #132	@ 0x84
 8001a58:	2200      	movs	r2, #0
 8001a5a:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001a5c:	f7fe fd66 	bl	800052c <HAL_GetTick>
 8001a60:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001a62:	6823      	ldr	r3, [r4, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	071b      	lsls	r3, r3, #28
 8001a68:	d40f      	bmi.n	8001a8a <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	075b      	lsls	r3, r3, #29
 8001a70:	d429      	bmi.n	8001ac6 <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8001a72:	2320      	movs	r3, #32
 8001a74:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001a76:	2280      	movs	r2, #128	@ 0x80
 8001a78:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	6623      	str	r3, [r4, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a7e:	6663      	str	r3, [r4, #100]	@ 0x64
  __HAL_UNLOCK(huart);
 8001a80:	3a08      	subs	r2, #8
 8001a82:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001a84:	2000      	movs	r0, #0
}
 8001a86:	b003      	add	sp, #12
 8001a88:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <UART_CheckIdleState+0xc8>)
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	0003      	movs	r3, r0
 8001a92:	2200      	movs	r2, #0
 8001a94:	0389      	lsls	r1, r1, #14
 8001a96:	0020      	movs	r0, r4
 8001a98:	f7ff ff8a 	bl	80019b0 <UART_WaitOnFlagUntilTimeout>
 8001a9c:	2800      	cmp	r0, #0
 8001a9e:	d0e4      	beq.n	8001a6a <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001aa0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8001aaa:	6822      	ldr	r2, [r4, #0]
 8001aac:	6813      	ldr	r3, [r2, #0]
 8001aae:	2080      	movs	r0, #128	@ 0x80
 8001ab0:	4383      	bics	r3, r0
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8001ab8:	2320      	movs	r3, #32
 8001aba:	67e3      	str	r3, [r4, #124]	@ 0x7c
      __HAL_UNLOCK(huart);
 8001abc:	3358      	adds	r3, #88	@ 0x58
 8001abe:	2200      	movs	r2, #0
 8001ac0:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001ac2:	387d      	subs	r0, #125	@ 0x7d
 8001ac4:	e7df      	b.n	8001a86 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <UART_CheckIdleState+0xc8>)
 8001aca:	9300      	str	r3, [sp, #0]
 8001acc:	002b      	movs	r3, r5
 8001ace:	2200      	movs	r2, #0
 8001ad0:	03c9      	lsls	r1, r1, #15
 8001ad2:	0020      	movs	r0, r4
 8001ad4:	f7ff ff6c 	bl	80019b0 <UART_WaitOnFlagUntilTimeout>
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	d0ca      	beq.n	8001a72 <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001adc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ae6:	6821      	ldr	r1, [r4, #0]
 8001ae8:	680b      	ldr	r3, [r1, #0]
 8001aea:	4d0c      	ldr	r5, [pc, #48]	@ (8001b1c <UART_CheckIdleState+0xcc>)
 8001aec:	402b      	ands	r3, r5
 8001aee:	600b      	str	r3, [r1, #0]
 8001af0:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001af4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001af8:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001afc:	6821      	ldr	r1, [r4, #0]
 8001afe:	688b      	ldr	r3, [r1, #8]
 8001b00:	4393      	bics	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
 8001b04:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	321f      	adds	r2, #31
 8001b0c:	50e2      	str	r2, [r4, r3]
      __HAL_UNLOCK(huart);
 8001b0e:	3b08      	subs	r3, #8
 8001b10:	2200      	movs	r2, #0
 8001b12:	54e2      	strb	r2, [r4, r3]
      return HAL_TIMEOUT;
 8001b14:	2003      	movs	r0, #3
 8001b16:	e7b6      	b.n	8001a86 <UART_CheckIdleState+0x36>
 8001b18:	01ffffff 	.word	0x01ffffff
 8001b1c:	fffffedf 	.word	0xfffffedf

08001b20 <HAL_UART_Init>:
{
 8001b20:	b510      	push	{r4, lr}
 8001b22:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001b24:	d02e      	beq.n	8001b84 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001b26:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d021      	beq.n	8001b70 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001b2c:	2324      	movs	r3, #36	@ 0x24
 8001b2e:	67e3      	str	r3, [r4, #124]	@ 0x7c
  __HAL_UART_DISABLE(huart);
 8001b30:	6822      	ldr	r2, [r4, #0]
 8001b32:	6813      	ldr	r3, [r2, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	438b      	bics	r3, r1
 8001b38:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d11d      	bne.n	8001b7c <HAL_UART_Init+0x5c>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b40:	0020      	movs	r0, r4
 8001b42:	f7ff fde1 	bl	8001708 <UART_SetConfig>
 8001b46:	2801      	cmp	r0, #1
 8001b48:	d011      	beq.n	8001b6e <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4a:	6822      	ldr	r2, [r4, #0]
 8001b4c:	6853      	ldr	r3, [r2, #4]
 8001b4e:	490e      	ldr	r1, [pc, #56]	@ (8001b88 <HAL_UART_Init+0x68>)
 8001b50:	400b      	ands	r3, r1
 8001b52:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b54:	6822      	ldr	r2, [r4, #0]
 8001b56:	6893      	ldr	r3, [r2, #8]
 8001b58:	212a      	movs	r1, #42	@ 0x2a
 8001b5a:	438b      	bics	r3, r1
 8001b5c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001b5e:	6822      	ldr	r2, [r4, #0]
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	3929      	subs	r1, #41	@ 0x29
 8001b64:	430b      	orrs	r3, r1
 8001b66:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001b68:	0020      	movs	r0, r4
 8001b6a:	f7ff ff71 	bl	8001a50 <UART_CheckIdleState>
}
 8001b6e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b70:	3378      	adds	r3, #120	@ 0x78
 8001b72:	2200      	movs	r2, #0
 8001b74:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001b76:	f7fe fe97 	bl	80008a8 <HAL_UART_MspInit>
 8001b7a:	e7d7      	b.n	8001b2c <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001b7c:	0020      	movs	r0, r4
 8001b7e:	f7ff fea7 	bl	80018d0 <UART_AdvFeatureConfig>
 8001b82:	e7dd      	b.n	8001b40 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 8001b84:	2001      	movs	r0, #1
 8001b86:	e7f2      	b.n	8001b6e <HAL_UART_Init+0x4e>
 8001b88:	ffffb7ff 	.word	0xffffb7ff

08001b8c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b8c:	e7fe      	b.n	8001b8c <NMI_Handler>

08001b8e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8e:	e7fe      	b.n	8001b8e <HardFault_Handler>

08001b90 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b90:	4770      	bx	lr

08001b92 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	4770      	bx	lr

08001b94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b96:	f7fe fcbd 	bl	8000514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b9a:	bd10      	pop	{r4, pc}

08001b9c <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001b9c:	4770      	bx	lr
	...

08001ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ba0:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001ba2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ba4:	f7ff fffa 	bl	8001b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba8:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001baa:	490d      	ldr	r1, [pc, #52]	@ (8001be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bac:	4a0d      	ldr	r2, [pc, #52]	@ (8001be4 <LoopForever+0xe>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001bec <LoopForever+0x16>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bce:	f000 f819 	bl	8001c04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd2:	f7fe fc31 	bl	8000438 <main>

08001bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001bd6:	e7fe      	b.n	8001bd6 <LoopForever>
  ldr   r0, =_estack
 8001bd8:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001be4:	08001ca4 	.word	0x08001ca4
  ldr r2, =_sbss
 8001be8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bec:	2000017c 	.word	0x2000017c

08001bf0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bf0:	e7fe      	b.n	8001bf0 <ADC1_COMP_IRQHandler>

08001bf2 <memset>:
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	1882      	adds	r2, r0, r2
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d100      	bne.n	8001bfc <memset+0xa>
 8001bfa:	4770      	bx	lr
 8001bfc:	7019      	strb	r1, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	e7f9      	b.n	8001bf6 <memset+0x4>
	...

08001c04 <__libc_init_array>:
 8001c04:	b570      	push	{r4, r5, r6, lr}
 8001c06:	2600      	movs	r6, #0
 8001c08:	4c0c      	ldr	r4, [pc, #48]	@ (8001c3c <__libc_init_array+0x38>)
 8001c0a:	4d0d      	ldr	r5, [pc, #52]	@ (8001c40 <__libc_init_array+0x3c>)
 8001c0c:	1b64      	subs	r4, r4, r5
 8001c0e:	10a4      	asrs	r4, r4, #2
 8001c10:	42a6      	cmp	r6, r4
 8001c12:	d109      	bne.n	8001c28 <__libc_init_array+0x24>
 8001c14:	2600      	movs	r6, #0
 8001c16:	f000 f819 	bl	8001c4c <_init>
 8001c1a:	4c0a      	ldr	r4, [pc, #40]	@ (8001c44 <__libc_init_array+0x40>)
 8001c1c:	4d0a      	ldr	r5, [pc, #40]	@ (8001c48 <__libc_init_array+0x44>)
 8001c1e:	1b64      	subs	r4, r4, r5
 8001c20:	10a4      	asrs	r4, r4, #2
 8001c22:	42a6      	cmp	r6, r4
 8001c24:	d105      	bne.n	8001c32 <__libc_init_array+0x2e>
 8001c26:	bd70      	pop	{r4, r5, r6, pc}
 8001c28:	00b3      	lsls	r3, r6, #2
 8001c2a:	58eb      	ldr	r3, [r5, r3]
 8001c2c:	4798      	blx	r3
 8001c2e:	3601      	adds	r6, #1
 8001c30:	e7ee      	b.n	8001c10 <__libc_init_array+0xc>
 8001c32:	00b3      	lsls	r3, r6, #2
 8001c34:	58eb      	ldr	r3, [r5, r3]
 8001c36:	4798      	blx	r3
 8001c38:	3601      	adds	r6, #1
 8001c3a:	e7f2      	b.n	8001c22 <__libc_init_array+0x1e>
 8001c3c:	08001c9c 	.word	0x08001c9c
 8001c40:	08001c9c 	.word	0x08001c9c
 8001c44:	08001ca0 	.word	0x08001ca0
 8001c48:	08001c9c 	.word	0x08001c9c

08001c4c <_init>:
 8001c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4e:	46c0      	nop			@ (mov r8, r8)
 8001c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c52:	bc08      	pop	{r3}
 8001c54:	469e      	mov	lr, r3
 8001c56:	4770      	bx	lr

08001c58 <_fini>:
 8001c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c5a:	46c0      	nop			@ (mov r8, r8)
 8001c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5e:	bc08      	pop	{r3}
 8001c60:	469e      	mov	lr, r3
 8001c62:	4770      	bx	lr
