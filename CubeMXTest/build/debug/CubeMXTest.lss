
build/debug/CubeMXTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018b8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001978  08001978  00002978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080019ac  080019ac  000029ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080019b0  080019b0  000029b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080019b4  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000088  20000010  080019c4  00003010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000098  080019c4  00003098  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00003010  2**0
                  CONTENTS, READONLY
  9 .comment      00000039  00000000  00000000  00003038  2**0
                  CONTENTS, READONLY
 10 .debug_info   00005cd0  00000000  00000000  00003071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001324  00000000  00000000  00008d41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loclists 000024dd  00000000  00000000  0000a065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000568  00000000  00000000  0000c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000003e3  00000000  00000000  0000cab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000058d7  00000000  00000000  0000ce93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00001af7  00000000  00000000  0001276a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00000c78  00000000  00000000  00014264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000016f  00000000  00000000  00014edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__udivsi3>:
 80000c0:	2200      	movs	r2, #0
 80000c2:	0843      	lsrs	r3, r0, #1
 80000c4:	428b      	cmp	r3, r1
 80000c6:	d374      	bcc.n	80001b2 <__udivsi3+0xf2>
 80000c8:	0903      	lsrs	r3, r0, #4
 80000ca:	428b      	cmp	r3, r1
 80000cc:	d35f      	bcc.n	800018e <__udivsi3+0xce>
 80000ce:	0a03      	lsrs	r3, r0, #8
 80000d0:	428b      	cmp	r3, r1
 80000d2:	d344      	bcc.n	800015e <__udivsi3+0x9e>
 80000d4:	0b03      	lsrs	r3, r0, #12
 80000d6:	428b      	cmp	r3, r1
 80000d8:	d328      	bcc.n	800012c <__udivsi3+0x6c>
 80000da:	0c03      	lsrs	r3, r0, #16
 80000dc:	428b      	cmp	r3, r1
 80000de:	d30d      	bcc.n	80000fc <__udivsi3+0x3c>
 80000e0:	22ff      	movs	r2, #255	@ 0xff
 80000e2:	0209      	lsls	r1, r1, #8
 80000e4:	ba12      	rev	r2, r2
 80000e6:	0c03      	lsrs	r3, r0, #16
 80000e8:	428b      	cmp	r3, r1
 80000ea:	d302      	bcc.n	80000f2 <__udivsi3+0x32>
 80000ec:	1212      	asrs	r2, r2, #8
 80000ee:	0209      	lsls	r1, r1, #8
 80000f0:	d065      	beq.n	80001be <__udivsi3+0xfe>
 80000f2:	0b03      	lsrs	r3, r0, #12
 80000f4:	428b      	cmp	r3, r1
 80000f6:	d319      	bcc.n	800012c <__udivsi3+0x6c>
 80000f8:	e000      	b.n	80000fc <__udivsi3+0x3c>
 80000fa:	0a09      	lsrs	r1, r1, #8
 80000fc:	0bc3      	lsrs	r3, r0, #15
 80000fe:	428b      	cmp	r3, r1
 8000100:	d301      	bcc.n	8000106 <__udivsi3+0x46>
 8000102:	03cb      	lsls	r3, r1, #15
 8000104:	1ac0      	subs	r0, r0, r3
 8000106:	4152      	adcs	r2, r2
 8000108:	0b83      	lsrs	r3, r0, #14
 800010a:	428b      	cmp	r3, r1
 800010c:	d301      	bcc.n	8000112 <__udivsi3+0x52>
 800010e:	038b      	lsls	r3, r1, #14
 8000110:	1ac0      	subs	r0, r0, r3
 8000112:	4152      	adcs	r2, r2
 8000114:	0b43      	lsrs	r3, r0, #13
 8000116:	428b      	cmp	r3, r1
 8000118:	d301      	bcc.n	800011e <__udivsi3+0x5e>
 800011a:	034b      	lsls	r3, r1, #13
 800011c:	1ac0      	subs	r0, r0, r3
 800011e:	4152      	adcs	r2, r2
 8000120:	0b03      	lsrs	r3, r0, #12
 8000122:	428b      	cmp	r3, r1
 8000124:	d301      	bcc.n	800012a <__udivsi3+0x6a>
 8000126:	030b      	lsls	r3, r1, #12
 8000128:	1ac0      	subs	r0, r0, r3
 800012a:	4152      	adcs	r2, r2
 800012c:	0ac3      	lsrs	r3, r0, #11
 800012e:	428b      	cmp	r3, r1
 8000130:	d301      	bcc.n	8000136 <__udivsi3+0x76>
 8000132:	02cb      	lsls	r3, r1, #11
 8000134:	1ac0      	subs	r0, r0, r3
 8000136:	4152      	adcs	r2, r2
 8000138:	0a83      	lsrs	r3, r0, #10
 800013a:	428b      	cmp	r3, r1
 800013c:	d301      	bcc.n	8000142 <__udivsi3+0x82>
 800013e:	028b      	lsls	r3, r1, #10
 8000140:	1ac0      	subs	r0, r0, r3
 8000142:	4152      	adcs	r2, r2
 8000144:	0a43      	lsrs	r3, r0, #9
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x8e>
 800014a:	024b      	lsls	r3, r1, #9
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0a03      	lsrs	r3, r0, #8
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x9a>
 8000156:	020b      	lsls	r3, r1, #8
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	d2cd      	bcs.n	80000fa <__udivsi3+0x3a>
 800015e:	09c3      	lsrs	r3, r0, #7
 8000160:	428b      	cmp	r3, r1
 8000162:	d301      	bcc.n	8000168 <__udivsi3+0xa8>
 8000164:	01cb      	lsls	r3, r1, #7
 8000166:	1ac0      	subs	r0, r0, r3
 8000168:	4152      	adcs	r2, r2
 800016a:	0983      	lsrs	r3, r0, #6
 800016c:	428b      	cmp	r3, r1
 800016e:	d301      	bcc.n	8000174 <__udivsi3+0xb4>
 8000170:	018b      	lsls	r3, r1, #6
 8000172:	1ac0      	subs	r0, r0, r3
 8000174:	4152      	adcs	r2, r2
 8000176:	0943      	lsrs	r3, r0, #5
 8000178:	428b      	cmp	r3, r1
 800017a:	d301      	bcc.n	8000180 <__udivsi3+0xc0>
 800017c:	014b      	lsls	r3, r1, #5
 800017e:	1ac0      	subs	r0, r0, r3
 8000180:	4152      	adcs	r2, r2
 8000182:	0903      	lsrs	r3, r0, #4
 8000184:	428b      	cmp	r3, r1
 8000186:	d301      	bcc.n	800018c <__udivsi3+0xcc>
 8000188:	010b      	lsls	r3, r1, #4
 800018a:	1ac0      	subs	r0, r0, r3
 800018c:	4152      	adcs	r2, r2
 800018e:	08c3      	lsrs	r3, r0, #3
 8000190:	428b      	cmp	r3, r1
 8000192:	d301      	bcc.n	8000198 <__udivsi3+0xd8>
 8000194:	00cb      	lsls	r3, r1, #3
 8000196:	1ac0      	subs	r0, r0, r3
 8000198:	4152      	adcs	r2, r2
 800019a:	0883      	lsrs	r3, r0, #2
 800019c:	428b      	cmp	r3, r1
 800019e:	d301      	bcc.n	80001a4 <__udivsi3+0xe4>
 80001a0:	008b      	lsls	r3, r1, #2
 80001a2:	1ac0      	subs	r0, r0, r3
 80001a4:	4152      	adcs	r2, r2
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xf0>
 80001ac:	004b      	lsls	r3, r1, #1
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	1a41      	subs	r1, r0, r1
 80001b4:	d200      	bcs.n	80001b8 <__udivsi3+0xf8>
 80001b6:	4601      	mov	r1, r0
 80001b8:	4152      	adcs	r2, r2
 80001ba:	4610      	mov	r0, r2
 80001bc:	4770      	bx	lr
 80001be:	e7ff      	b.n	80001c0 <__udivsi3+0x100>
 80001c0:	b501      	push	{r0, lr}
 80001c2:	2000      	movs	r0, #0
 80001c4:	f000 f806 	bl	80001d4 <__aeabi_idiv0>
 80001c8:	bd02      	pop	{r1, pc}
 80001ca:	46c0      	nop			@ (mov r8, r8)

080001cc <__aeabi_uidivmod>:
 80001cc:	2900      	cmp	r1, #0
 80001ce:	d0f7      	beq.n	80001c0 <__udivsi3+0x100>
 80001d0:	e776      	b.n	80000c0 <__udivsi3>
 80001d2:	4770      	bx	lr

080001d4 <__aeabi_idiv0>:
 80001d4:	4770      	bx	lr
 80001d6:	46c0      	nop			@ (mov r8, r8)

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c06      	ldr	r4, [pc, #24]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d107      	bne.n	80001f2 <__do_global_dtors_aux+0x1a>
 80001e2:	4b05      	ldr	r3, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d002      	beq.n	80001ee <__do_global_dtors_aux+0x16>
 80001e8:	4804      	ldr	r0, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x24>)
 80001ea:	e000      	b.n	80001ee <__do_global_dtors_aux+0x16>
 80001ec:	bf00      	nop
 80001ee:	2301      	movs	r3, #1
 80001f0:	7023      	strb	r3, [r4, #0]
 80001f2:	bd10      	pop	{r4, pc}
 80001f4:	20000010 	.word	0x20000010
 80001f8:	00000000 	.word	0x00000000
 80001fc:	08001960 	.word	0x08001960

08000200 <frame_dummy>:
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <frame_dummy+0x14>)
 8000202:	b510      	push	{r4, lr}
 8000204:	2b00      	cmp	r3, #0
 8000206:	d003      	beq.n	8000210 <frame_dummy+0x10>
 8000208:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x18>)
 800020a:	4804      	ldr	r0, [pc, #16]	@ (800021c <frame_dummy+0x1c>)
 800020c:	e000      	b.n	8000210 <frame_dummy+0x10>
 800020e:	bf00      	nop
 8000210:	bd10      	pop	{r4, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08001960 	.word	0x08001960

08000220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	46c6      	mov	lr, r8
 8000224:	b500      	push	{lr}
 8000226:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000228:	ac03      	add	r4, sp, #12
 800022a:	2214      	movs	r2, #20
 800022c:	2100      	movs	r1, #0
 800022e:	0020      	movs	r0, r4
 8000230:	f001 fb69 	bl	8001906 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000234:	4b20      	ldr	r3, [pc, #128]	@ (80002b8 <MX_GPIO_Init+0x98>)
 8000236:	695a      	ldr	r2, [r3, #20]
 8000238:	2180      	movs	r1, #128	@ 0x80
 800023a:	0309      	lsls	r1, r1, #12
 800023c:	430a      	orrs	r2, r1
 800023e:	615a      	str	r2, [r3, #20]
 8000240:	695a      	ldr	r2, [r3, #20]
 8000242:	400a      	ands	r2, r1
 8000244:	9200      	str	r2, [sp, #0]
 8000246:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	2180      	movs	r1, #128	@ 0x80
 800024c:	0289      	lsls	r1, r1, #10
 800024e:	430a      	orrs	r2, r1
 8000250:	615a      	str	r2, [r3, #20]
 8000252:	695a      	ldr	r2, [r3, #20]
 8000254:	400a      	ands	r2, r1
 8000256:	9201      	str	r2, [sp, #4]
 8000258:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800025a:	695a      	ldr	r2, [r3, #20]
 800025c:	2180      	movs	r1, #128	@ 0x80
 800025e:	02c9      	lsls	r1, r1, #11
 8000260:	430a      	orrs	r2, r1
 8000262:	615a      	str	r2, [r3, #20]
 8000264:	695b      	ldr	r3, [r3, #20]
 8000266:	400b      	ands	r3, r1
 8000268:	9302      	str	r3, [sp, #8]
 800026a:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800026c:	2580      	movs	r5, #128	@ 0x80
 800026e:	01ad      	lsls	r5, r5, #6
 8000270:	4b12      	ldr	r3, [pc, #72]	@ (80002bc <MX_GPIO_Init+0x9c>)
 8000272:	4698      	mov	r8, r3
 8000274:	2200      	movs	r2, #0
 8000276:	0029      	movs	r1, r5
 8000278:	0018      	movs	r0, r3
 800027a:	f000 fa75 	bl	8000768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_SET);
 800027e:	4e10      	ldr	r6, [pc, #64]	@ (80002c0 <MX_GPIO_Init+0xa0>)
 8000280:	2201      	movs	r2, #1
 8000282:	2106      	movs	r1, #6
 8000284:	0030      	movs	r0, r6
 8000286:	f000 fa6f 	bl	8000768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800028a:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800028c:	2701      	movs	r7, #1
 800028e:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000290:	2500      	movs	r5, #0
 8000292:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000294:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000296:	0021      	movs	r1, r4
 8000298:	4640      	mov	r0, r8
 800029a:	f000 f999 	bl	80005d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800029e:	2306      	movs	r3, #6
 80002a0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a2:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a6:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a8:	0021      	movs	r1, r4
 80002aa:	0030      	movs	r0, r6
 80002ac:	f000 f990 	bl	80005d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002b0:	b008      	add	sp, #32
 80002b2:	bc80      	pop	{r7}
 80002b4:	46b8      	mov	r8, r7
 80002b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002b8:	40021000 	.word	0x40021000
 80002bc:	48000800 	.word	0x48000800
 80002c0:	48000400 	.word	0x48000400

080002c4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002c6:	e7fe      	b.n	80002c6 <Error_Handler+0x2>

080002c8 <MX_SPI1_Init>:
{
 80002c8:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80002ca:	4810      	ldr	r0, [pc, #64]	@ (800030c <MX_SPI1_Init+0x44>)
 80002cc:	4b10      	ldr	r3, [pc, #64]	@ (8000310 <MX_SPI1_Init+0x48>)
 80002ce:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002d0:	2382      	movs	r3, #130	@ 0x82
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002d6:	2300      	movs	r3, #0
 80002d8:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002da:	22e0      	movs	r2, #224	@ 0xe0
 80002dc:	00d2      	lsls	r2, r2, #3
 80002de:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002e0:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002e2:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0092      	lsls	r2, r2, #2
 80002e8:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002ea:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002ec:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ee:	6243      	str	r3, [r0, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002f0:	6283      	str	r3, [r0, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80002f2:	3afa      	subs	r2, #250	@ 0xfa
 80002f4:	3aff      	subs	r2, #255	@ 0xff
 80002f6:	62c2      	str	r2, [r0, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002f8:	6303      	str	r3, [r0, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002fa:	3308      	adds	r3, #8
 80002fc:	6343      	str	r3, [r0, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002fe:	f000 ff75 	bl	80011ec <HAL_SPI_Init>
 8000302:	2800      	cmp	r0, #0
 8000304:	d100      	bne.n	8000308 <MX_SPI1_Init+0x40>
}
 8000306:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000308:	f7ff ffdc 	bl	80002c4 <Error_Handler>
 800030c:	2000002c 	.word	0x2000002c
 8000310:	40013000 	.word	0x40013000

08000314 <SystemClock_Config>:
{
 8000314:	b510      	push	{r4, lr}
 8000316:	b092      	sub	sp, #72	@ 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000318:	ac05      	add	r4, sp, #20
 800031a:	2234      	movs	r2, #52	@ 0x34
 800031c:	2100      	movs	r1, #0
 800031e:	0020      	movs	r0, r4
 8000320:	f001 faf1 	bl	8001906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000324:	2210      	movs	r2, #16
 8000326:	2100      	movs	r1, #0
 8000328:	a801      	add	r0, sp, #4
 800032a:	f001 faec 	bl	8001906 <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032e:	2302      	movs	r3, #2
 8000330:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000332:	3b01      	subs	r3, #1
 8000334:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000336:	330f      	adds	r3, #15
 8000338:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	0020      	movs	r0, r4
 800033c:	f000 fa64 	bl	8000808 <HAL_RCC_OscConfig>
 8000340:	2800      	cmp	r0, #0
 8000342:	d10d      	bne.n	8000360 <SystemClock_Config+0x4c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	a801      	add	r0, sp, #4
 8000346:	2307      	movs	r3, #7
 8000348:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800034a:	2300      	movs	r3, #0
 800034c:	6043      	str	r3, [r0, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	6083      	str	r3, [r0, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000350:	60c3      	str	r3, [r0, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000352:	2100      	movs	r1, #0
 8000354:	f000 fd36 	bl	8000dc4 <HAL_RCC_ClockConfig>
 8000358:	2800      	cmp	r0, #0
 800035a:	d103      	bne.n	8000364 <SystemClock_Config+0x50>
}
 800035c:	b012      	add	sp, #72	@ 0x48
 800035e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000360:	f7ff ffb0 	bl	80002c4 <Error_Handler>
    Error_Handler();
 8000364:	f7ff ffae 	bl	80002c4 <Error_Handler>

08000368 <SRAM_WRITE>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

void SRAM_WRITE(uint8_t *data, uint8_t address[]) {
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	0005      	movs	r5, r0
 800036c:	000e      	movs	r6, r1
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800036e:	4f11      	ldr	r7, [pc, #68]	@ (80003b4 <SRAM_WRITE+0x4c>)
 8000370:	2200      	movs	r2, #0
 8000372:	2104      	movs	r1, #4
 8000374:	0038      	movs	r0, r7
 8000376:	f000 f9f7 	bl	8000768 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&CMD_WRITE_SRAM, 1, 100);
 800037a:	490f      	ldr	r1, [pc, #60]	@ (80003b8 <SRAM_WRITE+0x50>)
 800037c:	4c0f      	ldr	r4, [pc, #60]	@ (80003bc <SRAM_WRITE+0x54>)
 800037e:	2364      	movs	r3, #100	@ 0x64
 8000380:	2201      	movs	r2, #1
 8000382:	0020      	movs	r0, r4
 8000384:	f000 ffb4 	bl	80012f0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, address, 3, 100);
 8000388:	2364      	movs	r3, #100	@ 0x64
 800038a:	2203      	movs	r2, #3
 800038c:	0031      	movs	r1, r6
 800038e:	0020      	movs	r0, r4
 8000390:	f000 ffae 	bl	80012f0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, data, 1, 100);
 8000394:	2364      	movs	r3, #100	@ 0x64
 8000396:	2201      	movs	r2, #1
 8000398:	0029      	movs	r1, r5
 800039a:	0020      	movs	r0, r4
 800039c:	f000 ffa8 	bl	80012f0 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 80003a0:	2201      	movs	r2, #1
 80003a2:	2104      	movs	r1, #4
 80003a4:	0038      	movs	r0, r7
 80003a6:	f000 f9df 	bl	8000768 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80003aa:	2064      	movs	r0, #100	@ 0x64
 80003ac:	f000 f8aa 	bl	8000504 <HAL_Delay>
  return;
}
 80003b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003b2:	46c0      	nop			@ (mov r8, r8)
 80003b4:	48000400 	.word	0x48000400
 80003b8:	08001978 	.word	0x08001978
 80003bc:	2000002c 	.word	0x2000002c

080003c0 <SRAM_READ>:

uint8_t SRAM_READ(uint8_t address[]) {
 80003c0:	b570      	push	{r4, r5, r6, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	0005      	movs	r5, r0

  uint8_t data_back;
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80003c6:	4e16      	ldr	r6, [pc, #88]	@ (8000420 <SRAM_READ+0x60>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	2104      	movs	r1, #4
 80003cc:	0030      	movs	r0, r6
 80003ce:	f000 f9cb 	bl	8000768 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&CMD_READ_SRAM, 1, 100);
 80003d2:	4914      	ldr	r1, [pc, #80]	@ (8000424 <SRAM_READ+0x64>)
 80003d4:	4c14      	ldr	r4, [pc, #80]	@ (8000428 <SRAM_READ+0x68>)
 80003d6:	2364      	movs	r3, #100	@ 0x64
 80003d8:	2201      	movs	r2, #1
 80003da:	0020      	movs	r0, r4
 80003dc:	f000 ff88 	bl	80012f0 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, address, 3, 100);
 80003e0:	2364      	movs	r3, #100	@ 0x64
 80003e2:	2203      	movs	r2, #3
 80003e4:	0029      	movs	r1, r5
 80003e6:	0020      	movs	r0, r4
 80003e8:	f000 ff82 	bl	80012f0 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, &data_back, 1, 100);
 80003ec:	466b      	mov	r3, sp
 80003ee:	1ddd      	adds	r5, r3, #7
 80003f0:	2364      	movs	r3, #100	@ 0x64
 80003f2:	2201      	movs	r2, #1
 80003f4:	0029      	movs	r1, r5
 80003f6:	0020      	movs	r0, r4
 80003f8:	f001 f97c 	bl	80016f4 <HAL_SPI_Receive>
  HAL_SPI_Receive(&hspi1, &data_back, 1, 100);
 80003fc:	2364      	movs	r3, #100	@ 0x64
 80003fe:	2201      	movs	r2, #1
 8000400:	0029      	movs	r1, r5
 8000402:	0020      	movs	r0, r4
 8000404:	f001 f976 	bl	80016f4 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2104      	movs	r1, #4
 800040c:	0030      	movs	r0, r6
 800040e:	f000 f9ab 	bl	8000768 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000412:	2064      	movs	r0, #100	@ 0x64
 8000414:	f000 f876 	bl	8000504 <HAL_Delay>

  return data_back;
 8000418:	7828      	ldrb	r0, [r5, #0]
}
 800041a:	b002      	add	sp, #8
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	46c0      	nop			@ (mov r8, r8)
 8000420:	48000400 	.word	0x48000400
 8000424:	08001979 	.word	0x08001979
 8000428:	2000002c 	.word	0x2000002c

0800042c <main>:
{
 800042c:	b510      	push	{r4, lr}
  HAL_Init();
 800042e:	f000 f847 	bl	80004c0 <HAL_Init>
  SystemClock_Config();
 8000432:	f7ff ff6f 	bl	8000314 <SystemClock_Config>
  MX_GPIO_Init();
 8000436:	f7ff fef3 	bl	8000220 <MX_GPIO_Init>
  MX_SPI1_Init();
 800043a:	f7ff ff45 	bl	80002c8 <MX_SPI1_Init>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800043e:	2180      	movs	r1, #128	@ 0x80
 8000440:	2201      	movs	r2, #1
 8000442:	0189      	lsls	r1, r1, #6
 8000444:	4806      	ldr	r0, [pc, #24]	@ (8000460 <main+0x34>)
 8000446:	f000 f98f 	bl	8000768 <HAL_GPIO_WritePin>
     SRAM_WRITE(&data, address);
 800044a:	4c06      	ldr	r4, [pc, #24]	@ (8000464 <main+0x38>)
 800044c:	4806      	ldr	r0, [pc, #24]	@ (8000468 <main+0x3c>)
 800044e:	0021      	movs	r1, r4
 8000450:	f7ff ff8a 	bl	8000368 <SRAM_WRITE>
     read_data = SRAM_READ(address);
 8000454:	0020      	movs	r0, r4
 8000456:	f7ff ffb3 	bl	80003c0 <SRAM_READ>
 800045a:	4b04      	ldr	r3, [pc, #16]	@ (800046c <main+0x40>)
 800045c:	7018      	strb	r0, [r3, #0]
  while (1)
 800045e:	e7fe      	b.n	800045e <main+0x32>
 8000460:	48000800 	.word	0x48000800
 8000464:	20000000 	.word	0x20000000
 8000468:	20000003 	.word	0x20000003
 800046c:	20000090 	.word	0x20000090

08000470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000470:	b510      	push	{r4, lr}
 8000472:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <HAL_InitTick+0x44>)
 8000476:	7819      	ldrb	r1, [r3, #0]
 8000478:	20fa      	movs	r0, #250	@ 0xfa
 800047a:	0080      	lsls	r0, r0, #2
 800047c:	f7ff fe20 	bl	80000c0 <__udivsi3>
 8000480:	0001      	movs	r1, r0
 8000482:	4b0d      	ldr	r3, [pc, #52]	@ (80004b8 <HAL_InitTick+0x48>)
 8000484:	6818      	ldr	r0, [r3, #0]
 8000486:	f7ff fe1b 	bl	80000c0 <__udivsi3>
 800048a:	f000 f89d 	bl	80005c8 <HAL_SYSTICK_Config>
 800048e:	2800      	cmp	r0, #0
 8000490:	d10d      	bne.n	80004ae <HAL_InitTick+0x3e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000492:	2c03      	cmp	r4, #3
 8000494:	d901      	bls.n	800049a <HAL_InitTick+0x2a>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000496:	2001      	movs	r0, #1
 8000498:	e00a      	b.n	80004b0 <HAL_InitTick+0x40>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800049a:	3001      	adds	r0, #1
 800049c:	2200      	movs	r2, #0
 800049e:	0021      	movs	r1, r4
 80004a0:	4240      	negs	r0, r0
 80004a2:	f000 f88d 	bl	80005c0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004a6:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <HAL_InitTick+0x4c>)
 80004a8:	601c      	str	r4, [r3, #0]
  }

   /* Return function status */
  return HAL_OK;
 80004aa:	2000      	movs	r0, #0
 80004ac:	e000      	b.n	80004b0 <HAL_InitTick+0x40>
    return HAL_ERROR;
 80004ae:	2001      	movs	r0, #1
}
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	20000004 	.word	0x20000004
 80004b8:	2000000c 	.word	0x2000000c
 80004bc:	20000008 	.word	0x20000008

080004c0 <HAL_Init>:
{
 80004c0:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004c2:	4a06      	ldr	r2, [pc, #24]	@ (80004dc <HAL_Init+0x1c>)
 80004c4:	6813      	ldr	r3, [r2, #0]
 80004c6:	2110      	movs	r1, #16
 80004c8:	430b      	orrs	r3, r1
 80004ca:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 80004cc:	2003      	movs	r0, #3
 80004ce:	f7ff ffcf 	bl	8000470 <HAL_InitTick>
  HAL_MspInit();
 80004d2:	f000 f94f 	bl	8000774 <HAL_MspInit>
}
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	40022000 	.word	0x40022000

080004e0 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80004e0:	4a03      	ldr	r2, [pc, #12]	@ (80004f0 <HAL_IncTick+0x10>)
 80004e2:	6811      	ldr	r1, [r2, #0]
 80004e4:	4b03      	ldr	r3, [pc, #12]	@ (80004f4 <HAL_IncTick+0x14>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	185b      	adds	r3, r3, r1
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	20000094 	.word	0x20000094
 80004f4:	20000004 	.word	0x20000004

080004f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80004f8:	4b01      	ldr	r3, [pc, #4]	@ (8000500 <HAL_GetTick+0x8>)
 80004fa:	6818      	ldr	r0, [r3, #0]
}
 80004fc:	4770      	bx	lr
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	20000094 	.word	0x20000094

08000504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000508:	f7ff fff6 	bl	80004f8 <HAL_GetTick>
 800050c:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800050e:	1c63      	adds	r3, r4, #1
 8000510:	d002      	beq.n	8000518 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000512:	4b04      	ldr	r3, [pc, #16]	@ (8000524 <HAL_Delay+0x20>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000518:	f7ff ffee 	bl	80004f8 <HAL_GetTick>
 800051c:	1b40      	subs	r0, r0, r5
 800051e:	42a0      	cmp	r0, r4
 8000520:	d3fa      	bcc.n	8000518 <HAL_Delay+0x14>
  {
  }
}
 8000522:	bd70      	pop	{r4, r5, r6, pc}
 8000524:	20000004 	.word	0x20000004

08000528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000528:	b570      	push	{r4, r5, r6, lr}
  if ((int32_t)(IRQn) >= 0)
 800052a:	2800      	cmp	r0, #0
 800052c:	db11      	blt.n	8000552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800052e:	0883      	lsrs	r3, r0, #2
 8000530:	4d13      	ldr	r5, [pc, #76]	@ (8000580 <__NVIC_SetPriority+0x58>)
 8000532:	33c0      	adds	r3, #192	@ 0xc0
 8000534:	009b      	lsls	r3, r3, #2
 8000536:	595c      	ldr	r4, [r3, r5]
 8000538:	2203      	movs	r2, #3
 800053a:	4010      	ands	r0, r2
 800053c:	00c0      	lsls	r0, r0, #3
 800053e:	32fc      	adds	r2, #252	@ 0xfc
 8000540:	0016      	movs	r6, r2
 8000542:	4086      	lsls	r6, r0
 8000544:	43b4      	bics	r4, r6
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000546:	0189      	lsls	r1, r1, #6
 8000548:	400a      	ands	r2, r1
 800054a:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800054c:	4322      	orrs	r2, r4
 800054e:	515a      	str	r2, [r3, r5]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000550:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000552:	230f      	movs	r3, #15
 8000554:	4003      	ands	r3, r0
 8000556:	3b08      	subs	r3, #8
 8000558:	089b      	lsrs	r3, r3, #2
 800055a:	3306      	adds	r3, #6
 800055c:	009b      	lsls	r3, r3, #2
 800055e:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <__NVIC_SetPriority+0x5c>)
 8000560:	4694      	mov	ip, r2
 8000562:	4463      	add	r3, ip
 8000564:	685c      	ldr	r4, [r3, #4]
 8000566:	2203      	movs	r2, #3
 8000568:	4010      	ands	r0, r2
 800056a:	00c0      	lsls	r0, r0, #3
 800056c:	32fc      	adds	r2, #252	@ 0xfc
 800056e:	0015      	movs	r5, r2
 8000570:	4085      	lsls	r5, r0
 8000572:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000574:	0189      	lsls	r1, r1, #6
 8000576:	400a      	ands	r2, r1
 8000578:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800057a:	4322      	orrs	r2, r4
 800057c:	605a      	str	r2, [r3, #4]
}
 800057e:	e7e7      	b.n	8000550 <__NVIC_SetPriority+0x28>
 8000580:	e000e100 	.word	0xe000e100
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <SysTick_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000588:	3801      	subs	r0, #1
 800058a:	2380      	movs	r3, #128	@ 0x80
 800058c:	045b      	lsls	r3, r3, #17
 800058e:	4298      	cmp	r0, r3
 8000590:	d20f      	bcs.n	80005b2 <SysTick_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000592:	4a09      	ldr	r2, [pc, #36]	@ (80005b8 <SysTick_Config+0x30>)
 8000594:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000596:	4809      	ldr	r0, [pc, #36]	@ (80005bc <SysTick_Config+0x34>)
 8000598:	6a03      	ldr	r3, [r0, #32]
 800059a:	021b      	lsls	r3, r3, #8
 800059c:	0a1b      	lsrs	r3, r3, #8
 800059e:	21c0      	movs	r1, #192	@ 0xc0
 80005a0:	0609      	lsls	r1, r1, #24
 80005a2:	430b      	orrs	r3, r1
 80005a4:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005a6:	2300      	movs	r3, #0
 80005a8:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005aa:	3307      	adds	r3, #7
 80005ac:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005ae:	2000      	movs	r0, #0
}
 80005b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005b2:	2001      	movs	r0, #1
 80005b4:	e7fc      	b.n	80005b0 <SysTick_Config+0x28>
 80005b6:	46c0      	nop			@ (mov r8, r8)
 80005b8:	e000e010 	.word	0xe000e010
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c0:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80005c2:	f7ff ffb1 	bl	8000528 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80005c6:	bd10      	pop	{r4, pc}

080005c8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80005c8:	b510      	push	{r4, lr}
   return SysTick_Config(TicksNumb);
 80005ca:	f7ff ffdd 	bl	8000588 <SysTick_Config>
}
 80005ce:	bd10      	pop	{r4, pc}

080005d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d2:	b083      	sub	sp, #12
  uint32_t position = 0x00u;
 80005d4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80005d6:	e056      	b.n	8000686 <HAL_GPIO_Init+0xb6>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80005d8:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80005da:	005f      	lsls	r7, r3, #1
 80005dc:	2403      	movs	r4, #3
 80005de:	40bc      	lsls	r4, r7
 80005e0:	43a6      	bics	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80005e2:	68cc      	ldr	r4, [r1, #12]
 80005e4:	40bc      	lsls	r4, r7
 80005e6:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80005e8:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005ea:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005ec:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80005ee:	684e      	ldr	r6, [r1, #4]
 80005f0:	0936      	lsrs	r6, r6, #4
 80005f2:	2201      	movs	r2, #1
 80005f4:	4032      	ands	r2, r6
 80005f6:	409a      	lsls	r2, r3
 80005f8:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80005fa:	6042      	str	r2, [r0, #4]
 80005fc:	e053      	b.n	80006a6 <HAL_GPIO_Init+0xd6>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80005fe:	08de      	lsrs	r6, r3, #3
 8000600:	3608      	adds	r6, #8
 8000602:	00b6      	lsls	r6, r6, #2
 8000604:	5837      	ldr	r7, [r6, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000606:	3205      	adds	r2, #5
 8000608:	401a      	ands	r2, r3
 800060a:	0092      	lsls	r2, r2, #2
 800060c:	240f      	movs	r4, #15
 800060e:	4094      	lsls	r4, r2
 8000610:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000612:	690c      	ldr	r4, [r1, #16]
 8000614:	4094      	lsls	r4, r2
 8000616:	0022      	movs	r2, r4
 8000618:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3u] = temp;
 800061a:	5032      	str	r2, [r6, r0]
 800061c:	e056      	b.n	80006cc <HAL_GPIO_Init+0xfc>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800061e:	2604      	movs	r6, #4
 8000620:	e000      	b.n	8000624 <HAL_GPIO_Init+0x54>
 8000622:	2600      	movs	r6, #0
 8000624:	40a6      	lsls	r6, r4
 8000626:	0034      	movs	r4, r6
 8000628:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800062a:	3202      	adds	r2, #2
 800062c:	0092      	lsls	r2, r2, #2
 800062e:	4e47      	ldr	r6, [pc, #284]	@ (800074c <HAL_GPIO_Init+0x17c>)
 8000630:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000632:	4a47      	ldr	r2, [pc, #284]	@ (8000750 <HAL_GPIO_Init+0x180>)
 8000634:	6897      	ldr	r7, [r2, #8]
        temp &= ~(iocurrent);
 8000636:	43ea      	mvns	r2, r5
 8000638:	003e      	movs	r6, r7
 800063a:	43ae      	bics	r6, r5
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800063c:	684c      	ldr	r4, [r1, #4]
 800063e:	02e4      	lsls	r4, r4, #11
 8000640:	d501      	bpl.n	8000646 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000642:	003e      	movs	r6, r7
 8000644:	432e      	orrs	r6, r5
        }
        EXTI->RTSR = temp;
 8000646:	4c42      	ldr	r4, [pc, #264]	@ (8000750 <HAL_GPIO_Init+0x180>)
 8000648:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 800064a:	68e7      	ldr	r7, [r4, #12]
        temp &= ~(iocurrent);
 800064c:	003e      	movs	r6, r7
 800064e:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000650:	684c      	ldr	r4, [r1, #4]
 8000652:	02a4      	lsls	r4, r4, #10
 8000654:	d501      	bpl.n	800065a <HAL_GPIO_Init+0x8a>
        {
          temp |= iocurrent;
 8000656:	003e      	movs	r6, r7
 8000658:	432e      	orrs	r6, r5
        }
        EXTI->FTSR = temp;
 800065a:	4c3d      	ldr	r4, [pc, #244]	@ (8000750 <HAL_GPIO_Init+0x180>)
 800065c:	60e6      	str	r6, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800065e:	6867      	ldr	r7, [r4, #4]
        temp &= ~(iocurrent);
 8000660:	003e      	movs	r6, r7
 8000662:	4016      	ands	r6, r2
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000664:	684c      	ldr	r4, [r1, #4]
 8000666:	03a4      	lsls	r4, r4, #14
 8000668:	d501      	bpl.n	800066e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 800066a:	003e      	movs	r6, r7
 800066c:	432e      	orrs	r6, r5
        }
        EXTI->EMR = temp;
 800066e:	4c38      	ldr	r4, [pc, #224]	@ (8000750 <HAL_GPIO_Init+0x180>)
 8000670:	6066      	str	r6, [r4, #4]

        temp = EXTI->IMR;
 8000672:	6826      	ldr	r6, [r4, #0]
        temp &= ~(iocurrent);
 8000674:	4032      	ands	r2, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000676:	684c      	ldr	r4, [r1, #4]
 8000678:	03e4      	lsls	r4, r4, #15
 800067a:	d501      	bpl.n	8000680 <HAL_GPIO_Init+0xb0>
        {
          temp |= iocurrent;
 800067c:	002a      	movs	r2, r5
 800067e:	4332      	orrs	r2, r6
        }
        EXTI->IMR = temp;
 8000680:	4c33      	ldr	r4, [pc, #204]	@ (8000750 <HAL_GPIO_Init+0x180>)
 8000682:	6022      	str	r2, [r4, #0]
      }
    }

    position++;
 8000684:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000686:	680c      	ldr	r4, [r1, #0]
 8000688:	0022      	movs	r2, r4
 800068a:	40da      	lsrs	r2, r3
 800068c:	d05b      	beq.n	8000746 <HAL_GPIO_Init+0x176>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800068e:	2201      	movs	r2, #1
 8000690:	409a      	lsls	r2, r3
 8000692:	0025      	movs	r5, r4
 8000694:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8000696:	4214      	tst	r4, r2
 8000698:	d0f4      	beq.n	8000684 <HAL_GPIO_Init+0xb4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800069a:	684e      	ldr	r6, [r1, #4]
 800069c:	2403      	movs	r4, #3
 800069e:	4034      	ands	r4, r6
 80006a0:	3c01      	subs	r4, #1
 80006a2:	2c01      	cmp	r4, #1
 80006a4:	d998      	bls.n	80005d8 <HAL_GPIO_Init+0x8>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80006a6:	684c      	ldr	r4, [r1, #4]
 80006a8:	2203      	movs	r2, #3
 80006aa:	4022      	ands	r2, r4
 80006ac:	2a03      	cmp	r2, #3
 80006ae:	d008      	beq.n	80006c2 <HAL_GPIO_Init+0xf2>
        temp = GPIOx->PUPDR;
 80006b0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80006b2:	005e      	lsls	r6, r3, #1
 80006b4:	2203      	movs	r2, #3
 80006b6:	40b2      	lsls	r2, r6
 80006b8:	4394      	bics	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80006ba:	688a      	ldr	r2, [r1, #8]
 80006bc:	40b2      	lsls	r2, r6
 80006be:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80006c0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006c2:	684c      	ldr	r4, [r1, #4]
 80006c4:	2203      	movs	r2, #3
 80006c6:	4022      	ands	r2, r4
 80006c8:	2a02      	cmp	r2, #2
 80006ca:	d098      	beq.n	80005fe <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 80006cc:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80006ce:	005e      	lsls	r6, r3, #1
 80006d0:	2203      	movs	r2, #3
 80006d2:	0017      	movs	r7, r2
 80006d4:	40b7      	lsls	r7, r6
 80006d6:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80006d8:	684f      	ldr	r7, [r1, #4]
 80006da:	403a      	ands	r2, r7
 80006dc:	40b2      	lsls	r2, r6
 80006de:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80006e0:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80006e2:	684c      	ldr	r4, [r1, #4]
 80006e4:	22c0      	movs	r2, #192	@ 0xc0
 80006e6:	0292      	lsls	r2, r2, #10
 80006e8:	4214      	tst	r4, r2
 80006ea:	d0cb      	beq.n	8000684 <HAL_GPIO_Init+0xb4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ec:	4c19      	ldr	r4, [pc, #100]	@ (8000754 <HAL_GPIO_Init+0x184>)
 80006ee:	69a6      	ldr	r6, [r4, #24]
 80006f0:	2201      	movs	r2, #1
 80006f2:	4316      	orrs	r6, r2
 80006f4:	61a6      	str	r6, [r4, #24]
 80006f6:	69a4      	ldr	r4, [r4, #24]
 80006f8:	4022      	ands	r2, r4
 80006fa:	9201      	str	r2, [sp, #4]
 80006fc:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80006fe:	089a      	lsrs	r2, r3, #2
 8000700:	1c94      	adds	r4, r2, #2
 8000702:	00a4      	lsls	r4, r4, #2
 8000704:	4e11      	ldr	r6, [pc, #68]	@ (800074c <HAL_GPIO_Init+0x17c>)
 8000706:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000708:	2403      	movs	r4, #3
 800070a:	401c      	ands	r4, r3
 800070c:	00a4      	lsls	r4, r4, #2
 800070e:	260f      	movs	r6, #15
 8000710:	40a6      	lsls	r6, r4
 8000712:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000714:	2690      	movs	r6, #144	@ 0x90
 8000716:	05f6      	lsls	r6, r6, #23
 8000718:	42b0      	cmp	r0, r6
 800071a:	d082      	beq.n	8000622 <HAL_GPIO_Init+0x52>
 800071c:	4e0e      	ldr	r6, [pc, #56]	@ (8000758 <HAL_GPIO_Init+0x188>)
 800071e:	42b0      	cmp	r0, r6
 8000720:	d00b      	beq.n	800073a <HAL_GPIO_Init+0x16a>
 8000722:	4e0e      	ldr	r6, [pc, #56]	@ (800075c <HAL_GPIO_Init+0x18c>)
 8000724:	42b0      	cmp	r0, r6
 8000726:	d00a      	beq.n	800073e <HAL_GPIO_Init+0x16e>
 8000728:	4e0d      	ldr	r6, [pc, #52]	@ (8000760 <HAL_GPIO_Init+0x190>)
 800072a:	42b0      	cmp	r0, r6
 800072c:	d009      	beq.n	8000742 <HAL_GPIO_Init+0x172>
 800072e:	4e0d      	ldr	r6, [pc, #52]	@ (8000764 <HAL_GPIO_Init+0x194>)
 8000730:	42b0      	cmp	r0, r6
 8000732:	d100      	bne.n	8000736 <HAL_GPIO_Init+0x166>
 8000734:	e773      	b.n	800061e <HAL_GPIO_Init+0x4e>
 8000736:	2605      	movs	r6, #5
 8000738:	e774      	b.n	8000624 <HAL_GPIO_Init+0x54>
 800073a:	2601      	movs	r6, #1
 800073c:	e772      	b.n	8000624 <HAL_GPIO_Init+0x54>
 800073e:	2602      	movs	r6, #2
 8000740:	e770      	b.n	8000624 <HAL_GPIO_Init+0x54>
 8000742:	2603      	movs	r6, #3
 8000744:	e76e      	b.n	8000624 <HAL_GPIO_Init+0x54>
  } 
}
 8000746:	b003      	add	sp, #12
 8000748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	40010000 	.word	0x40010000
 8000750:	40010400 	.word	0x40010400
 8000754:	40021000 	.word	0x40021000
 8000758:	48000400 	.word	0x48000400
 800075c:	48000800 	.word	0x48000800
 8000760:	48000c00 	.word	0x48000c00
 8000764:	48001000 	.word	0x48001000

08000768 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000768:	2a00      	cmp	r2, #0
 800076a:	d001      	beq.n	8000770 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800076c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800076e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000770:	6281      	str	r1, [r0, #40]	@ 0x28
}
 8000772:	e7fc      	b.n	800076e <HAL_GPIO_WritePin+0x6>

08000774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000774:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <HAL_MspInit+0x2c>)
 8000778:	6999      	ldr	r1, [r3, #24]
 800077a:	2201      	movs	r2, #1
 800077c:	4311      	orrs	r1, r2
 800077e:	6199      	str	r1, [r3, #24]
 8000780:	6999      	ldr	r1, [r3, #24]
 8000782:	400a      	ands	r2, r1
 8000784:	9200      	str	r2, [sp, #0]
 8000786:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	2180      	movs	r1, #128	@ 0x80
 800078c:	0549      	lsls	r1, r1, #21
 800078e:	430a      	orrs	r2, r1
 8000790:	61da      	str	r2, [r3, #28]
 8000792:	69db      	ldr	r3, [r3, #28]
 8000794:	400b      	ands	r3, r1
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	b002      	add	sp, #8
 800079c:	4770      	bx	lr
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007a4:	b510      	push	{r4, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	2214      	movs	r2, #20
 80007ac:	2100      	movs	r1, #0
 80007ae:	a803      	add	r0, sp, #12
 80007b0:	f001 f8a9 	bl	8001906 <memset>
  if(hspi->Instance==SPI1)
 80007b4:	6822      	ldr	r2, [r4, #0]
 80007b6:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <HAL_SPI_MspInit+0x5c>)
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d001      	beq.n	80007c0 <HAL_SPI_MspInit+0x1c>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007bc:	b008      	add	sp, #32
 80007be:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007c0:	4b10      	ldr	r3, [pc, #64]	@ (8000804 <HAL_SPI_MspInit+0x60>)
 80007c2:	699a      	ldr	r2, [r3, #24]
 80007c4:	2180      	movs	r1, #128	@ 0x80
 80007c6:	0149      	lsls	r1, r1, #5
 80007c8:	430a      	orrs	r2, r1
 80007ca:	619a      	str	r2, [r3, #24]
 80007cc:	699a      	ldr	r2, [r3, #24]
 80007ce:	400a      	ands	r2, r1
 80007d0:	9201      	str	r2, [sp, #4]
 80007d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	2180      	movs	r1, #128	@ 0x80
 80007d8:	0289      	lsls	r1, r1, #10
 80007da:	430a      	orrs	r2, r1
 80007dc:	615a      	str	r2, [r3, #20]
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	400b      	ands	r3, r1
 80007e2:	9302      	str	r3, [sp, #8]
 80007e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007e6:	a903      	add	r1, sp, #12
 80007e8:	23e0      	movs	r3, #224	@ 0xe0
 80007ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	3bde      	subs	r3, #222	@ 0xde
 80007ee:	604b      	str	r3, [r1, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f0:	3301      	adds	r3, #1
 80007f2:	60cb      	str	r3, [r1, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	2090      	movs	r0, #144	@ 0x90
 80007f6:	05c0      	lsls	r0, r0, #23
 80007f8:	f7ff feea 	bl	80005d0 <HAL_GPIO_Init>
}
 80007fc:	e7de      	b.n	80007bc <HAL_SPI_MspInit+0x18>
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	40013000 	.word	0x40013000
 8000804:	40021000 	.word	0x40021000

08000808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000808:	b570      	push	{r4, r5, r6, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800080e:	d100      	bne.n	8000812 <HAL_RCC_OscConfig+0xa>
 8000810:	e27f      	b.n	8000d12 <HAL_RCC_OscConfig+0x50a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000812:	6803      	ldr	r3, [r0, #0]
 8000814:	07db      	lsls	r3, r3, #31
 8000816:	d52b      	bpl.n	8000870 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000818:	4bb3      	ldr	r3, [pc, #716]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	230c      	movs	r3, #12
 800081e:	4013      	ands	r3, r2
 8000820:	2b04      	cmp	r3, #4
 8000822:	d01d      	beq.n	8000860 <HAL_RCC_OscConfig+0x58>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000824:	4bb0      	ldr	r3, [pc, #704]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	230c      	movs	r3, #12
 800082a:	4013      	ands	r3, r2
 800082c:	2b08      	cmp	r3, #8
 800082e:	d00e      	beq.n	800084e <HAL_RCC_OscConfig+0x46>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000830:	6863      	ldr	r3, [r4, #4]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d041      	beq.n	80008ba <HAL_RCC_OscConfig+0xb2>
 8000836:	2b00      	cmp	r3, #0
 8000838:	d156      	bne.n	80008e8 <HAL_RCC_OscConfig+0xe0>
 800083a:	4bab      	ldr	r3, [pc, #684]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 800083c:	681a      	ldr	r2, [r3, #0]
 800083e:	49ab      	ldr	r1, [pc, #684]	@ (8000aec <HAL_RCC_OscConfig+0x2e4>)
 8000840:	400a      	ands	r2, r1
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	49aa      	ldr	r1, [pc, #680]	@ (8000af0 <HAL_RCC_OscConfig+0x2e8>)
 8000848:	400a      	ands	r2, r1
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	e03b      	b.n	80008c6 <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800084e:	4ba6      	ldr	r3, [pc, #664]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	22c0      	movs	r2, #192	@ 0xc0
 8000854:	0252      	lsls	r2, r2, #9
 8000856:	4013      	ands	r3, r2
 8000858:	2280      	movs	r2, #128	@ 0x80
 800085a:	0252      	lsls	r2, r2, #9
 800085c:	4293      	cmp	r3, r2
 800085e:	d1e7      	bne.n	8000830 <HAL_RCC_OscConfig+0x28>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000860:	4ba1      	ldr	r3, [pc, #644]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	039b      	lsls	r3, r3, #14
 8000866:	d503      	bpl.n	8000870 <HAL_RCC_OscConfig+0x68>
 8000868:	6863      	ldr	r3, [r4, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d100      	bne.n	8000870 <HAL_RCC_OscConfig+0x68>
 800086e:	e253      	b.n	8000d18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	079b      	lsls	r3, r3, #30
 8000874:	d577      	bpl.n	8000966 <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000876:	4b9c      	ldr	r3, [pc, #624]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	220c      	movs	r2, #12
 800087c:	421a      	tst	r2, r3
 800087e:	d062      	beq.n	8000946 <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000880:	4b99      	ldr	r3, [pc, #612]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000882:	685a      	ldr	r2, [r3, #4]
 8000884:	230c      	movs	r3, #12
 8000886:	4013      	ands	r3, r2
 8000888:	2b08      	cmp	r3, #8
 800088a:	d053      	beq.n	8000934 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800088c:	68e3      	ldr	r3, [r4, #12]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d100      	bne.n	8000894 <HAL_RCC_OscConfig+0x8c>
 8000892:	e08a      	b.n	80009aa <HAL_RCC_OscConfig+0x1a2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000894:	4a94      	ldr	r2, [pc, #592]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000896:	6813      	ldr	r3, [r2, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	430b      	orrs	r3, r1
 800089c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800089e:	f7ff fe2b 	bl	80004f8 <HAL_GetTick>
 80008a2:	0005      	movs	r5, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a4:	4b90      	ldr	r3, [pc, #576]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	079b      	lsls	r3, r3, #30
 80008aa:	d475      	bmi.n	8000998 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008ac:	f7ff fe24 	bl	80004f8 <HAL_GetTick>
 80008b0:	1b40      	subs	r0, r0, r5
 80008b2:	2802      	cmp	r0, #2
 80008b4:	d9f6      	bls.n	80008a4 <HAL_RCC_OscConfig+0x9c>
          {
            return HAL_TIMEOUT;
 80008b6:	2003      	movs	r0, #3
 80008b8:	e22c      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008ba:	4a8b      	ldr	r2, [pc, #556]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 80008bc:	6811      	ldr	r1, [r2, #0]
 80008be:	2380      	movs	r3, #128	@ 0x80
 80008c0:	025b      	lsls	r3, r3, #9
 80008c2:	430b      	orrs	r3, r1
 80008c4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80008c6:	6863      	ldr	r3, [r4, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d025      	beq.n	8000918 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80008cc:	f7ff fe14 	bl	80004f8 <HAL_GetTick>
 80008d0:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008d2:	4b85      	ldr	r3, [pc, #532]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	039b      	lsls	r3, r3, #14
 80008d8:	d4ca      	bmi.n	8000870 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008da:	f7ff fe0d 	bl	80004f8 <HAL_GetTick>
 80008de:	1b40      	subs	r0, r0, r5
 80008e0:	2864      	cmp	r0, #100	@ 0x64
 80008e2:	d9f6      	bls.n	80008d2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 80008e4:	2003      	movs	r0, #3
 80008e6:	e215      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e8:	2b05      	cmp	r3, #5
 80008ea:	d009      	beq.n	8000900 <HAL_RCC_OscConfig+0xf8>
 80008ec:	4b7e      	ldr	r3, [pc, #504]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	497e      	ldr	r1, [pc, #504]	@ (8000aec <HAL_RCC_OscConfig+0x2e4>)
 80008f2:	400a      	ands	r2, r1
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	497d      	ldr	r1, [pc, #500]	@ (8000af0 <HAL_RCC_OscConfig+0x2e8>)
 80008fa:	400a      	ands	r2, r1
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	e7e2      	b.n	80008c6 <HAL_RCC_OscConfig+0xbe>
 8000900:	4b79      	ldr	r3, [pc, #484]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000902:	6819      	ldr	r1, [r3, #0]
 8000904:	2280      	movs	r2, #128	@ 0x80
 8000906:	02d2      	lsls	r2, r2, #11
 8000908:	430a      	orrs	r2, r1
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	6819      	ldr	r1, [r3, #0]
 800090e:	2280      	movs	r2, #128	@ 0x80
 8000910:	0252      	lsls	r2, r2, #9
 8000912:	430a      	orrs	r2, r1
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	e7d6      	b.n	80008c6 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8000918:	f7ff fdee 	bl	80004f8 <HAL_GetTick>
 800091c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800091e:	4b72      	ldr	r3, [pc, #456]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	039b      	lsls	r3, r3, #14
 8000924:	d5a4      	bpl.n	8000870 <HAL_RCC_OscConfig+0x68>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000926:	f7ff fde7 	bl	80004f8 <HAL_GetTick>
 800092a:	1b40      	subs	r0, r0, r5
 800092c:	2864      	cmp	r0, #100	@ 0x64
 800092e:	d9f6      	bls.n	800091e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8000930:	2003      	movs	r0, #3
 8000932:	e1ef      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000934:	4b6c      	ldr	r3, [pc, #432]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	22c0      	movs	r2, #192	@ 0xc0
 800093a:	0252      	lsls	r2, r2, #9
 800093c:	4013      	ands	r3, r2
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	0212      	lsls	r2, r2, #8
 8000942:	4293      	cmp	r3, r2
 8000944:	d1a2      	bne.n	800088c <HAL_RCC_OscConfig+0x84>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000946:	4b68      	ldr	r3, [pc, #416]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	079b      	lsls	r3, r3, #30
 800094c:	d503      	bpl.n	8000956 <HAL_RCC_OscConfig+0x14e>
 800094e:	68e3      	ldr	r3, [r4, #12]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d000      	beq.n	8000956 <HAL_RCC_OscConfig+0x14e>
 8000954:	e1e2      	b.n	8000d1c <HAL_RCC_OscConfig+0x514>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000956:	4964      	ldr	r1, [pc, #400]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000958:	680b      	ldr	r3, [r1, #0]
 800095a:	22f8      	movs	r2, #248	@ 0xf8
 800095c:	4393      	bics	r3, r2
 800095e:	6922      	ldr	r2, [r4, #16]
 8000960:	00d2      	lsls	r2, r2, #3
 8000962:	4313      	orrs	r3, r2
 8000964:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	071b      	lsls	r3, r3, #28
 800096a:	d544      	bpl.n	80009f6 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800096c:	69e3      	ldr	r3, [r4, #28]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d02e      	beq.n	80009d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000972:	4a5d      	ldr	r2, [pc, #372]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000974:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8000976:	2101      	movs	r1, #1
 8000978:	430b      	orrs	r3, r1
 800097a:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800097c:	f7ff fdbc 	bl	80004f8 <HAL_GetTick>
 8000980:	0005      	movs	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000982:	4b59      	ldr	r3, [pc, #356]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000986:	079b      	lsls	r3, r3, #30
 8000988:	d435      	bmi.n	80009f6 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800098a:	f7ff fdb5 	bl	80004f8 <HAL_GetTick>
 800098e:	1b40      	subs	r0, r0, r5
 8000990:	2802      	cmp	r0, #2
 8000992:	d9f6      	bls.n	8000982 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8000994:	2003      	movs	r0, #3
 8000996:	e1bd      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000998:	4953      	ldr	r1, [pc, #332]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 800099a:	680b      	ldr	r3, [r1, #0]
 800099c:	22f8      	movs	r2, #248	@ 0xf8
 800099e:	4393      	bics	r3, r2
 80009a0:	6922      	ldr	r2, [r4, #16]
 80009a2:	00d2      	lsls	r2, r2, #3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	600b      	str	r3, [r1, #0]
 80009a8:	e7dd      	b.n	8000966 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 80009aa:	4a4f      	ldr	r2, [pc, #316]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 80009ac:	6813      	ldr	r3, [r2, #0]
 80009ae:	2101      	movs	r1, #1
 80009b0:	438b      	bics	r3, r1
 80009b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80009b4:	f7ff fda0 	bl	80004f8 <HAL_GetTick>
 80009b8:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009ba:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	079b      	lsls	r3, r3, #30
 80009c0:	d5d1      	bpl.n	8000966 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009c2:	f7ff fd99 	bl	80004f8 <HAL_GetTick>
 80009c6:	1b40      	subs	r0, r0, r5
 80009c8:	2802      	cmp	r0, #2
 80009ca:	d9f6      	bls.n	80009ba <HAL_RCC_OscConfig+0x1b2>
            return HAL_TIMEOUT;
 80009cc:	2003      	movs	r0, #3
 80009ce:	e1a1      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009d0:	4a45      	ldr	r2, [pc, #276]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 80009d2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 80009d4:	2101      	movs	r1, #1
 80009d6:	438b      	bics	r3, r1
 80009d8:	6253      	str	r3, [r2, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009da:	f7ff fd8d 	bl	80004f8 <HAL_GetTick>
 80009de:	0005      	movs	r5, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e0:	4b41      	ldr	r3, [pc, #260]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e4:	079b      	lsls	r3, r3, #30
 80009e6:	d506      	bpl.n	80009f6 <HAL_RCC_OscConfig+0x1ee>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009e8:	f7ff fd86 	bl	80004f8 <HAL_GetTick>
 80009ec:	1b40      	subs	r0, r0, r5
 80009ee:	2802      	cmp	r0, #2
 80009f0:	d9f6      	bls.n	80009e0 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 80009f2:	2003      	movs	r0, #3
 80009f4:	e18e      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009f6:	6823      	ldr	r3, [r4, #0]
 80009f8:	075b      	lsls	r3, r3, #29
 80009fa:	d400      	bmi.n	80009fe <HAL_RCC_OscConfig+0x1f6>
 80009fc:	e080      	b.n	8000b00 <HAL_RCC_OscConfig+0x2f8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009fe:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000a00:	69db      	ldr	r3, [r3, #28]
 8000a02:	00db      	lsls	r3, r3, #3
 8000a04:	d41d      	bmi.n	8000a42 <HAL_RCC_OscConfig+0x23a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b38      	ldr	r3, [pc, #224]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000a08:	69da      	ldr	r2, [r3, #28]
 8000a0a:	2180      	movs	r1, #128	@ 0x80
 8000a0c:	0549      	lsls	r1, r1, #21
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	61da      	str	r2, [r3, #28]
 8000a12:	69db      	ldr	r3, [r3, #28]
 8000a14:	400b      	ands	r3, r1
 8000a16:	9301      	str	r3, [sp, #4]
 8000a18:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a1a:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a1c:	4b35      	ldr	r3, [pc, #212]	@ (8000af4 <HAL_RCC_OscConfig+0x2ec>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	05db      	lsls	r3, r3, #23
 8000a22:	d510      	bpl.n	8000a46 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a24:	68a3      	ldr	r3, [r4, #8]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d021      	beq.n	8000a6e <HAL_RCC_OscConfig+0x266>
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d136      	bne.n	8000a9c <HAL_RCC_OscConfig+0x294>
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000a30:	6a1a      	ldr	r2, [r3, #32]
 8000a32:	2101      	movs	r1, #1
 8000a34:	438a      	bics	r2, r1
 8000a36:	621a      	str	r2, [r3, #32]
 8000a38:	6a1a      	ldr	r2, [r3, #32]
 8000a3a:	3103      	adds	r1, #3
 8000a3c:	438a      	bics	r2, r1
 8000a3e:	621a      	str	r2, [r3, #32]
 8000a40:	e01a      	b.n	8000a78 <HAL_RCC_OscConfig+0x270>
    FlagStatus       pwrclkchanged = RESET;
 8000a42:	2500      	movs	r5, #0
 8000a44:	e7ea      	b.n	8000a1c <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a46:	4a2b      	ldr	r2, [pc, #172]	@ (8000af4 <HAL_RCC_OscConfig+0x2ec>)
 8000a48:	6811      	ldr	r1, [r2, #0]
 8000a4a:	2380      	movs	r3, #128	@ 0x80
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	430b      	orrs	r3, r1
 8000a50:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000a52:	f7ff fd51 	bl	80004f8 <HAL_GetTick>
 8000a56:	0006      	movs	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a58:	4b26      	ldr	r3, [pc, #152]	@ (8000af4 <HAL_RCC_OscConfig+0x2ec>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	05db      	lsls	r3, r3, #23
 8000a5e:	d4e1      	bmi.n	8000a24 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a60:	f7ff fd4a 	bl	80004f8 <HAL_GetTick>
 8000a64:	1b80      	subs	r0, r0, r6
 8000a66:	2864      	cmp	r0, #100	@ 0x64
 8000a68:	d9f6      	bls.n	8000a58 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	e152      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000a70:	6a13      	ldr	r3, [r2, #32]
 8000a72:	2101      	movs	r1, #1
 8000a74:	430b      	orrs	r3, r1
 8000a76:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a78:	68a3      	ldr	r3, [r4, #8]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d024      	beq.n	8000ac8 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a7e:	f7ff fd3b 	bl	80004f8 <HAL_GetTick>
 8000a82:	0006      	movs	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a84:	4b18      	ldr	r3, [pc, #96]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000a86:	6a1b      	ldr	r3, [r3, #32]
 8000a88:	079b      	lsls	r3, r3, #30
 8000a8a:	d437      	bmi.n	8000afc <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a8c:	f7ff fd34 	bl	80004f8 <HAL_GetTick>
 8000a90:	1b80      	subs	r0, r0, r6
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <HAL_RCC_OscConfig+0x2f0>)
 8000a94:	4298      	cmp	r0, r3
 8000a96:	d9f5      	bls.n	8000a84 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8000a98:	2003      	movs	r0, #3
 8000a9a:	e13b      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a9c:	2b05      	cmp	r3, #5
 8000a9e:	d009      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x2ac>
 8000aa0:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000aa2:	6a1a      	ldr	r2, [r3, #32]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	438a      	bics	r2, r1
 8000aa8:	621a      	str	r2, [r3, #32]
 8000aaa:	6a1a      	ldr	r2, [r3, #32]
 8000aac:	3103      	adds	r1, #3
 8000aae:	438a      	bics	r2, r1
 8000ab0:	621a      	str	r2, [r3, #32]
 8000ab2:	e7e1      	b.n	8000a78 <HAL_RCC_OscConfig+0x270>
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000ab6:	6a1a      	ldr	r2, [r3, #32]
 8000ab8:	2104      	movs	r1, #4
 8000aba:	430a      	orrs	r2, r1
 8000abc:	621a      	str	r2, [r3, #32]
 8000abe:	6a1a      	ldr	r2, [r3, #32]
 8000ac0:	3903      	subs	r1, #3
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	621a      	str	r2, [r3, #32]
 8000ac6:	e7d7      	b.n	8000a78 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ac8:	f7ff fd16 	bl	80004f8 <HAL_GetTick>
 8000acc:	0006      	movs	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <HAL_RCC_OscConfig+0x2e0>)
 8000ad0:	6a1b      	ldr	r3, [r3, #32]
 8000ad2:	079b      	lsls	r3, r3, #30
 8000ad4:	d512      	bpl.n	8000afc <HAL_RCC_OscConfig+0x2f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ad6:	f7ff fd0f 	bl	80004f8 <HAL_GetTick>
 8000ada:	1b80      	subs	r0, r0, r6
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <HAL_RCC_OscConfig+0x2f0>)
 8000ade:	4298      	cmp	r0, r3
 8000ae0:	d9f5      	bls.n	8000ace <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	e116      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
 8000ae6:	46c0      	nop			@ (mov r8, r8)
 8000ae8:	40021000 	.word	0x40021000
 8000aec:	fffeffff 	.word	0xfffeffff
 8000af0:	fffbffff 	.word	0xfffbffff
 8000af4:	40007000 	.word	0x40007000
 8000af8:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000afc:	2d01      	cmp	r5, #1
 8000afe:	d039      	beq.n	8000b74 <HAL_RCC_OscConfig+0x36c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	06db      	lsls	r3, r3, #27
 8000b04:	d510      	bpl.n	8000b28 <HAL_RCC_OscConfig+0x320>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000b06:	6963      	ldr	r3, [r4, #20]
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d039      	beq.n	8000b80 <HAL_RCC_OscConfig+0x378>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000b0c:	3305      	adds	r3, #5
 8000b0e:	d157      	bne.n	8000bc0 <HAL_RCC_OscConfig+0x3b8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000b10:	4a89      	ldr	r2, [pc, #548]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000b12:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000b14:	2104      	movs	r1, #4
 8000b16:	438b      	bics	r3, r1
 8000b18:	6353      	str	r3, [r2, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b1a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000b1c:	31f4      	adds	r1, #244	@ 0xf4
 8000b1e:	438b      	bics	r3, r1
 8000b20:	69a1      	ldr	r1, [r4, #24]
 8000b22:	00c9      	lsls	r1, r1, #3
 8000b24:	430b      	orrs	r3, r1
 8000b26:	6353      	str	r3, [r2, #52]	@ 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000b28:	6823      	ldr	r3, [r4, #0]
 8000b2a:	069b      	lsls	r3, r3, #26
 8000b2c:	d56e      	bpl.n	8000c0c <HAL_RCC_OscConfig+0x404>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000b2e:	4b82      	ldr	r3, [pc, #520]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000b30:	685a      	ldr	r2, [r3, #4]
 8000b32:	230c      	movs	r3, #12
 8000b34:	4013      	ands	r3, r2
 8000b36:	2b0c      	cmp	r3, #12
 8000b38:	d060      	beq.n	8000bfc <HAL_RCC_OscConfig+0x3f4>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	230c      	movs	r3, #12
 8000b40:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8000b42:	2b08      	cmp	r3, #8
 8000b44:	d053      	beq.n	8000bee <HAL_RCC_OscConfig+0x3e6>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000b46:	6a23      	ldr	r3, [r4, #32]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d07e      	beq.n	8000c4a <HAL_RCC_OscConfig+0x442>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8000b4c:	4a7a      	ldr	r2, [pc, #488]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000b4e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8000b50:	2380      	movs	r3, #128	@ 0x80
 8000b52:	025b      	lsls	r3, r3, #9
 8000b54:	430b      	orrs	r3, r1
 8000b56:	6353      	str	r3, [r2, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b58:	f7ff fcce 	bl	80004f8 <HAL_GetTick>
 8000b5c:	0005      	movs	r5, r0
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000b5e:	4b76      	ldr	r3, [pc, #472]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b62:	039b      	lsls	r3, r3, #14
 8000b64:	d452      	bmi.n	8000c0c <HAL_RCC_OscConfig+0x404>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000b66:	f7ff fcc7 	bl	80004f8 <HAL_GetTick>
 8000b6a:	1b40      	subs	r0, r0, r5
 8000b6c:	2802      	cmp	r0, #2
 8000b6e:	d9f6      	bls.n	8000b5e <HAL_RCC_OscConfig+0x356>
          {
            return HAL_TIMEOUT;
 8000b70:	2003      	movs	r0, #3
 8000b72:	e0cf      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b74:	4a70      	ldr	r2, [pc, #448]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000b76:	69d3      	ldr	r3, [r2, #28]
 8000b78:	4970      	ldr	r1, [pc, #448]	@ (8000d3c <HAL_RCC_OscConfig+0x534>)
 8000b7a:	400b      	ands	r3, r1
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	e7bf      	b.n	8000b00 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b80:	4b6d      	ldr	r3, [pc, #436]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b84:	2104      	movs	r1, #4
 8000b86:	430a      	orrs	r2, r1
 8000b88:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000b8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b8c:	3903      	subs	r1, #3
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000b92:	f7ff fcb1 	bl	80004f8 <HAL_GetTick>
 8000b96:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b98:	4b67      	ldr	r3, [pc, #412]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b9c:	079b      	lsls	r3, r3, #30
 8000b9e:	d406      	bmi.n	8000bae <HAL_RCC_OscConfig+0x3a6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ba0:	f7ff fcaa 	bl	80004f8 <HAL_GetTick>
 8000ba4:	1b40      	subs	r0, r0, r5
 8000ba6:	2802      	cmp	r0, #2
 8000ba8:	d9f6      	bls.n	8000b98 <HAL_RCC_OscConfig+0x390>
          return HAL_TIMEOUT;
 8000baa:	2003      	movs	r0, #3
 8000bac:	e0b2      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000bae:	4962      	ldr	r1, [pc, #392]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000bb0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8000bb2:	22f8      	movs	r2, #248	@ 0xf8
 8000bb4:	4393      	bics	r3, r2
 8000bb6:	69a2      	ldr	r2, [r4, #24]
 8000bb8:	00d2      	lsls	r2, r2, #3
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	634b      	str	r3, [r1, #52]	@ 0x34
 8000bbe:	e7b3      	b.n	8000b28 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000bc0:	4b5d      	ldr	r3, [pc, #372]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000bc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bc4:	2104      	movs	r1, #4
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	635a      	str	r2, [r3, #52]	@ 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bcc:	3903      	subs	r1, #3
 8000bce:	438a      	bics	r2, r1
 8000bd0:	635a      	str	r2, [r3, #52]	@ 0x34
      tickstart = HAL_GetTick();
 8000bd2:	f7ff fc91 	bl	80004f8 <HAL_GetTick>
 8000bd6:	0005      	movs	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000bd8:	4b57      	ldr	r3, [pc, #348]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bdc:	079b      	lsls	r3, r3, #30
 8000bde:	d5a3      	bpl.n	8000b28 <HAL_RCC_OscConfig+0x320>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000be0:	f7ff fc8a 	bl	80004f8 <HAL_GetTick>
 8000be4:	1b40      	subs	r0, r0, r5
 8000be6:	2802      	cmp	r0, #2
 8000be8:	d9f6      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x3d0>
          return HAL_TIMEOUT;
 8000bea:	2003      	movs	r0, #3
 8000bec:	e092      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8000bee:	4b52      	ldr	r3, [pc, #328]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	22c0      	movs	r2, #192	@ 0xc0
 8000bf4:	0252      	lsls	r2, r2, #9
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d1a4      	bne.n	8000b46 <HAL_RCC_OscConfig+0x33e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8000bfc:	4b4e      	ldr	r3, [pc, #312]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c00:	039b      	lsls	r3, r3, #14
 8000c02:	d503      	bpl.n	8000c0c <HAL_RCC_OscConfig+0x404>
 8000c04:	6a23      	ldr	r3, [r4, #32]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d000      	beq.n	8000c0c <HAL_RCC_OscConfig+0x404>
 8000c0a:	e089      	b.n	8000d20 <HAL_RCC_OscConfig+0x518>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c0c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d100      	bne.n	8000c14 <HAL_RCC_OscConfig+0x40c>
 8000c12:	e087      	b.n	8000d24 <HAL_RCC_OscConfig+0x51c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c14:	4a48      	ldr	r2, [pc, #288]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000c16:	6851      	ldr	r1, [r2, #4]
 8000c18:	220c      	movs	r2, #12
 8000c1a:	400a      	ands	r2, r1
 8000c1c:	2a08      	cmp	r2, #8
 8000c1e:	d060      	beq.n	8000ce2 <HAL_RCC_OscConfig+0x4da>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d025      	beq.n	8000c70 <HAL_RCC_OscConfig+0x468>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c24:	4a44      	ldr	r2, [pc, #272]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000c26:	6813      	ldr	r3, [r2, #0]
 8000c28:	4945      	ldr	r1, [pc, #276]	@ (8000d40 <HAL_RCC_OscConfig+0x538>)
 8000c2a:	400b      	ands	r3, r1
 8000c2c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2e:	f7ff fc63 	bl	80004f8 <HAL_GetTick>
 8000c32:	0004      	movs	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c34:	4b40      	ldr	r3, [pc, #256]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	d550      	bpl.n	8000cde <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c3c:	f7ff fc5c 	bl	80004f8 <HAL_GetTick>
 8000c40:	1b00      	subs	r0, r0, r4
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9f6      	bls.n	8000c34 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8000c46:	2003      	movs	r0, #3
 8000c48:	e064      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_HSI48_DISABLE();
 8000c4a:	4a3b      	ldr	r2, [pc, #236]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000c4c:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8000c4e:	493d      	ldr	r1, [pc, #244]	@ (8000d44 <HAL_RCC_OscConfig+0x53c>)
 8000c50:	400b      	ands	r3, r1
 8000c52:	6353      	str	r3, [r2, #52]	@ 0x34
        tickstart = HAL_GetTick();
 8000c54:	f7ff fc50 	bl	80004f8 <HAL_GetTick>
 8000c58:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8000c5a:	4b37      	ldr	r3, [pc, #220]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000c5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c5e:	039b      	lsls	r3, r3, #14
 8000c60:	d5d4      	bpl.n	8000c0c <HAL_RCC_OscConfig+0x404>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000c62:	f7ff fc49 	bl	80004f8 <HAL_GetTick>
 8000c66:	1b40      	subs	r0, r0, r5
 8000c68:	2802      	cmp	r0, #2
 8000c6a:	d9f6      	bls.n	8000c5a <HAL_RCC_OscConfig+0x452>
            return HAL_TIMEOUT;
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	e051      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_DISABLE();
 8000c70:	4a31      	ldr	r2, [pc, #196]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000c72:	6813      	ldr	r3, [r2, #0]
 8000c74:	4932      	ldr	r1, [pc, #200]	@ (8000d40 <HAL_RCC_OscConfig+0x538>)
 8000c76:	400b      	ands	r3, r1
 8000c78:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000c7a:	f7ff fc3d 	bl	80004f8 <HAL_GetTick>
 8000c7e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c80:	4b2d      	ldr	r3, [pc, #180]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	019b      	lsls	r3, r3, #6
 8000c86:	d506      	bpl.n	8000c96 <HAL_RCC_OscConfig+0x48e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c88:	f7ff fc36 	bl	80004f8 <HAL_GetTick>
 8000c8c:	1b40      	subs	r0, r0, r5
 8000c8e:	2802      	cmp	r0, #2
 8000c90:	d9f6      	bls.n	8000c80 <HAL_RCC_OscConfig+0x478>
            return HAL_TIMEOUT;
 8000c92:	2003      	movs	r0, #3
 8000c94:	e03e      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	438a      	bics	r2, r1
 8000c9e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8000ca0:	430a      	orrs	r2, r1
 8000ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	4928      	ldr	r1, [pc, #160]	@ (8000d48 <HAL_RCC_OscConfig+0x540>)
 8000ca8:	400a      	ands	r2, r1
 8000caa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8000cac:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8000cae:	4301      	orrs	r1, r0
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8000cb4:	6819      	ldr	r1, [r3, #0]
 8000cb6:	2280      	movs	r2, #128	@ 0x80
 8000cb8:	0452      	lsls	r2, r2, #17
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000cbe:	f7ff fc1b 	bl	80004f8 <HAL_GetTick>
 8000cc2:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	019b      	lsls	r3, r3, #6
 8000cca:	d406      	bmi.n	8000cda <HAL_RCC_OscConfig+0x4d2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ccc:	f7ff fc14 	bl	80004f8 <HAL_GetTick>
 8000cd0:	1b00      	subs	r0, r0, r4
 8000cd2:	2802      	cmp	r0, #2
 8000cd4:	d9f6      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x4bc>
            return HAL_TIMEOUT;
 8000cd6:	2003      	movs	r0, #3
 8000cd8:	e01c      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
        }
      }
    }
  }

  return HAL_OK;
 8000cda:	2000      	movs	r0, #0
 8000cdc:	e01a      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e018      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d020      	beq.n	8000d28 <HAL_RCC_OscConfig+0x520>
        pll_config  = RCC->CFGR;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <HAL_RCC_OscConfig+0x530>)
 8000ce8:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8000cea:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cec:	23c0      	movs	r3, #192	@ 0xc0
 8000cee:	025b      	lsls	r3, r3, #9
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	d119      	bne.n	8000d2c <HAL_RCC_OscConfig+0x524>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	4003      	ands	r3, r0
 8000cfc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d116      	bne.n	8000d30 <HAL_RCC_OscConfig+0x528>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000d02:	23f0      	movs	r3, #240	@ 0xf0
 8000d04:	039b      	lsls	r3, r3, #14
 8000d06:	401a      	ands	r2, r3
 8000d08:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d112      	bne.n	8000d34 <HAL_RCC_OscConfig+0x52c>
  return HAL_OK;
 8000d0e:	2000      	movs	r0, #0
 8000d10:	e000      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
    return HAL_ERROR;
 8000d12:	2001      	movs	r0, #1
}
 8000d14:	b002      	add	sp, #8
 8000d16:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000d18:	2001      	movs	r0, #1
 8000d1a:	e7fb      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	e7f9      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 8000d20:	2001      	movs	r0, #1
 8000d22:	e7f7      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
  return HAL_OK;
 8000d24:	2000      	movs	r0, #0
 8000d26:	e7f5      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
        return HAL_ERROR;
 8000d28:	2001      	movs	r0, #1
 8000d2a:	e7f3      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
          return HAL_ERROR;
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	e7f1      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
 8000d30:	2001      	movs	r0, #1
 8000d32:	e7ef      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
 8000d34:	2001      	movs	r0, #1
 8000d36:	e7ed      	b.n	8000d14 <HAL_RCC_OscConfig+0x50c>
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	efffffff 	.word	0xefffffff
 8000d40:	feffffff 	.word	0xfeffffff
 8000d44:	fffeffff 	.word	0xfffeffff
 8000d48:	ffc27fff 	.word	0xffc27fff

08000d4c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d4c:	b510      	push	{r4, lr}
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	@ (8000db0 <HAL_RCC_GetSysClockFreq+0x64>)
 8000d50:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d52:	230c      	movs	r3, #12
 8000d54:	4013      	ands	r3, r2
 8000d56:	2b08      	cmp	r3, #8
 8000d58:	d003      	beq.n	8000d62 <HAL_RCC_GetSysClockFreq+0x16>
 8000d5a:	2b0c      	cmp	r3, #12
 8000d5c:	d125      	bne.n	8000daa <HAL_RCC_GetSysClockFreq+0x5e>
      break;
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8000d5e:	4815      	ldr	r0, [pc, #84]	@ (8000db4 <HAL_RCC_GetSysClockFreq+0x68>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d60:	bd10      	pop	{r4, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000d62:	0c91      	lsrs	r1, r2, #18
 8000d64:	230f      	movs	r3, #15
 8000d66:	4019      	ands	r1, r3
 8000d68:	4813      	ldr	r0, [pc, #76]	@ (8000db8 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000d6a:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000d6c:	4910      	ldr	r1, [pc, #64]	@ (8000db0 <HAL_RCC_GetSysClockFreq+0x64>)
 8000d6e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8000d70:	400b      	ands	r3, r1
 8000d72:	4912      	ldr	r1, [pc, #72]	@ (8000dbc <HAL_RCC_GetSysClockFreq+0x70>)
 8000d74:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000d76:	23c0      	movs	r3, #192	@ 0xc0
 8000d78:	025b      	lsls	r3, r3, #9
 8000d7a:	401a      	ands	r2, r3
 8000d7c:	2380      	movs	r3, #128	@ 0x80
 8000d7e:	025b      	lsls	r3, r3, #9
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d008      	beq.n	8000d96 <HAL_RCC_GetSysClockFreq+0x4a>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8000d84:	23c0      	movs	r3, #192	@ 0xc0
 8000d86:	025b      	lsls	r3, r3, #9
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d009      	beq.n	8000da0 <HAL_RCC_GetSysClockFreq+0x54>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000d8c:	480c      	ldr	r0, [pc, #48]	@ (8000dc0 <HAL_RCC_GetSysClockFreq+0x74>)
 8000d8e:	f7ff f997 	bl	80000c0 <__udivsi3>
 8000d92:	4360      	muls	r0, r4
 8000d94:	e7e4      	b.n	8000d60 <HAL_RCC_GetSysClockFreq+0x14>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000d96:	480a      	ldr	r0, [pc, #40]	@ (8000dc0 <HAL_RCC_GetSysClockFreq+0x74>)
 8000d98:	f7ff f992 	bl	80000c0 <__udivsi3>
 8000d9c:	4360      	muls	r0, r4
 8000d9e:	e7df      	b.n	8000d60 <HAL_RCC_GetSysClockFreq+0x14>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000da0:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <HAL_RCC_GetSysClockFreq+0x68>)
 8000da2:	f7ff f98d 	bl	80000c0 <__udivsi3>
 8000da6:	4360      	muls	r0, r4
 8000da8:	e7da      	b.n	8000d60 <HAL_RCC_GetSysClockFreq+0x14>
  switch (tmpreg & RCC_CFGR_SWS)
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 8000dac:	e7d8      	b.n	8000d60 <HAL_RCC_GetSysClockFreq+0x14>
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	40021000 	.word	0x40021000
 8000db4:	02dc6c00 	.word	0x02dc6c00
 8000db8:	0800198c 	.word	0x0800198c
 8000dbc:	0800197c 	.word	0x0800197c
 8000dc0:	007a1200 	.word	0x007a1200

08000dc4 <HAL_RCC_ClockConfig>:
{
 8000dc4:	b570      	push	{r4, r5, r6, lr}
 8000dc6:	0004      	movs	r4, r0
 8000dc8:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000dca:	2800      	cmp	r0, #0
 8000dcc:	d100      	bne.n	8000dd0 <HAL_RCC_ClockConfig+0xc>
 8000dce:	e086      	b.n	8000ede <HAL_RCC_ClockConfig+0x11a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000dd0:	4b47      	ldr	r3, [pc, #284]	@ (8000ef0 <HAL_RCC_ClockConfig+0x12c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	428b      	cmp	r3, r1
 8000dda:	d20a      	bcs.n	8000df2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ddc:	4944      	ldr	r1, [pc, #272]	@ (8000ef0 <HAL_RCC_ClockConfig+0x12c>)
 8000dde:	680b      	ldr	r3, [r1, #0]
 8000de0:	2201      	movs	r2, #1
 8000de2:	4393      	bics	r3, r2
 8000de4:	432b      	orrs	r3, r5
 8000de6:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000de8:	680b      	ldr	r3, [r1, #0]
 8000dea:	401a      	ands	r2, r3
 8000dec:	42aa      	cmp	r2, r5
 8000dee:	d000      	beq.n	8000df2 <HAL_RCC_ClockConfig+0x2e>
 8000df0:	e077      	b.n	8000ee2 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	079a      	lsls	r2, r3, #30
 8000df6:	d50e      	bpl.n	8000e16 <HAL_RCC_ClockConfig+0x52>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000df8:	075b      	lsls	r3, r3, #29
 8000dfa:	d505      	bpl.n	8000e08 <HAL_RCC_ClockConfig+0x44>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000dfe:	6851      	ldr	r1, [r2, #4]
 8000e00:	23e0      	movs	r3, #224	@ 0xe0
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	430b      	orrs	r3, r1
 8000e06:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e08:	4a3a      	ldr	r2, [pc, #232]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000e0a:	6853      	ldr	r3, [r2, #4]
 8000e0c:	21f0      	movs	r1, #240	@ 0xf0
 8000e0e:	438b      	bics	r3, r1
 8000e10:	68a1      	ldr	r1, [r4, #8]
 8000e12:	430b      	orrs	r3, r1
 8000e14:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000e16:	6823      	ldr	r3, [r4, #0]
 8000e18:	07db      	lsls	r3, r3, #31
 8000e1a:	d535      	bpl.n	8000e88 <HAL_RCC_ClockConfig+0xc4>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e1c:	6863      	ldr	r3, [r4, #4]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d009      	beq.n	8000e36 <HAL_RCC_ClockConfig+0x72>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d024      	beq.n	8000e70 <HAL_RCC_ClockConfig+0xac>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d028      	beq.n	8000e7c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e2a:	4a32      	ldr	r2, [pc, #200]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000e2c:	6812      	ldr	r2, [r2, #0]
 8000e2e:	0792      	lsls	r2, r2, #30
 8000e30:	d405      	bmi.n	8000e3e <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8000e32:	2001      	movs	r0, #1
 8000e34:	e052      	b.n	8000edc <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e36:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	0392      	lsls	r2, r2, #14
 8000e3c:	d553      	bpl.n	8000ee6 <HAL_RCC_ClockConfig+0x122>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e3e:	492d      	ldr	r1, [pc, #180]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000e40:	684a      	ldr	r2, [r1, #4]
 8000e42:	2003      	movs	r0, #3
 8000e44:	4382      	bics	r2, r0
 8000e46:	4313      	orrs	r3, r2
 8000e48:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000e4a:	f7ff fb55 	bl	80004f8 <HAL_GetTick>
 8000e4e:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e50:	4b28      	ldr	r3, [pc, #160]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	220c      	movs	r2, #12
 8000e56:	401a      	ands	r2, r3
 8000e58:	6863      	ldr	r3, [r4, #4]
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d013      	beq.n	8000e88 <HAL_RCC_ClockConfig+0xc4>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e60:	f7ff fb4a 	bl	80004f8 <HAL_GetTick>
 8000e64:	1b80      	subs	r0, r0, r6
 8000e66:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <HAL_RCC_ClockConfig+0x134>)
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	d9f1      	bls.n	8000e50 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	e035      	b.n	8000edc <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e70:	4a20      	ldr	r2, [pc, #128]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	0192      	lsls	r2, r2, #6
 8000e76:	d4e2      	bmi.n	8000e3e <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8000e78:	2001      	movs	r0, #1
 8000e7a:	e02f      	b.n	8000edc <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000e7e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000e80:	0392      	lsls	r2, r2, #14
 8000e82:	d4dc      	bmi.n	8000e3e <HAL_RCC_ClockConfig+0x7a>
        return HAL_ERROR;
 8000e84:	2001      	movs	r0, #1
 8000e86:	e029      	b.n	8000edc <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000e88:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <HAL_RCC_ClockConfig+0x12c>)
 8000e8a:	681a      	ldr	r2, [r3, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4013      	ands	r3, r2
 8000e90:	42ab      	cmp	r3, r5
 8000e92:	d909      	bls.n	8000ea8 <HAL_RCC_ClockConfig+0xe4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e94:	4916      	ldr	r1, [pc, #88]	@ (8000ef0 <HAL_RCC_ClockConfig+0x12c>)
 8000e96:	680b      	ldr	r3, [r1, #0]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4393      	bics	r3, r2
 8000e9c:	432b      	orrs	r3, r5
 8000e9e:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ea0:	680b      	ldr	r3, [r1, #0]
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	42aa      	cmp	r2, r5
 8000ea6:	d120      	bne.n	8000eea <HAL_RCC_ClockConfig+0x126>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ea8:	6823      	ldr	r3, [r4, #0]
 8000eaa:	075b      	lsls	r3, r3, #29
 8000eac:	d506      	bpl.n	8000ebc <HAL_RCC_ClockConfig+0xf8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000eae:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000eb0:	6853      	ldr	r3, [r2, #4]
 8000eb2:	4912      	ldr	r1, [pc, #72]	@ (8000efc <HAL_RCC_ClockConfig+0x138>)
 8000eb4:	400b      	ands	r3, r1
 8000eb6:	68e1      	ldr	r1, [r4, #12]
 8000eb8:	430b      	orrs	r3, r1
 8000eba:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000ebc:	f7ff ff46 	bl	8000d4c <HAL_RCC_GetSysClockFreq>
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_RCC_ClockConfig+0x130>)
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	0912      	lsrs	r2, r2, #4
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	4013      	ands	r3, r2
 8000eca:	4a0d      	ldr	r2, [pc, #52]	@ (8000f00 <HAL_RCC_ClockConfig+0x13c>)
 8000ecc:	5cd3      	ldrb	r3, [r2, r3]
 8000ece:	40d8      	lsrs	r0, r3
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_RCC_ClockConfig+0x140>)
 8000ed2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f7ff facb 	bl	8000470 <HAL_InitTick>
  return HAL_OK;
 8000eda:	2000      	movs	r0, #0
}
 8000edc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000ede:	2001      	movs	r0, #1
 8000ee0:	e7fc      	b.n	8000edc <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	e7fa      	b.n	8000edc <HAL_RCC_ClockConfig+0x118>
        return HAL_ERROR;
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	e7f8      	b.n	8000edc <HAL_RCC_ClockConfig+0x118>
      return HAL_ERROR;
 8000eea:	2001      	movs	r0, #1
 8000eec:	e7f6      	b.n	8000edc <HAL_RCC_ClockConfig+0x118>
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	40022000 	.word	0x40022000
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	00001388 	.word	0x00001388
 8000efc:	fffff8ff 	.word	0xfffff8ff
 8000f00:	0800199c 	.word	0x0800199c
 8000f04:	2000000c 	.word	0x2000000c

08000f08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f0a:	46d6      	mov	lr, sl
 8000f0c:	464f      	mov	r7, r9
 8000f0e:	4646      	mov	r6, r8
 8000f10:	b5c0      	push	{r6, r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	0006      	movs	r6, r0
 8000f16:	000d      	movs	r5, r1
 8000f18:	4690      	mov	r8, r2
 8000f1a:	001f      	movs	r7, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8000f1c:	f7ff faec 	bl	80004f8 <HAL_GetTick>
 8000f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8000f22:	1a18      	subs	r0, r3, r0
 8000f24:	4681      	mov	r9, r0
 8000f26:	44b9      	add	r9, r7
  tmp_tickstart = HAL_GetTick();
 8000f28:	f7ff fae6 	bl	80004f8 <HAL_GetTick>
 8000f2c:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8000f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000fe0 <SPI_WaitFlagStateUntilTimeout+0xd8>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	015b      	lsls	r3, r3, #5
 8000f34:	0d1b      	lsrs	r3, r3, #20
 8000f36:	464a      	mov	r2, r9
 8000f38:	4353      	muls	r3, r2
 8000f3a:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000f3c:	6833      	ldr	r3, [r6, #0]
 8000f3e:	689c      	ldr	r4, [r3, #8]
 8000f40:	402c      	ands	r4, r5
 8000f42:	1b64      	subs	r4, r4, r5
 8000f44:	4263      	negs	r3, r4
 8000f46:	415c      	adcs	r4, r3
 8000f48:	4544      	cmp	r4, r8
 8000f4a:	d042      	beq.n	8000fd2 <SPI_WaitFlagStateUntilTimeout+0xca>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000f4c:	1c7b      	adds	r3, r7, #1
 8000f4e:	d0f5      	beq.n	8000f3c <SPI_WaitFlagStateUntilTimeout+0x34>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8000f50:	f7ff fad2 	bl	80004f8 <HAL_GetTick>
 8000f54:	4653      	mov	r3, sl
 8000f56:	1ac0      	subs	r0, r0, r3
 8000f58:	4548      	cmp	r0, r9
 8000f5a:	d208      	bcs.n	8000f6e <SPI_WaitFlagStateUntilTimeout+0x66>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8000f5c:	9a01      	ldr	r2, [sp, #4]
 8000f5e:	2a00      	cmp	r2, #0
 8000f60:	d000      	beq.n	8000f64 <SPI_WaitFlagStateUntilTimeout+0x5c>
 8000f62:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8000f64:	9b01      	ldr	r3, [sp, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	9301      	str	r3, [sp, #4]
 8000f6a:	4691      	mov	r9, r2
 8000f6c:	e7e6      	b.n	8000f3c <SPI_WaitFlagStateUntilTimeout+0x34>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000f6e:	6832      	ldr	r2, [r6, #0]
 8000f70:	6853      	ldr	r3, [r2, #4]
 8000f72:	21e0      	movs	r1, #224	@ 0xe0
 8000f74:	438b      	bics	r3, r1
 8000f76:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f78:	6872      	ldr	r2, [r6, #4]
 8000f7a:	2382      	movs	r3, #130	@ 0x82
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d00c      	beq.n	8000f9c <SPI_WaitFlagStateUntilTimeout+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f82:	6ab2      	ldr	r2, [r6, #40]	@ 0x28
 8000f84:	2380      	movs	r3, #128	@ 0x80
 8000f86:	019b      	lsls	r3, r3, #6
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d016      	beq.n	8000fba <SPI_WaitFlagStateUntilTimeout+0xb2>
        hspi->State = HAL_SPI_STATE_READY;
 8000f8c:	235d      	movs	r3, #93	@ 0x5d
 8000f8e:	2201      	movs	r2, #1
 8000f90:	54f2      	strb	r2, [r6, r3]
        __HAL_UNLOCK(hspi);
 8000f92:	3b01      	subs	r3, #1
 8000f94:	2200      	movs	r2, #0
 8000f96:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8000f98:	2003      	movs	r0, #3
 8000f9a:	e01b      	b.n	8000fd4 <SPI_WaitFlagStateUntilTimeout+0xcc>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f9c:	68b3      	ldr	r3, [r6, #8]
 8000f9e:	2280      	movs	r2, #128	@ 0x80
 8000fa0:	0212      	lsls	r2, r2, #8
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d003      	beq.n	8000fae <SPI_WaitFlagStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000fa6:	2280      	movs	r2, #128	@ 0x80
 8000fa8:	00d2      	lsls	r2, r2, #3
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d1e9      	bne.n	8000f82 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8000fae:	6832      	ldr	r2, [r6, #0]
 8000fb0:	6813      	ldr	r3, [r2, #0]
 8000fb2:	2140      	movs	r1, #64	@ 0x40
 8000fb4:	438b      	bics	r3, r1
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	e7e3      	b.n	8000f82 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8000fba:	6832      	ldr	r2, [r6, #0]
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	4909      	ldr	r1, [pc, #36]	@ (8000fe4 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8000fc0:	400b      	ands	r3, r1
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	6832      	ldr	r2, [r6, #0]
 8000fc6:	6811      	ldr	r1, [r2, #0]
 8000fc8:	2380      	movs	r3, #128	@ 0x80
 8000fca:	019b      	lsls	r3, r3, #6
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	e7dc      	b.n	8000f8c <SPI_WaitFlagStateUntilTimeout+0x84>
    }
  }

  return HAL_OK;
 8000fd2:	2000      	movs	r0, #0
}
 8000fd4:	b002      	add	sp, #8
 8000fd6:	bce0      	pop	{r5, r6, r7}
 8000fd8:	46ba      	mov	sl, r7
 8000fda:	46b1      	mov	r9, r6
 8000fdc:	46a8      	mov	r8, r5
 8000fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	ffffdfff 	.word	0xffffdfff

08000fe8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	46de      	mov	lr, fp
 8000fec:	4657      	mov	r7, sl
 8000fee:	464e      	mov	r6, r9
 8000ff0:	4645      	mov	r5, r8
 8000ff2:	b5e0      	push	{r5, r6, r7, lr}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	0007      	movs	r7, r0
 8000ff8:	000d      	movs	r5, r1
 8000ffa:	0016      	movs	r6, r2
 8000ffc:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8000ffe:	466b      	mov	r3, sp
 8001000:	2200      	movs	r2, #0
 8001002:	70da      	strb	r2, [r3, #3]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001004:	f7ff fa78 	bl	80004f8 <HAL_GetTick>
 8001008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800100a:	1a18      	subs	r0, r3, r0
 800100c:	4440      	add	r0, r8
 800100e:	4681      	mov	r9, r0
  tmp_tickstart = HAL_GetTick();
 8001010:	f7ff fa72 	bl	80004f8 <HAL_GetTick>
 8001014:	4682      	mov	sl, r0

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	469b      	mov	fp, r3

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800101a:	4b34      	ldr	r3, [pc, #208]	@ (80010ec <SPI_WaitFifoStateUntilTimeout+0x104>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	009a      	lsls	r2, r3, #2
 8001020:	18d2      	adds	r2, r2, r3
 8001022:	00d3      	lsls	r3, r2, #3
 8001024:	1a9b      	subs	r3, r3, r2
 8001026:	0d1b      	lsrs	r3, r3, #20
 8001028:	464a      	mov	r2, r9
 800102a:	4353      	muls	r3, r2
 800102c:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800102e:	e002      	b.n	8001036 <SPI_WaitFifoStateUntilTimeout+0x4e>
      tmpreg8 = *ptmpreg8;
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
    }

    if (Timeout != HAL_MAX_DELAY)
 8001030:	4643      	mov	r3, r8
 8001032:	3301      	adds	r3, #1
 8001034:	d111      	bne.n	800105a <SPI_WaitFifoStateUntilTimeout+0x72>
  while ((hspi->Instance->SR & Fifo) != State)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689c      	ldr	r4, [r3, #8]
 800103a:	402c      	ands	r4, r5
 800103c:	42b4      	cmp	r4, r6
 800103e:	d04d      	beq.n	80010dc <SPI_WaitFifoStateUntilTimeout+0xf4>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001040:	23c0      	movs	r3, #192	@ 0xc0
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	429d      	cmp	r5, r3
 8001046:	d1f3      	bne.n	8001030 <SPI_WaitFifoStateUntilTimeout+0x48>
 8001048:	2e00      	cmp	r6, #0
 800104a:	d1f1      	bne.n	8001030 <SPI_WaitFifoStateUntilTimeout+0x48>
      tmpreg8 = *ptmpreg8;
 800104c:	465b      	mov	r3, fp
 800104e:	7b1b      	ldrb	r3, [r3, #12]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	466a      	mov	r2, sp
 8001054:	70d3      	strb	r3, [r2, #3]
      UNUSED(tmpreg8);
 8001056:	78d3      	ldrb	r3, [r2, #3]
 8001058:	e7ea      	b.n	8001030 <SPI_WaitFifoStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800105a:	f7ff fa4d 	bl	80004f8 <HAL_GetTick>
 800105e:	4653      	mov	r3, sl
 8001060:	1ac0      	subs	r0, r0, r3
 8001062:	4548      	cmp	r0, r9
 8001064:	d208      	bcs.n	8001078 <SPI_WaitFifoStateUntilTimeout+0x90>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001066:	9a01      	ldr	r2, [sp, #4]
 8001068:	2a00      	cmp	r2, #0
 800106a:	d000      	beq.n	800106e <SPI_WaitFifoStateUntilTimeout+0x86>
 800106c:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 800106e:	9b01      	ldr	r3, [sp, #4]
 8001070:	3b01      	subs	r3, #1
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	4691      	mov	r9, r2
 8001076:	e7de      	b.n	8001036 <SPI_WaitFifoStateUntilTimeout+0x4e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	6853      	ldr	r3, [r2, #4]
 800107c:	21e0      	movs	r1, #224	@ 0xe0
 800107e:	438b      	bics	r3, r1
 8001080:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	2382      	movs	r3, #130	@ 0x82
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	429a      	cmp	r2, r3
 800108a:	d00c      	beq.n	80010a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800108c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800108e:	2380      	movs	r3, #128	@ 0x80
 8001090:	019b      	lsls	r3, r3, #6
 8001092:	429a      	cmp	r2, r3
 8001094:	d016      	beq.n	80010c4 <SPI_WaitFifoStateUntilTimeout+0xdc>
        hspi->State = HAL_SPI_STATE_READY;
 8001096:	235d      	movs	r3, #93	@ 0x5d
 8001098:	2201      	movs	r2, #1
 800109a:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 800109c:	3b01      	subs	r3, #1
 800109e:	2200      	movs	r2, #0
 80010a0:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 80010a2:	2003      	movs	r0, #3
 80010a4:	e01b      	b.n	80010de <SPI_WaitFifoStateUntilTimeout+0xf6>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2280      	movs	r2, #128	@ 0x80
 80010aa:	0212      	lsls	r2, r2, #8
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d003      	beq.n	80010b8 <SPI_WaitFifoStateUntilTimeout+0xd0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80010b0:	2280      	movs	r2, #128	@ 0x80
 80010b2:	00d2      	lsls	r2, r2, #3
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d1e9      	bne.n	800108c <SPI_WaitFifoStateUntilTimeout+0xa4>
          __HAL_SPI_DISABLE(hspi);
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	2140      	movs	r1, #64	@ 0x40
 80010be:	438b      	bics	r3, r1
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	e7e3      	b.n	800108c <SPI_WaitFifoStateUntilTimeout+0xa4>
          SPI_RESET_CRC(hspi);
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	4909      	ldr	r1, [pc, #36]	@ (80010f0 <SPI_WaitFifoStateUntilTimeout+0x108>)
 80010ca:	400b      	ands	r3, r1
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	6811      	ldr	r1, [r2, #0]
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	019b      	lsls	r3, r3, #6
 80010d6:	430b      	orrs	r3, r1
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	e7dc      	b.n	8001096 <SPI_WaitFifoStateUntilTimeout+0xae>
    }
  }

  return HAL_OK;
 80010dc:	2000      	movs	r0, #0
}
 80010de:	b003      	add	sp, #12
 80010e0:	bcf0      	pop	{r4, r5, r6, r7}
 80010e2:	46bb      	mov	fp, r7
 80010e4:	46b2      	mov	sl, r6
 80010e6:	46a9      	mov	r9, r5
 80010e8:	46a0      	mov	r8, r4
 80010ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ec:	2000000c 	.word	0x2000000c
 80010f0:	ffffdfff 	.word	0xffffdfff

080010f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80010f4:	b570      	push	{r4, r5, r6, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	0004      	movs	r4, r0
 80010fa:	000d      	movs	r5, r1
 80010fc:	0016      	movs	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80010fe:	21c0      	movs	r1, #192	@ 0xc0
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	002b      	movs	r3, r5
 8001104:	2200      	movs	r2, #0
 8001106:	0149      	lsls	r1, r1, #5
 8001108:	f7ff ff6e 	bl	8000fe8 <SPI_WaitFifoStateUntilTimeout>
 800110c:	2800      	cmp	r0, #0
 800110e:	d118      	bne.n	8001142 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001110:	9600      	str	r6, [sp, #0]
 8001112:	002b      	movs	r3, r5
 8001114:	2200      	movs	r2, #0
 8001116:	2180      	movs	r1, #128	@ 0x80
 8001118:	0020      	movs	r0, r4
 800111a:	f7ff fef5 	bl	8000f08 <SPI_WaitFlagStateUntilTimeout>
 800111e:	2800      	cmp	r0, #0
 8001120:	d116      	bne.n	8001150 <SPI_EndRxTxTransaction+0x5c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001122:	21c0      	movs	r1, #192	@ 0xc0
 8001124:	9600      	str	r6, [sp, #0]
 8001126:	002b      	movs	r3, r5
 8001128:	2200      	movs	r2, #0
 800112a:	00c9      	lsls	r1, r1, #3
 800112c:	0020      	movs	r0, r4
 800112e:	f7ff ff5b 	bl	8000fe8 <SPI_WaitFifoStateUntilTimeout>
 8001132:	2800      	cmp	r0, #0
 8001134:	d00a      	beq.n	800114c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001136:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001138:	2220      	movs	r2, #32
 800113a:	4313      	orrs	r3, r2
 800113c:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800113e:	2003      	movs	r0, #3
 8001140:	e004      	b.n	800114c <SPI_EndRxTxTransaction+0x58>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001142:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001144:	2220      	movs	r2, #32
 8001146:	4313      	orrs	r3, r2
 8001148:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 800114a:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 800114c:	b002      	add	sp, #8
 800114e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001150:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001152:	2220      	movs	r2, #32
 8001154:	4313      	orrs	r3, r2
 8001156:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 8001158:	2003      	movs	r0, #3
 800115a:	e7f7      	b.n	800114c <SPI_EndRxTxTransaction+0x58>

0800115c <SPI_EndRxTransaction>:
{
 800115c:	b570      	push	{r4, r5, r6, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	0004      	movs	r4, r0
 8001162:	000d      	movs	r5, r1
 8001164:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001166:	6842      	ldr	r2, [r0, #4]
 8001168:	2382      	movs	r3, #130	@ 0x82
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	429a      	cmp	r2, r3
 800116e:	d00f      	beq.n	8001190 <SPI_EndRxTransaction+0x34>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001170:	9600      	str	r6, [sp, #0]
 8001172:	002b      	movs	r3, r5
 8001174:	2200      	movs	r2, #0
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	0020      	movs	r0, r4
 800117a:	f7ff fec5 	bl	8000f08 <SPI_WaitFlagStateUntilTimeout>
 800117e:	2800      	cmp	r0, #0
 8001180:	d115      	bne.n	80011ae <SPI_EndRxTransaction+0x52>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001182:	6862      	ldr	r2, [r4, #4]
 8001184:	2382      	movs	r3, #130	@ 0x82
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	429a      	cmp	r2, r3
 800118a:	d016      	beq.n	80011ba <SPI_EndRxTransaction+0x5e>
}
 800118c:	b002      	add	sp, #8
 800118e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001190:	6883      	ldr	r3, [r0, #8]
 8001192:	2280      	movs	r2, #128	@ 0x80
 8001194:	0212      	lsls	r2, r2, #8
 8001196:	4293      	cmp	r3, r2
 8001198:	d003      	beq.n	80011a2 <SPI_EndRxTransaction+0x46>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800119a:	2280      	movs	r2, #128	@ 0x80
 800119c:	00d2      	lsls	r2, r2, #3
 800119e:	4293      	cmp	r3, r2
 80011a0:	d1e6      	bne.n	8001170 <SPI_EndRxTransaction+0x14>
    __HAL_SPI_DISABLE(hspi);
 80011a2:	6822      	ldr	r2, [r4, #0]
 80011a4:	6813      	ldr	r3, [r2, #0]
 80011a6:	2140      	movs	r1, #64	@ 0x40
 80011a8:	438b      	bics	r3, r1
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	e7e0      	b.n	8001170 <SPI_EndRxTransaction+0x14>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011ae:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80011b0:	2220      	movs	r2, #32
 80011b2:	4313      	orrs	r3, r2
 80011b4:	6623      	str	r3, [r4, #96]	@ 0x60
    return HAL_TIMEOUT;
 80011b6:	2003      	movs	r0, #3
 80011b8:	e7e8      	b.n	800118c <SPI_EndRxTransaction+0x30>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80011ba:	68a3      	ldr	r3, [r4, #8]
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	0212      	lsls	r2, r2, #8
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d003      	beq.n	80011cc <SPI_EndRxTransaction+0x70>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80011c4:	2280      	movs	r2, #128	@ 0x80
 80011c6:	00d2      	lsls	r2, r2, #3
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d1df      	bne.n	800118c <SPI_EndRxTransaction+0x30>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80011cc:	21c0      	movs	r1, #192	@ 0xc0
 80011ce:	9600      	str	r6, [sp, #0]
 80011d0:	002b      	movs	r3, r5
 80011d2:	2200      	movs	r2, #0
 80011d4:	00c9      	lsls	r1, r1, #3
 80011d6:	0020      	movs	r0, r4
 80011d8:	f7ff ff06 	bl	8000fe8 <SPI_WaitFifoStateUntilTimeout>
 80011dc:	2800      	cmp	r0, #0
 80011de:	d0d5      	beq.n	800118c <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80011e0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80011e2:	2220      	movs	r2, #32
 80011e4:	4313      	orrs	r3, r2
 80011e6:	6623      	str	r3, [r4, #96]	@ 0x60
      return HAL_TIMEOUT;
 80011e8:	2003      	movs	r0, #3
 80011ea:	e7cf      	b.n	800118c <SPI_EndRxTransaction+0x30>

080011ec <HAL_SPI_Init>:
{
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	1e04      	subs	r4, r0, #0
  if (hspi == NULL)
 80011f0:	d100      	bne.n	80011f4 <HAL_SPI_Init+0x8>
 80011f2:	e078      	b.n	80012e6 <HAL_SPI_Init+0xfa>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80011f4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d107      	bne.n	800120a <HAL_SPI_Init+0x1e>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80011fa:	6842      	ldr	r2, [r0, #4]
 80011fc:	3305      	adds	r3, #5
 80011fe:	33ff      	adds	r3, #255	@ 0xff
 8001200:	429a      	cmp	r2, r3
 8001202:	d005      	beq.n	8001210 <HAL_SPI_Init+0x24>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001204:	2300      	movs	r3, #0
 8001206:	61c3      	str	r3, [r0, #28]
 8001208:	e002      	b.n	8001210 <HAL_SPI_Init+0x24>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800120e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001210:	2300      	movs	r3, #0
 8001212:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001214:	335d      	adds	r3, #93	@ 0x5d
 8001216:	5ce3      	ldrb	r3, [r4, r3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d05a      	beq.n	80012d2 <HAL_SPI_Init+0xe6>
  hspi->State = HAL_SPI_STATE_BUSY;
 800121c:	235d      	movs	r3, #93	@ 0x5d
 800121e:	2202      	movs	r2, #2
 8001220:	54e2      	strb	r2, [r4, r3]
  __HAL_SPI_DISABLE(hspi);
 8001222:	6822      	ldr	r2, [r4, #0]
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	2140      	movs	r1, #64	@ 0x40
 8001228:	438b      	bics	r3, r1
 800122a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800122c:	68e3      	ldr	r3, [r4, #12]
 800122e:	22e0      	movs	r2, #224	@ 0xe0
 8001230:	00d2      	lsls	r2, r2, #3
 8001232:	4293      	cmp	r3, r2
 8001234:	d954      	bls.n	80012e0 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001236:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001238:	21f0      	movs	r1, #240	@ 0xf0
 800123a:	0109      	lsls	r1, r1, #4
 800123c:	428b      	cmp	r3, r1
 800123e:	d005      	beq.n	800124c <HAL_SPI_Init+0x60>
 8001240:	21e0      	movs	r1, #224	@ 0xe0
 8001242:	00c9      	lsls	r1, r1, #3
 8001244:	428b      	cmp	r3, r1
 8001246:	d001      	beq.n	800124c <HAL_SPI_Init+0x60>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	62a3      	str	r3, [r4, #40]	@ 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800124c:	6863      	ldr	r3, [r4, #4]
 800124e:	2182      	movs	r1, #130	@ 0x82
 8001250:	0049      	lsls	r1, r1, #1
 8001252:	400b      	ands	r3, r1
 8001254:	68a1      	ldr	r1, [r4, #8]
 8001256:	2084      	movs	r0, #132	@ 0x84
 8001258:	0200      	lsls	r0, r0, #8
 800125a:	4001      	ands	r1, r0
 800125c:	430b      	orrs	r3, r1
 800125e:	6920      	ldr	r0, [r4, #16]
 8001260:	2102      	movs	r1, #2
 8001262:	4001      	ands	r1, r0
 8001264:	430b      	orrs	r3, r1
 8001266:	6960      	ldr	r0, [r4, #20]
 8001268:	2101      	movs	r1, #1
 800126a:	4008      	ands	r0, r1
 800126c:	4303      	orrs	r3, r0
 800126e:	69a0      	ldr	r0, [r4, #24]
 8001270:	2580      	movs	r5, #128	@ 0x80
 8001272:	00ad      	lsls	r5, r5, #2
 8001274:	4028      	ands	r0, r5
 8001276:	4303      	orrs	r3, r0
 8001278:	69e5      	ldr	r5, [r4, #28]
 800127a:	2038      	movs	r0, #56	@ 0x38
 800127c:	4028      	ands	r0, r5
 800127e:	4303      	orrs	r3, r0
 8001280:	6a25      	ldr	r5, [r4, #32]
 8001282:	2080      	movs	r0, #128	@ 0x80
 8001284:	4028      	ands	r0, r5
 8001286:	4303      	orrs	r3, r0
 8001288:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800128a:	2580      	movs	r5, #128	@ 0x80
 800128c:	01ad      	lsls	r5, r5, #6
 800128e:	4028      	ands	r0, r5
 8001290:	6825      	ldr	r5, [r4, #0]
 8001292:	4303      	orrs	r3, r0
 8001294:	602b      	str	r3, [r5, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001296:	8b60      	ldrh	r0, [r4, #26]
 8001298:	2304      	movs	r3, #4
 800129a:	4003      	ands	r3, r0
 800129c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800129e:	2010      	movs	r0, #16
 80012a0:	4028      	ands	r0, r5
 80012a2:	4303      	orrs	r3, r0
 80012a4:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80012a6:	2008      	movs	r0, #8
 80012a8:	4028      	ands	r0, r5
 80012aa:	4303      	orrs	r3, r0
 80012ac:	68e0      	ldr	r0, [r4, #12]
 80012ae:	25f0      	movs	r5, #240	@ 0xf0
 80012b0:	012d      	lsls	r5, r5, #4
 80012b2:	4028      	ands	r0, r5
 80012b4:	4303      	orrs	r3, r0
 80012b6:	6820      	ldr	r0, [r4, #0]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	6043      	str	r3, [r0, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012bc:	6822      	ldr	r2, [r4, #0]
 80012be:	69d3      	ldr	r3, [r2, #28]
 80012c0:	480a      	ldr	r0, [pc, #40]	@ (80012ec <HAL_SPI_Init+0x100>)
 80012c2:	4003      	ands	r3, r0
 80012c4:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80012ca:	335d      	adds	r3, #93	@ 0x5d
 80012cc:	54e1      	strb	r1, [r4, r3]
  return HAL_OK;
 80012ce:	2000      	movs	r0, #0
}
 80012d0:	bd70      	pop	{r4, r5, r6, pc}
    hspi->Lock = HAL_UNLOCKED;
 80012d2:	335c      	adds	r3, #92	@ 0x5c
 80012d4:	2200      	movs	r2, #0
 80012d6:	54e2      	strb	r2, [r4, r3]
    HAL_SPI_MspInit(hspi);
 80012d8:	0020      	movs	r0, r4
 80012da:	f7ff fa63 	bl	80007a4 <HAL_SPI_MspInit>
 80012de:	e79d      	b.n	800121c <HAL_SPI_Init+0x30>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80012e0:	2280      	movs	r2, #128	@ 0x80
 80012e2:	0152      	lsls	r2, r2, #5
 80012e4:	e7a8      	b.n	8001238 <HAL_SPI_Init+0x4c>
    return HAL_ERROR;
 80012e6:	2001      	movs	r0, #1
 80012e8:	e7f2      	b.n	80012d0 <HAL_SPI_Init+0xe4>
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	fffff7ff 	.word	0xfffff7ff

080012f0 <HAL_SPI_Transmit>:
{
 80012f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012f2:	46ce      	mov	lr, r9
 80012f4:	b500      	push	{lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	0004      	movs	r4, r0
 80012fa:	9101      	str	r1, [sp, #4]
 80012fc:	4691      	mov	r9, r2
 80012fe:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001300:	235c      	movs	r3, #92	@ 0x5c
 8001302:	5cc3      	ldrb	r3, [r0, r3]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d100      	bne.n	800130a <HAL_SPI_Transmit+0x1a>
 8001308:	e0c9      	b.n	800149e <HAL_SPI_Transmit+0x1ae>
 800130a:	235c      	movs	r3, #92	@ 0x5c
 800130c:	2201      	movs	r2, #1
 800130e:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001310:	f7ff f8f2 	bl	80004f8 <HAL_GetTick>
 8001314:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001316:	235d      	movs	r3, #93	@ 0x5d
 8001318:	5ce3      	ldrb	r3, [r4, r3]
 800131a:	b2df      	uxtb	r7, r3
 800131c:	2b01      	cmp	r3, #1
 800131e:	d000      	beq.n	8001322 <HAL_SPI_Transmit+0x32>
 8001320:	e0b4      	b.n	800148c <HAL_SPI_Transmit+0x19c>
  if ((pData == NULL) || (Size == 0U))
 8001322:	9901      	ldr	r1, [sp, #4]
 8001324:	2900      	cmp	r1, #0
 8001326:	d100      	bne.n	800132a <HAL_SPI_Transmit+0x3a>
 8001328:	e0b1      	b.n	800148e <HAL_SPI_Transmit+0x19e>
 800132a:	464b      	mov	r3, r9
 800132c:	2b00      	cmp	r3, #0
 800132e:	d100      	bne.n	8001332 <HAL_SPI_Transmit+0x42>
 8001330:	e0ad      	b.n	800148e <HAL_SPI_Transmit+0x19e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001332:	235d      	movs	r3, #93	@ 0x5d
 8001334:	2203      	movs	r2, #3
 8001336:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001338:	2300      	movs	r3, #0
 800133a:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800133c:	63a1      	str	r1, [r4, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800133e:	464a      	mov	r2, r9
 8001340:	87a2      	strh	r2, [r4, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8001342:	87e2      	strh	r2, [r4, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001344:	6423      	str	r3, [r4, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8001346:	2244      	movs	r2, #68	@ 0x44
 8001348:	52a3      	strh	r3, [r4, r2]
  hspi->RxXferCount = 0U;
 800134a:	3202      	adds	r2, #2
 800134c:	52a3      	strh	r3, [r4, r2]
  hspi->TxISR       = NULL;
 800134e:	6523      	str	r3, [r4, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8001350:	64e3      	str	r3, [r4, #76]	@ 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001352:	68a2      	ldr	r2, [r4, #8]
 8001354:	2380      	movs	r3, #128	@ 0x80
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	429a      	cmp	r2, r3
 800135a:	d01e      	beq.n	800139a <HAL_SPI_Transmit+0xaa>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800135c:	6822      	ldr	r2, [r4, #0]
 800135e:	6813      	ldr	r3, [r2, #0]
 8001360:	065b      	lsls	r3, r3, #25
 8001362:	d403      	bmi.n	800136c <HAL_SPI_Transmit+0x7c>
    __HAL_SPI_ENABLE(hspi);
 8001364:	6813      	ldr	r3, [r2, #0]
 8001366:	2140      	movs	r1, #64	@ 0x40
 8001368:	430b      	orrs	r3, r1
 800136a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800136c:	68e2      	ldr	r2, [r4, #12]
 800136e:	23e0      	movs	r3, #224	@ 0xe0
 8001370:	00db      	lsls	r3, r3, #3
 8001372:	429a      	cmp	r2, r3
 8001374:	d93d      	bls.n	80013f2 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001376:	6863      	ldr	r3, [r4, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_SPI_Transmit+0x92>
 800137c:	464b      	mov	r3, r9
 800137e:	2b01      	cmp	r3, #1
 8001380:	d120      	bne.n	80013c4 <HAL_SPI_Transmit+0xd4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001382:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001384:	6823      	ldr	r3, [r4, #0]
 8001386:	8812      	ldrh	r2, [r2, #0]
 8001388:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800138a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800138c:	3302      	adds	r3, #2
 800138e:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001390:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001392:	3b01      	subs	r3, #1
 8001394:	b29b      	uxth	r3, r3
 8001396:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001398:	e014      	b.n	80013c4 <HAL_SPI_Transmit+0xd4>
    __HAL_SPI_DISABLE(hspi);
 800139a:	6822      	ldr	r2, [r4, #0]
 800139c:	6813      	ldr	r3, [r2, #0]
 800139e:	2140      	movs	r1, #64	@ 0x40
 80013a0:	438b      	bics	r3, r1
 80013a2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80013a4:	6822      	ldr	r2, [r4, #0]
 80013a6:	6811      	ldr	r1, [r2, #0]
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	01db      	lsls	r3, r3, #7
 80013ac:	430b      	orrs	r3, r1
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	e7d4      	b.n	800135c <HAL_SPI_Transmit+0x6c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80013b2:	f7ff f8a1 	bl	80004f8 <HAL_GetTick>
 80013b6:	1b80      	subs	r0, r0, r6
 80013b8:	42a8      	cmp	r0, r5
 80013ba:	d301      	bcc.n	80013c0 <HAL_SPI_Transmit+0xd0>
 80013bc:	1c6b      	adds	r3, r5, #1
 80013be:	d113      	bne.n	80013e8 <HAL_SPI_Transmit+0xf8>
 80013c0:	2d00      	cmp	r5, #0
 80013c2:	d011      	beq.n	80013e8 <HAL_SPI_Transmit+0xf8>
    while (hspi->TxXferCount > 0U)
 80013c4:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d045      	beq.n	8001456 <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80013ca:	6822      	ldr	r2, [r4, #0]
 80013cc:	6893      	ldr	r3, [r2, #8]
 80013ce:	079b      	lsls	r3, r3, #30
 80013d0:	d5ef      	bpl.n	80013b2 <HAL_SPI_Transmit+0xc2>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80013d2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80013d4:	881b      	ldrh	r3, [r3, #0]
 80013d6:	60d3      	str	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80013d8:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80013da:	3302      	adds	r3, #2
 80013dc:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 80013de:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80013e0:	3b01      	subs	r3, #1
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 80013e6:	e7ed      	b.n	80013c4 <HAL_SPI_Transmit+0xd4>
          hspi->State = HAL_SPI_STATE_READY;
 80013e8:	235d      	movs	r3, #93	@ 0x5d
 80013ea:	2201      	movs	r2, #1
 80013ec:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 80013ee:	2703      	movs	r7, #3
          goto error;
 80013f0:	e04d      	b.n	800148e <HAL_SPI_Transmit+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80013f2:	6863      	ldr	r3, [r4, #4]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_SPI_Transmit+0x10e>
 80013f8:	464b      	mov	r3, r9
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d114      	bne.n	8001428 <HAL_SPI_Transmit+0x138>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80013fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001400:	6823      	ldr	r3, [r4, #0]
 8001402:	7812      	ldrb	r2, [r2, #0]
 8001404:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001406:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001408:	3301      	adds	r3, #1
 800140a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800140c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800140e:	3b01      	subs	r3, #1
 8001410:	b29b      	uxth	r3, r3
 8001412:	87e3      	strh	r3, [r4, #62]	@ 0x3e
 8001414:	e008      	b.n	8001428 <HAL_SPI_Transmit+0x138>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001416:	f7ff f86f 	bl	80004f8 <HAL_GetTick>
 800141a:	1b80      	subs	r0, r0, r6
 800141c:	42a8      	cmp	r0, r5
 800141e:	d301      	bcc.n	8001424 <HAL_SPI_Transmit+0x134>
 8001420:	1c6b      	adds	r3, r5, #1
 8001422:	d113      	bne.n	800144c <HAL_SPI_Transmit+0x15c>
 8001424:	2d00      	cmp	r5, #0
 8001426:	d011      	beq.n	800144c <HAL_SPI_Transmit+0x15c>
    while (hspi->TxXferCount > 0U)
 8001428:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800142a:	2b00      	cmp	r3, #0
 800142c:	d013      	beq.n	8001456 <HAL_SPI_Transmit+0x166>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800142e:	6822      	ldr	r2, [r4, #0]
 8001430:	6893      	ldr	r3, [r2, #8]
 8001432:	079b      	lsls	r3, r3, #30
 8001434:	d5ef      	bpl.n	8001416 <HAL_SPI_Transmit+0x126>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001436:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800143c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800143e:	3301      	adds	r3, #1
 8001440:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001442:	8fe1      	ldrh	r1, [r4, #62]	@ 0x3e
 8001444:	3901      	subs	r1, #1
 8001446:	b289      	uxth	r1, r1
 8001448:	87e1      	strh	r1, [r4, #62]	@ 0x3e
 800144a:	e7ed      	b.n	8001428 <HAL_SPI_Transmit+0x138>
          hspi->State = HAL_SPI_STATE_READY;
 800144c:	235d      	movs	r3, #93	@ 0x5d
 800144e:	2201      	movs	r2, #1
 8001450:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 8001452:	2703      	movs	r7, #3
          goto error;
 8001454:	e01b      	b.n	800148e <HAL_SPI_Transmit+0x19e>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001456:	0032      	movs	r2, r6
 8001458:	0029      	movs	r1, r5
 800145a:	0020      	movs	r0, r4
 800145c:	f7ff fe4a 	bl	80010f4 <SPI_EndRxTxTransaction>
 8001460:	2800      	cmp	r0, #0
 8001462:	d001      	beq.n	8001468 <HAL_SPI_Transmit+0x178>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001464:	2320      	movs	r3, #32
 8001466:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001468:	68a3      	ldr	r3, [r4, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d106      	bne.n	800147c <HAL_SPI_Transmit+0x18c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800146e:	9303      	str	r3, [sp, #12]
 8001470:	6823      	ldr	r3, [r4, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	9203      	str	r2, [sp, #12]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	9303      	str	r3, [sp, #12]
 800147a:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800147c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_SPI_Transmit+0x19e>
    hspi->State = HAL_SPI_STATE_READY;
 8001482:	335d      	adds	r3, #93	@ 0x5d
 8001484:	2201      	movs	r2, #1
 8001486:	54e2      	strb	r2, [r4, r3]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001488:	2700      	movs	r7, #0
 800148a:	e000      	b.n	800148e <HAL_SPI_Transmit+0x19e>
    errorcode = HAL_BUSY;
 800148c:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 800148e:	235c      	movs	r3, #92	@ 0x5c
 8001490:	2200      	movs	r2, #0
 8001492:	54e2      	strb	r2, [r4, r3]
}
 8001494:	0038      	movs	r0, r7
 8001496:	b004      	add	sp, #16
 8001498:	bc80      	pop	{r7}
 800149a:	46b9      	mov	r9, r7
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800149e:	2702      	movs	r7, #2
 80014a0:	e7f8      	b.n	8001494 <HAL_SPI_Transmit+0x1a4>
	...

080014a4 <HAL_SPI_TransmitReceive>:
{
 80014a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a6:	b083      	sub	sp, #12
 80014a8:	0004      	movs	r4, r0
 80014aa:	9100      	str	r1, [sp, #0]
 80014ac:	9201      	str	r2, [sp, #4]
 80014ae:	001e      	movs	r6, r3
 80014b0:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 80014b2:	235c      	movs	r3, #92	@ 0x5c
 80014b4:	5cc3      	ldrb	r3, [r0, r3]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d100      	bne.n	80014bc <HAL_SPI_TransmitReceive+0x18>
 80014ba:	e116      	b.n	80016ea <HAL_SPI_TransmitReceive+0x246>
 80014bc:	235c      	movs	r3, #92	@ 0x5c
 80014be:	2201      	movs	r2, #1
 80014c0:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80014c2:	f7ff f819 	bl	80004f8 <HAL_GetTick>
 80014c6:	0007      	movs	r7, r0
  tmp_state           = hspi->State;
 80014c8:	235d      	movs	r3, #93	@ 0x5d
 80014ca:	5ce3      	ldrb	r3, [r4, r3]
 80014cc:	b2d9      	uxtb	r1, r3
  tmp_mode            = hspi->Init.Mode;
 80014ce:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d00b      	beq.n	80014ec <HAL_SPI_TransmitReceive+0x48>
 80014d4:	2382      	movs	r3, #130	@ 0x82
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	429a      	cmp	r2, r3
 80014da:	d000      	beq.n	80014de <HAL_SPI_TransmitReceive+0x3a>
 80014dc:	e0f3      	b.n	80016c6 <HAL_SPI_TransmitReceive+0x222>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80014de:	68a3      	ldr	r3, [r4, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d000      	beq.n	80014e6 <HAL_SPI_TransmitReceive+0x42>
 80014e4:	e0f5      	b.n	80016d2 <HAL_SPI_TransmitReceive+0x22e>
 80014e6:	2904      	cmp	r1, #4
 80014e8:	d000      	beq.n	80014ec <HAL_SPI_TransmitReceive+0x48>
 80014ea:	e0f4      	b.n	80016d6 <HAL_SPI_TransmitReceive+0x232>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80014ec:	9b00      	ldr	r3, [sp, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d100      	bne.n	80014f4 <HAL_SPI_TransmitReceive+0x50>
 80014f2:	e0f2      	b.n	80016da <HAL_SPI_TransmitReceive+0x236>
 80014f4:	9b01      	ldr	r3, [sp, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d100      	bne.n	80014fc <HAL_SPI_TransmitReceive+0x58>
 80014fa:	e0f0      	b.n	80016de <HAL_SPI_TransmitReceive+0x23a>
 80014fc:	2e00      	cmp	r6, #0
 80014fe:	d100      	bne.n	8001502 <HAL_SPI_TransmitReceive+0x5e>
 8001500:	e0ef      	b.n	80016e2 <HAL_SPI_TransmitReceive+0x23e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001502:	235d      	movs	r3, #93	@ 0x5d
 8001504:	5ce3      	ldrb	r3, [r4, r3]
 8001506:	2b04      	cmp	r3, #4
 8001508:	d002      	beq.n	8001510 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800150a:	235d      	movs	r3, #93	@ 0x5d
 800150c:	2205      	movs	r2, #5
 800150e:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001510:	2300      	movs	r3, #0
 8001512:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001514:	9a01      	ldr	r2, [sp, #4]
 8001516:	6422      	str	r2, [r4, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8001518:	2246      	movs	r2, #70	@ 0x46
 800151a:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferSize  = Size;
 800151c:	3a02      	subs	r2, #2
 800151e:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001520:	9a00      	ldr	r2, [sp, #0]
 8001522:	63a2      	str	r2, [r4, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8001524:	87e6      	strh	r6, [r4, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8001526:	87a6      	strh	r6, [r4, #60]	@ 0x3c
  hspi->RxISR       = NULL;
 8001528:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800152a:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800152c:	68e2      	ldr	r2, [r4, #12]
 800152e:	23e0      	movs	r3, #224	@ 0xe0
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	429a      	cmp	r2, r3
 8001534:	d923      	bls.n	800157e <HAL_SPI_TransmitReceive+0xda>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001536:	6822      	ldr	r2, [r4, #0]
 8001538:	6853      	ldr	r3, [r2, #4]
 800153a:	496d      	ldr	r1, [pc, #436]	@ (80016f0 <HAL_SPI_TransmitReceive+0x24c>)
 800153c:	400b      	ands	r3, r1
 800153e:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	0652      	lsls	r2, r2, #25
 8001546:	d403      	bmi.n	8001550 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	2140      	movs	r1, #64	@ 0x40
 800154c:	430a      	orrs	r2, r1
 800154e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001550:	68e2      	ldr	r2, [r4, #12]
 8001552:	23e0      	movs	r3, #224	@ 0xe0
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	429a      	cmp	r2, r3
 8001558:	d954      	bls.n	8001604 <HAL_SPI_TransmitReceive+0x160>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800155a:	6863      	ldr	r3, [r4, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <HAL_SPI_TransmitReceive+0xc0>
 8001560:	2e01      	cmp	r6, #1
 8001562:	d10a      	bne.n	800157a <HAL_SPI_TransmitReceive+0xd6>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001564:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	8812      	ldrh	r2, [r2, #0]
 800156a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800156c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800156e:	3302      	adds	r3, #2
 8001570:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 8001572:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001574:	3b01      	subs	r3, #1
 8001576:	b29b      	uxth	r3, r3
 8001578:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 800157a:	2601      	movs	r6, #1
 800157c:	e02c      	b.n	80015d8 <HAL_SPI_TransmitReceive+0x134>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800157e:	6822      	ldr	r2, [r4, #0]
 8001580:	6851      	ldr	r1, [r2, #4]
 8001582:	2380      	movs	r3, #128	@ 0x80
 8001584:	015b      	lsls	r3, r3, #5
 8001586:	430b      	orrs	r3, r1
 8001588:	6053      	str	r3, [r2, #4]
 800158a:	e7d9      	b.n	8001540 <HAL_SPI_TransmitReceive+0x9c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800158c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	60d3      	str	r3, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001592:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001594:	3302      	adds	r3, #2
 8001596:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 8001598:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800159a:	3b01      	subs	r3, #1
 800159c:	b29b      	uxth	r3, r3
 800159e:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 80015a0:	2600      	movs	r6, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80015a2:	6822      	ldr	r2, [r4, #0]
 80015a4:	6893      	ldr	r3, [r2, #8]
 80015a6:	07db      	lsls	r3, r3, #31
 80015a8:	d50f      	bpl.n	80015ca <HAL_SPI_TransmitReceive+0x126>
 80015aa:	2346      	movs	r3, #70	@ 0x46
 80015ac:	5ae3      	ldrh	r3, [r4, r3]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_SPI_TransmitReceive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80015b2:	68d2      	ldr	r2, [r2, #12]
 80015b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80015b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015ba:	3302      	adds	r3, #2
 80015bc:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 80015be:	2246      	movs	r2, #70	@ 0x46
 80015c0:	5aa3      	ldrh	r3, [r4, r2]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 80015c8:	2601      	movs	r6, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80015ca:	f7fe ff95 	bl	80004f8 <HAL_GetTick>
 80015ce:	1bc0      	subs	r0, r0, r7
 80015d0:	42a8      	cmp	r0, r5
 80015d2:	d301      	bcc.n	80015d8 <HAL_SPI_TransmitReceive+0x134>
 80015d4:	1c6b      	adds	r3, r5, #1
 80015d6:	d110      	bne.n	80015fa <HAL_SPI_TransmitReceive+0x156>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80015d8:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d103      	bne.n	80015e6 <HAL_SPI_TransmitReceive+0x142>
 80015de:	3346      	adds	r3, #70	@ 0x46
 80015e0:	5ae3      	ldrh	r3, [r4, r3]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d05e      	beq.n	80016a4 <HAL_SPI_TransmitReceive+0x200>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80015e6:	6822      	ldr	r2, [r4, #0]
 80015e8:	6893      	ldr	r3, [r2, #8]
 80015ea:	079b      	lsls	r3, r3, #30
 80015ec:	d5d9      	bpl.n	80015a2 <HAL_SPI_TransmitReceive+0xfe>
 80015ee:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0d6      	beq.n	80015a2 <HAL_SPI_TransmitReceive+0xfe>
 80015f4:	2e01      	cmp	r6, #1
 80015f6:	d1d4      	bne.n	80015a2 <HAL_SPI_TransmitReceive+0xfe>
 80015f8:	e7c8      	b.n	800158c <HAL_SPI_TransmitReceive+0xe8>
        hspi->State = HAL_SPI_STATE_READY;
 80015fa:	235d      	movs	r3, #93	@ 0x5d
 80015fc:	2201      	movs	r2, #1
 80015fe:	54e2      	strb	r2, [r4, r3]
        errorcode = HAL_TIMEOUT;
 8001600:	2003      	movs	r0, #3
        goto error;
 8001602:	e061      	b.n	80016c8 <HAL_SPI_TransmitReceive+0x224>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001604:	6863      	ldr	r3, [r4, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_SPI_TransmitReceive+0x16a>
 800160a:	2e01      	cmp	r6, #1
 800160c:	d10a      	bne.n	8001624 <HAL_SPI_TransmitReceive+0x180>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800160e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001616:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001618:	3301      	adds	r3, #1
 800161a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hspi->TxXferCount--;
 800161c:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800161e:	3b01      	subs	r3, #1
 8001620:	b29b      	uxth	r3, r3
 8001622:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 1U;
 8001624:	2601      	movs	r6, #1
 8001626:	e01c      	b.n	8001662 <HAL_SPI_TransmitReceive+0x1be>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001628:	6822      	ldr	r2, [r4, #0]
 800162a:	6893      	ldr	r3, [r2, #8]
 800162c:	07db      	lsls	r3, r3, #31
 800162e:	d50f      	bpl.n	8001650 <HAL_SPI_TransmitReceive+0x1ac>
 8001630:	2346      	movs	r3, #70	@ 0x46
 8001632:	5ae3      	ldrh	r3, [r4, r3]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00b      	beq.n	8001650 <HAL_SPI_TransmitReceive+0x1ac>
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001638:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800163a:	7b12      	ldrb	r2, [r2, #12]
 800163c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800163e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001640:	3301      	adds	r3, #1
 8001642:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8001644:	2246      	movs	r2, #70	@ 0x46
 8001646:	5aa3      	ldrh	r3, [r4, r2]
 8001648:	3b01      	subs	r3, #1
 800164a:	b29b      	uxth	r3, r3
 800164c:	52a3      	strh	r3, [r4, r2]
        txallowed = 1U;
 800164e:	2601      	movs	r6, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001650:	f7fe ff52 	bl	80004f8 <HAL_GetTick>
 8001654:	1bc0      	subs	r0, r0, r7
 8001656:	42a8      	cmp	r0, r5
 8001658:	d301      	bcc.n	800165e <HAL_SPI_TransmitReceive+0x1ba>
 800165a:	1c6b      	adds	r3, r5, #1
 800165c:	d11d      	bne.n	800169a <HAL_SPI_TransmitReceive+0x1f6>
 800165e:	2d00      	cmp	r5, #0
 8001660:	d01b      	beq.n	800169a <HAL_SPI_TransmitReceive+0x1f6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001662:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001664:	2b00      	cmp	r3, #0
 8001666:	d103      	bne.n	8001670 <HAL_SPI_TransmitReceive+0x1cc>
 8001668:	3346      	adds	r3, #70	@ 0x46
 800166a:	5ae3      	ldrh	r3, [r4, r3]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d019      	beq.n	80016a4 <HAL_SPI_TransmitReceive+0x200>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001670:	6822      	ldr	r2, [r4, #0]
 8001672:	6893      	ldr	r3, [r2, #8]
 8001674:	079b      	lsls	r3, r3, #30
 8001676:	d5d7      	bpl.n	8001628 <HAL_SPI_TransmitReceive+0x184>
 8001678:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0d4      	beq.n	8001628 <HAL_SPI_TransmitReceive+0x184>
 800167e:	2e01      	cmp	r6, #1
 8001680:	d1d2      	bne.n	8001628 <HAL_SPI_TransmitReceive+0x184>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001682:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001688:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800168a:	3301      	adds	r3, #1
 800168c:	63a3      	str	r3, [r4, #56]	@ 0x38
        hspi->TxXferCount--;
 800168e:	8fe3      	ldrh	r3, [r4, #62]	@ 0x3e
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	87e3      	strh	r3, [r4, #62]	@ 0x3e
        txallowed = 0U;
 8001696:	2600      	movs	r6, #0
 8001698:	e7c6      	b.n	8001628 <HAL_SPI_TransmitReceive+0x184>
        hspi->State = HAL_SPI_STATE_READY;
 800169a:	235d      	movs	r3, #93	@ 0x5d
 800169c:	2201      	movs	r2, #1
 800169e:	54e2      	strb	r2, [r4, r3]
        errorcode = HAL_TIMEOUT;
 80016a0:	2003      	movs	r0, #3
        goto error;
 80016a2:	e011      	b.n	80016c8 <HAL_SPI_TransmitReceive+0x224>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80016a4:	003a      	movs	r2, r7
 80016a6:	0029      	movs	r1, r5
 80016a8:	0020      	movs	r0, r4
 80016aa:	f7ff fd23 	bl	80010f4 <SPI_EndRxTxTransaction>
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d002      	beq.n	80016b8 <HAL_SPI_TransmitReceive+0x214>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80016b2:	2320      	movs	r3, #32
 80016b4:	6623      	str	r3, [r4, #96]	@ 0x60
    errorcode = HAL_ERROR;
 80016b6:	2001      	movs	r0, #1
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80016b8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d113      	bne.n	80016e6 <HAL_SPI_TransmitReceive+0x242>
    hspi->State = HAL_SPI_STATE_READY;
 80016be:	335d      	adds	r3, #93	@ 0x5d
 80016c0:	2201      	movs	r2, #1
 80016c2:	54e2      	strb	r2, [r4, r3]
 80016c4:	e000      	b.n	80016c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_BUSY;
 80016c6:	2002      	movs	r0, #2
  __HAL_UNLOCK(hspi);
 80016c8:	235c      	movs	r3, #92	@ 0x5c
 80016ca:	2200      	movs	r2, #0
 80016cc:	54e2      	strb	r2, [r4, r3]
}
 80016ce:	b003      	add	sp, #12
 80016d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorcode = HAL_BUSY;
 80016d2:	2002      	movs	r0, #2
 80016d4:	e7f8      	b.n	80016c8 <HAL_SPI_TransmitReceive+0x224>
 80016d6:	2002      	movs	r0, #2
 80016d8:	e7f6      	b.n	80016c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
 80016da:	2001      	movs	r0, #1
 80016dc:	e7f4      	b.n	80016c8 <HAL_SPI_TransmitReceive+0x224>
 80016de:	2001      	movs	r0, #1
 80016e0:	e7f2      	b.n	80016c8 <HAL_SPI_TransmitReceive+0x224>
 80016e2:	2001      	movs	r0, #1
 80016e4:	e7f0      	b.n	80016c8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
 80016e6:	2001      	movs	r0, #1
 80016e8:	e7ee      	b.n	80016c8 <HAL_SPI_TransmitReceive+0x224>
  __HAL_LOCK(hspi);
 80016ea:	2002      	movs	r0, #2
 80016ec:	e7ef      	b.n	80016ce <HAL_SPI_TransmitReceive+0x22a>
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	ffffefff 	.word	0xffffefff

080016f4 <HAL_SPI_Receive>:
{
 80016f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016f6:	46ce      	mov	lr, r9
 80016f8:	b500      	push	{lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	0004      	movs	r4, r0
 80016fe:	9103      	str	r1, [sp, #12]
 8001700:	0016      	movs	r6, r2
 8001702:	001d      	movs	r5, r3
  if (hspi->State != HAL_SPI_STATE_READY)
 8001704:	235d      	movs	r3, #93	@ 0x5d
 8001706:	5cc3      	ldrb	r3, [r0, r3]
 8001708:	b2df      	uxtb	r7, r3
 800170a:	2b01      	cmp	r3, #1
 800170c:	d000      	beq.n	8001710 <HAL_SPI_Receive+0x1c>
 800170e:	e0b8      	b.n	8001882 <HAL_SPI_Receive+0x18e>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001710:	6842      	ldr	r2, [r0, #4]
 8001712:	3304      	adds	r3, #4
 8001714:	33ff      	adds	r3, #255	@ 0xff
 8001716:	429a      	cmp	r2, r3
 8001718:	d03d      	beq.n	8001796 <HAL_SPI_Receive+0xa2>
  __HAL_LOCK(hspi);
 800171a:	235c      	movs	r3, #92	@ 0x5c
 800171c:	5ce3      	ldrb	r3, [r4, r3]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d100      	bne.n	8001724 <HAL_SPI_Receive+0x30>
 8001722:	e0b7      	b.n	8001894 <HAL_SPI_Receive+0x1a0>
 8001724:	235c      	movs	r3, #92	@ 0x5c
 8001726:	2201      	movs	r2, #1
 8001728:	54e2      	strb	r2, [r4, r3]
  tickstart = HAL_GetTick();
 800172a:	f7fe fee5 	bl	80004f8 <HAL_GetTick>
 800172e:	4681      	mov	r9, r0
  if ((pData == NULL) || (Size == 0U))
 8001730:	9903      	ldr	r1, [sp, #12]
 8001732:	2900      	cmp	r1, #0
 8001734:	d100      	bne.n	8001738 <HAL_SPI_Receive+0x44>
 8001736:	e0a5      	b.n	8001884 <HAL_SPI_Receive+0x190>
 8001738:	2e00      	cmp	r6, #0
 800173a:	d100      	bne.n	800173e <HAL_SPI_Receive+0x4a>
 800173c:	e0a2      	b.n	8001884 <HAL_SPI_Receive+0x190>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800173e:	235d      	movs	r3, #93	@ 0x5d
 8001740:	2204      	movs	r2, #4
 8001742:	54e2      	strb	r2, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001744:	2300      	movs	r3, #0
 8001746:	6623      	str	r3, [r4, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001748:	6421      	str	r1, [r4, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800174a:	3240      	adds	r2, #64	@ 0x40
 800174c:	52a6      	strh	r6, [r4, r2]
  hspi->RxXferCount = Size;
 800174e:	3202      	adds	r2, #2
 8001750:	52a6      	strh	r6, [r4, r2]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001752:	63a3      	str	r3, [r4, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8001754:	87a3      	strh	r3, [r4, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8001756:	87e3      	strh	r3, [r4, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8001758:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800175a:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800175c:	68e2      	ldr	r2, [r4, #12]
 800175e:	23e0      	movs	r3, #224	@ 0xe0
 8001760:	00db      	lsls	r3, r3, #3
 8001762:	429a      	cmp	r2, r3
 8001764:	d924      	bls.n	80017b0 <HAL_SPI_Receive+0xbc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001766:	6822      	ldr	r2, [r4, #0]
 8001768:	6853      	ldr	r3, [r2, #4]
 800176a:	494b      	ldr	r1, [pc, #300]	@ (8001898 <HAL_SPI_Receive+0x1a4>)
 800176c:	400b      	ands	r3, r1
 800176e:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001770:	68a2      	ldr	r2, [r4, #8]
 8001772:	2380      	movs	r3, #128	@ 0x80
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	429a      	cmp	r2, r3
 8001778:	d021      	beq.n	80017be <HAL_SPI_Receive+0xca>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800177a:	6822      	ldr	r2, [r4, #0]
 800177c:	6813      	ldr	r3, [r2, #0]
 800177e:	065b      	lsls	r3, r3, #25
 8001780:	d403      	bmi.n	800178a <HAL_SPI_Receive+0x96>
    __HAL_SPI_ENABLE(hspi);
 8001782:	6813      	ldr	r3, [r2, #0]
 8001784:	2140      	movs	r1, #64	@ 0x40
 8001786:	430b      	orrs	r3, r1
 8001788:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800178a:	68e2      	ldr	r2, [r4, #12]
 800178c:	23e0      	movs	r3, #224	@ 0xe0
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	429a      	cmp	r2, r3
 8001792:	d929      	bls.n	80017e8 <HAL_SPI_Receive+0xf4>
 8001794:	e04b      	b.n	800182e <HAL_SPI_Receive+0x13a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001796:	6883      	ldr	r3, [r0, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1be      	bne.n	800171a <HAL_SPI_Receive+0x26>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800179c:	335d      	adds	r3, #93	@ 0x5d
 800179e:	2204      	movs	r2, #4
 80017a0:	54c2      	strb	r2, [r0, r3]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80017a2:	9500      	str	r5, [sp, #0]
 80017a4:	0033      	movs	r3, r6
 80017a6:	000a      	movs	r2, r1
 80017a8:	f7ff fe7c 	bl	80014a4 <HAL_SPI_TransmitReceive>
 80017ac:	0007      	movs	r7, r0
 80017ae:	e06c      	b.n	800188a <HAL_SPI_Receive+0x196>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80017b0:	6822      	ldr	r2, [r4, #0]
 80017b2:	6851      	ldr	r1, [r2, #4]
 80017b4:	2380      	movs	r3, #128	@ 0x80
 80017b6:	015b      	lsls	r3, r3, #5
 80017b8:	430b      	orrs	r3, r1
 80017ba:	6053      	str	r3, [r2, #4]
 80017bc:	e7d8      	b.n	8001770 <HAL_SPI_Receive+0x7c>
    __HAL_SPI_DISABLE(hspi);
 80017be:	6822      	ldr	r2, [r4, #0]
 80017c0:	6813      	ldr	r3, [r2, #0]
 80017c2:	2140      	movs	r1, #64	@ 0x40
 80017c4:	438b      	bics	r3, r1
 80017c6:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 80017c8:	6822      	ldr	r2, [r4, #0]
 80017ca:	6813      	ldr	r3, [r2, #0]
 80017cc:	4933      	ldr	r1, [pc, #204]	@ (800189c <HAL_SPI_Receive+0x1a8>)
 80017ce:	400b      	ands	r3, r1
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e7d2      	b.n	800177a <HAL_SPI_Receive+0x86>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017d4:	f7fe fe90 	bl	80004f8 <HAL_GetTick>
 80017d8:	464b      	mov	r3, r9
 80017da:	1ac0      	subs	r0, r0, r3
 80017dc:	42a8      	cmp	r0, r5
 80017de:	d301      	bcc.n	80017e4 <HAL_SPI_Receive+0xf0>
 80017e0:	1c6b      	adds	r3, r5, #1
 80017e2:	d115      	bne.n	8001810 <HAL_SPI_Receive+0x11c>
 80017e4:	2d00      	cmp	r5, #0
 80017e6:	d013      	beq.n	8001810 <HAL_SPI_Receive+0x11c>
    while (hspi->RxXferCount > 0U)
 80017e8:	2346      	movs	r3, #70	@ 0x46
 80017ea:	5ae3      	ldrh	r3, [r4, r3]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d037      	beq.n	8001860 <HAL_SPI_Receive+0x16c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80017f0:	6822      	ldr	r2, [r4, #0]
 80017f2:	6893      	ldr	r3, [r2, #8]
 80017f4:	07db      	lsls	r3, r3, #31
 80017f6:	d5ed      	bpl.n	80017d4 <HAL_SPI_Receive+0xe0>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80017f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80017fa:	7b12      	ldrb	r2, [r2, #12]
 80017fc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80017fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001800:	3301      	adds	r3, #1
 8001802:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 8001804:	2246      	movs	r2, #70	@ 0x46
 8001806:	5aa3      	ldrh	r3, [r4, r2]
 8001808:	3b01      	subs	r3, #1
 800180a:	b29b      	uxth	r3, r3
 800180c:	52a3      	strh	r3, [r4, r2]
 800180e:	e7eb      	b.n	80017e8 <HAL_SPI_Receive+0xf4>
          hspi->State = HAL_SPI_STATE_READY;
 8001810:	235d      	movs	r3, #93	@ 0x5d
 8001812:	2201      	movs	r2, #1
 8001814:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 8001816:	2703      	movs	r7, #3
          goto error;
 8001818:	e034      	b.n	8001884 <HAL_SPI_Receive+0x190>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800181a:	f7fe fe6d 	bl	80004f8 <HAL_GetTick>
 800181e:	464b      	mov	r3, r9
 8001820:	1ac0      	subs	r0, r0, r3
 8001822:	42a8      	cmp	r0, r5
 8001824:	d301      	bcc.n	800182a <HAL_SPI_Receive+0x136>
 8001826:	1c6b      	adds	r3, r5, #1
 8001828:	d115      	bne.n	8001856 <HAL_SPI_Receive+0x162>
 800182a:	2d00      	cmp	r5, #0
 800182c:	d013      	beq.n	8001856 <HAL_SPI_Receive+0x162>
    while (hspi->RxXferCount > 0U)
 800182e:	2346      	movs	r3, #70	@ 0x46
 8001830:	5ae3      	ldrh	r3, [r4, r3]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d014      	beq.n	8001860 <HAL_SPI_Receive+0x16c>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001836:	6822      	ldr	r2, [r4, #0]
 8001838:	6893      	ldr	r3, [r2, #8]
 800183a:	07db      	lsls	r3, r3, #31
 800183c:	d5ed      	bpl.n	800181a <HAL_SPI_Receive+0x126>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800183e:	68d2      	ldr	r2, [r2, #12]
 8001840:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001842:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001844:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001846:	3302      	adds	r3, #2
 8001848:	6423      	str	r3, [r4, #64]	@ 0x40
        hspi->RxXferCount--;
 800184a:	2346      	movs	r3, #70	@ 0x46
 800184c:	5ae2      	ldrh	r2, [r4, r3]
 800184e:	3a01      	subs	r2, #1
 8001850:	b292      	uxth	r2, r2
 8001852:	52e2      	strh	r2, [r4, r3]
 8001854:	e7eb      	b.n	800182e <HAL_SPI_Receive+0x13a>
          hspi->State = HAL_SPI_STATE_READY;
 8001856:	235d      	movs	r3, #93	@ 0x5d
 8001858:	2201      	movs	r2, #1
 800185a:	54e2      	strb	r2, [r4, r3]
          errorcode = HAL_TIMEOUT;
 800185c:	2703      	movs	r7, #3
          goto error;
 800185e:	e011      	b.n	8001884 <HAL_SPI_Receive+0x190>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001860:	464a      	mov	r2, r9
 8001862:	0029      	movs	r1, r5
 8001864:	0020      	movs	r0, r4
 8001866:	f7ff fc79 	bl	800115c <SPI_EndRxTransaction>
 800186a:	2800      	cmp	r0, #0
 800186c:	d001      	beq.n	8001872 <HAL_SPI_Receive+0x17e>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800186e:	2320      	movs	r3, #32
 8001870:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001872:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8001874:	2b00      	cmp	r3, #0
 8001876:	d105      	bne.n	8001884 <HAL_SPI_Receive+0x190>
    hspi->State = HAL_SPI_STATE_READY;
 8001878:	335d      	adds	r3, #93	@ 0x5d
 800187a:	2201      	movs	r2, #1
 800187c:	54e2      	strb	r2, [r4, r3]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800187e:	2700      	movs	r7, #0
 8001880:	e000      	b.n	8001884 <HAL_SPI_Receive+0x190>
    errorcode = HAL_BUSY;
 8001882:	2702      	movs	r7, #2
  __HAL_UNLOCK(hspi);
 8001884:	235c      	movs	r3, #92	@ 0x5c
 8001886:	2200      	movs	r2, #0
 8001888:	54e2      	strb	r2, [r4, r3]
}
 800188a:	0038      	movs	r0, r7
 800188c:	b004      	add	sp, #16
 800188e:	bc80      	pop	{r7}
 8001890:	46b9      	mov	r9, r7
 8001892:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 8001894:	2702      	movs	r7, #2
 8001896:	e7f8      	b.n	800188a <HAL_SPI_Receive+0x196>
 8001898:	ffffefff 	.word	0xffffefff
 800189c:	ffffbfff 	.word	0xffffbfff

080018a0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018a0:	e7fe      	b.n	80018a0 <NMI_Handler>

080018a2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <HardFault_Handler>

080018a4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018a6:	4770      	bx	lr

080018a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018aa:	f7fe fe19 	bl	80004e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ae:	bd10      	pop	{r4, pc}

080018b0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80018b0:	4770      	bx	lr
	...

080018b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018b4:	480d      	ldr	r0, [pc, #52]	@ (80018ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b8:	f7ff fffa 	bl	80018b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018bc:	480c      	ldr	r0, [pc, #48]	@ (80018f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80018be:	490d      	ldr	r1, [pc, #52]	@ (80018f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018c0:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <LoopForever+0xe>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c4:	e002      	b.n	80018cc <LoopCopyDataInit>

080018c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ca:	3304      	adds	r3, #4

080018cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d0:	d3f9      	bcc.n	80018c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018d2:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001900 <LoopForever+0x16>)
  movs r3, #0
 80018d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d8:	e001      	b.n	80018de <LoopFillZerobss>

080018da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018dc:	3204      	adds	r2, #4

080018de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e0:	d3fb      	bcc.n	80018da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018e2:	f000 f819 	bl	8001918 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e6:	f7fe fda1 	bl	800042c <main>

080018ea <LoopForever>:

LoopForever:
    b LoopForever
 80018ea:	e7fe      	b.n	80018ea <LoopForever>
  ldr   r0, =_estack
 80018ec:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80018f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80018f8:	080019b4 	.word	0x080019b4
  ldr r2, =_sbss
 80018fc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001900:	20000098 	.word	0x20000098

08001904 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC1_COMP_IRQHandler>

08001906 <memset>:
 8001906:	0003      	movs	r3, r0
 8001908:	1882      	adds	r2, r0, r2
 800190a:	4293      	cmp	r3, r2
 800190c:	d100      	bne.n	8001910 <memset+0xa>
 800190e:	4770      	bx	lr
 8001910:	7019      	strb	r1, [r3, #0]
 8001912:	3301      	adds	r3, #1
 8001914:	e7f9      	b.n	800190a <memset+0x4>
	...

08001918 <__libc_init_array>:
 8001918:	b570      	push	{r4, r5, r6, lr}
 800191a:	2600      	movs	r6, #0
 800191c:	4c0c      	ldr	r4, [pc, #48]	@ (8001950 <__libc_init_array+0x38>)
 800191e:	4d0d      	ldr	r5, [pc, #52]	@ (8001954 <__libc_init_array+0x3c>)
 8001920:	1b64      	subs	r4, r4, r5
 8001922:	10a4      	asrs	r4, r4, #2
 8001924:	42a6      	cmp	r6, r4
 8001926:	d109      	bne.n	800193c <__libc_init_array+0x24>
 8001928:	2600      	movs	r6, #0
 800192a:	f000 f819 	bl	8001960 <_init>
 800192e:	4c0a      	ldr	r4, [pc, #40]	@ (8001958 <__libc_init_array+0x40>)
 8001930:	4d0a      	ldr	r5, [pc, #40]	@ (800195c <__libc_init_array+0x44>)
 8001932:	1b64      	subs	r4, r4, r5
 8001934:	10a4      	asrs	r4, r4, #2
 8001936:	42a6      	cmp	r6, r4
 8001938:	d105      	bne.n	8001946 <__libc_init_array+0x2e>
 800193a:	bd70      	pop	{r4, r5, r6, pc}
 800193c:	00b3      	lsls	r3, r6, #2
 800193e:	58eb      	ldr	r3, [r5, r3]
 8001940:	4798      	blx	r3
 8001942:	3601      	adds	r6, #1
 8001944:	e7ee      	b.n	8001924 <__libc_init_array+0xc>
 8001946:	00b3      	lsls	r3, r6, #2
 8001948:	58eb      	ldr	r3, [r5, r3]
 800194a:	4798      	blx	r3
 800194c:	3601      	adds	r6, #1
 800194e:	e7f2      	b.n	8001936 <__libc_init_array+0x1e>
 8001950:	080019ac 	.word	0x080019ac
 8001954:	080019ac 	.word	0x080019ac
 8001958:	080019b0 	.word	0x080019b0
 800195c:	080019ac 	.word	0x080019ac

08001960 <_init>:
 8001960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001962:	46c0      	nop			@ (mov r8, r8)
 8001964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001966:	bc08      	pop	{r3}
 8001968:	469e      	mov	lr, r3
 800196a:	4770      	bx	lr

0800196c <_fini>:
 800196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001972:	bc08      	pop	{r3}
 8001974:	469e      	mov	lr, r3
 8001976:	4770      	bx	lr
